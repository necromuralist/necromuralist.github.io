<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about emacs)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 15 Aug 2019 17:05:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>emacs-jupyter</title><link>https://necromuralist.github.io/posts/emacs/emacs-jupyter/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#orgf781b76"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#org8885785"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#org1352da5"&gt;Finding the Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#org4399b34"&gt;Fixing the Problem&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#org9e72739"&gt;First Clone the Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#orgdf0c12c"&gt;Then Install the Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#orgd44c961"&gt;Then Build It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#org34da79a"&gt;Fix the Other Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/emacs-jupyter/#org4d74de0"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf781b76" class="outline-2"&gt;
&lt;h2 id="orgf781b76"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf781b76"&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; has become one of the most important tools in my workflow (along with &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;, and the &lt;a href="https://plugins.getnikola.com/v8/orgmode/"&gt;org-mode plugin&lt;/a&gt;), but earlier this week I stumbled upon &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; and I thought maybe it'd be worth it to at least take a look. If the &lt;code&gt;readme&lt;/code&gt; file is to be believed, it does everything &lt;code&gt;ob-ipython&lt;/code&gt; does and more, so maybe my world would change once again. But then I ran into a little problem - trying to install it from &lt;a href="https://melpa.org/#/"&gt;MELPA&lt;/a&gt; caused emacs to crash… with no messages, nothing. So is this thing ready for the world to use yet?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8885785" class="outline-2"&gt;
&lt;h2 id="org8885785"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8885785"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1352da5" class="outline-3"&gt;
&lt;h3 id="org1352da5"&gt;Finding the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1352da5"&gt;
&lt;p&gt;
I tried different things based on the errors in the emacs-jupyter's &lt;a href="https://github.com/dzop/emacs-jupyter/issues"&gt;"Issues"&lt;/a&gt; but it turned out that &lt;a href="https://github.com/dzop/emacs-zmq/issues/14"&gt;this emacs-zmq bug&lt;/a&gt; had the answer - the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs snapshot&lt;/a&gt; for Ubuntu wasn't built in a way that works with emacs-jupyter. The bug-report mentions an out of date gcc version, but I didn't confirm that.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4399b34" class="outline-3"&gt;
&lt;h3 id="org4399b34"&gt;Fixing the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4399b34"&gt;
&lt;p&gt;
So, knowing that the version of emacs I was using was the problem I decided to build it myself. In the earlier days of Ubuntu this was something I did all the time, but it seems like it's been forever since I had to do this so I was a little worried that it might be a huge mess of Makefile debugging, but I found &lt;a href="https://www.emacswiki.org/emacs/EmacsSnapshotAndDebian"&gt;this page on the emacs wiki&lt;/a&gt; which made it pretty easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9e72739" class="outline-4"&gt;
&lt;h4 id="org9e72739"&gt;First Clone the Repository&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9e72739"&gt;
&lt;pre class="example"&gt;
git clone --depth 1 git://git.sv.gnu.org/emacs.git
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdf0c12c" class="outline-4"&gt;
&lt;h4 id="orgdf0c12c"&gt;Then Install the Dependencies&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgdf0c12c"&gt;
&lt;pre class="example"&gt;
sudo apt-fast install autoconf automake libtool texinfo build-essential xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev libgif-dev libtiff-dev libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev libxml2-dev
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd44c961" class="outline-4"&gt;
&lt;h4 id="orgd44c961"&gt;Then Build It&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd44c961"&gt;
&lt;pre class="example"&gt;
cd emacs
./autogen.sh
./configure --prefix=/home/athena/bin/emacs-jupyter/
make bootstrap
make install
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
That bit about installing it in my home directory and linking it isn't necessary, but I didn't want to let the Makefile clobber anything (and I was too lazy to read it too closely).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org34da79a" class="outline-3"&gt;
&lt;h3 id="org34da79a"&gt;Fix the Other Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org34da79a"&gt;
&lt;p&gt;
It turned out that the build went okay, and I could even install emacs-jupyter (yay), but when I tried to execute &lt;code&gt;M-x jupyter-run-repl&lt;/code&gt; I got an error message saying that modules weren't supported (what?). So then I found &lt;a href="http://diobla.info/blog-archive/modules-tut.html"&gt;this blog post&lt;/a&gt; that said you have to pass in the &lt;code&gt;--with-modules&lt;/code&gt; argument when you run &lt;code&gt;configure&lt;/code&gt;… So now the process became this:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd emacs
./autogen.sh
./configure --prefix=/home/athena/bin/emacs-jupyter/ --with-modules
make bootstrap
make install
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
And what do you know, it worked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4d74de0" class="outline-2"&gt;
&lt;h2 id="org4d74de0"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4d74de0"&gt;
&lt;p&gt;
emacs-jupyter looks like an improvement over &lt;code&gt;ob-ipython&lt;/code&gt; in that it adds a lot of features (and claims to be faster), but getting it to work was way harder than I'm used to. I don't think it was "difficult" in a real sense, given what it used to be like to make and install things on Ubuntu, but I think I've gotten used to things just working. Anyway, now I can see if emacs-jupyter lives up to its own hype.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>emacs-jupyter</category><guid>https://necromuralist.github.io/posts/emacs/emacs-jupyter/</guid><pubDate>Sat, 10 Aug 2019 22:13:27 GMT</pubDate></item><item><title>Opening Remote Files In Emacs Using SSH</title><link>https://necromuralist.github.io/posts/emacs/opening-remote-files-in-emacs-using-ssh/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/opening-remote-files-in-emacs-using-ssh/#org6c96f57"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/opening-remote-files-in-emacs-using-ssh/#org2974e86"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/opening-remote-files-in-emacs-using-ssh/#orge2a1be4"&gt;Editing a Remote User File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/opening-remote-files-in-emacs-using-ssh/#orgd109467"&gt;Editing a Remote File As Root&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs/opening-remote-files-in-emacs-using-ssh/#org2903fb8"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6c96f57" class="outline-2"&gt;
&lt;h2 id="org6c96f57"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6c96f57"&gt;
&lt;p&gt;
For some strange reason, &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;the emacs wiki page on tramp mode&lt;/a&gt; doesn't have instructions on how to open a file on a remote machine using tramp in its main section. You instead have to go down to the &lt;i&gt;Tips and Tricks&lt;/i&gt; and try and pick out a version that works. So I'm writing this here so I maybe won't have to do all the searching I did the next time. This is the version that worked for me (Emacs 27.0.50, Ubuntu 19.04).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2974e86" class="outline-2"&gt;
&lt;h2 id="org2974e86"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2974e86"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge2a1be4" class="outline-3"&gt;
&lt;h3 id="orge2a1be4"&gt;Editing a Remote User File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge2a1be4"&gt;
&lt;p&gt;
You start by opening the file like you would a local file (&lt;code&gt;C-x C-f&lt;/code&gt;) and then in when the minibuffer opens up you use this syntax for the path:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:&amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt;&amp;gt;:&amp;lt;path to file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So, for example, I have an SSH alias to &lt;code&gt;hades@erebus&lt;/code&gt; named &lt;code&gt;Hades&lt;/code&gt; and if I wanted to edit the emacs init file on that machine I would use this:
&lt;/p&gt;

&lt;pre class="example"&gt;
/ssh:Hades:.emacs.d/init.el
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd109467" class="outline-3"&gt;
&lt;h3 id="orgd109467"&gt;Editing a Remote File As Root&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd109467"&gt;
&lt;p&gt;
To open a file as root you stick an extra pipe (&lt;code&gt;|sudo&lt;/code&gt;) into the previous path syntax.
&lt;/p&gt;

&lt;pre class="example"&gt;
/ssh:&amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt;|sudo:&amp;lt;hostname&amp;gt;:&amp;lt;path to file&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
This syntax doesn't work with SSH aliases (or didn't seem to when I tried), so editing the &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; file the same machine as before would use this:
&lt;/p&gt;

&lt;pre class="example"&gt;
/ssh:hades@erebus|sudo:erebus:/etc/apt/sources.list
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2903fb8" class="outline-2"&gt;
&lt;h2 id="org2903fb8"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2903fb8"&gt;
&lt;p&gt;
I got the &lt;code&gt;sudo&lt;/code&gt; version from &lt;a href="https://stackoverflow.com/questions/20624024/what-is-the-best-way-to-open-remote-files-with-emacs-and-ssh"&gt;Stack Overflow&lt;/a&gt; (of course).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>howto</category><category>ssh</category><guid>https://necromuralist.github.io/posts/emacs/opening-remote-files-in-emacs-using-ssh/</guid><pubDate>Sat, 27 Jul 2019 19:58:44 GMT</pubDate></item><item><title>Inserting Text Between Methods in Org-Mode</title><link>https://necromuralist.github.io/posts/org-babel-noweb-ref/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
This is an attempt to get org-mode to insert text between methods in a class definition using the noweb-ref property. I think you can also do it by just tangling everything to the same file, but I like the noweb notation better.
&lt;/p&gt;

&lt;div id="outline-container-orge5abaa6" class="outline-2"&gt;
&lt;h2 id="orge5abaa6"&gt;The Tangle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge5abaa6"&gt;
&lt;p&gt;
To keep it simple I'm just going to include a section for the class definition and a &lt;code&gt;main&lt;/code&gt; section to check out the results. Note that to be able to break up the class definition I had to turn off org-mode's clean-up so all the python blocks have to be indented exactly the way they will be in the final python file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org51968df" class="outline-2"&gt;
&lt;h2 id="org51968df"&gt;The First Class&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org51968df"&gt;
&lt;p&gt;
This first class won't do much, but if I understand the documentation I should be able to insert text between the parts of it and still have it work when the python gets tangled out. The org-mode source block starts like this - &lt;code&gt;#+BEGIN_SRC python :noweb-ref first-class&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org720129f" class="outline-3"&gt;
&lt;h3 id="org720129f"&gt;The Constructor&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org720129f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FirstClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="sd"&gt;"""a class that is first&lt;/span&gt;
&lt;span class="sd"&gt;       Parameters&lt;/span&gt;
&lt;span class="sd"&gt;       ----------&lt;/span&gt;

&lt;span class="sd"&gt;       name: string&lt;/span&gt;
&lt;span class="sd"&gt;	 some kind of identifier&lt;/span&gt;
&lt;span class="sd"&gt;       """&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd5e5185" class="outline-3"&gt;
&lt;h3 id="orgd5e5185"&gt;The Call&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd5e5185"&gt;
&lt;p&gt;
The call emits the name. To concatenate this method to the previous block I'm using the same org-mode source-block header as I did with the constructor (&lt;code&gt;#+BEGIN_SRC python :noweb-ref first-class&lt;/code&gt;). You could use a different name and insert another reference in the tangle but this seems more logical to me. One problem here is that python-mode (or some other mode) will interpret the methods as stand-alone functions and move them flush left. To fix this I had to turn off the automatic indentation using &lt;code&gt;(setq org-src-preserve-indentation t)&lt;/code&gt;. This means that you have to keep track of the indentation yourself, regardless of where the code sits in the org-mode document (so as you create sub-sections it will look uglier and uglier in the original document, at least to me). Putting the method in a separate block also requires that you to insert an empty line before the method to  keep it from being stuck to the bottom of the previous one, but it doesn't include it when it gets exported to HTML, so you can't see it in this post. In fact, I noticed afterwards that the HTML export also stripped out the indentation on the left so you can't really see what I'm talking about.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="sd"&gt;"""prints the name"""&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1923376" class="outline-2"&gt;
&lt;h2 id="org1923376"&gt;The Main&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1923376"&gt;
&lt;p&gt;
This part constructs the &lt;code&gt;FirstClass&lt;/code&gt; object and calls it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirstClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d20006" class="outline-2"&gt;
&lt;h2 id="org0d20006"&gt;Trying it out&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0d20006"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  python noweb_ref.py
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Bob

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org45ff6f9" class="outline-2"&gt;
&lt;h2 id="org45ff6f9"&gt;Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org45ff6f9"&gt;
&lt;p&gt;
The point of trying this out is that I want to be able to break up and document class-methods better. Unfortunately it requires you to do a little more fiddling with the white-space yourself and makes the source org-mode file a little harder to read (I think) but I'm going to try it for a little while and see if the resulting documents are worth the extra headache. Maybe I'll just have to stick with docstrings for documenting the separate methods…
&lt;/p&gt;

&lt;p&gt;
This bit at the end makes it so the indentation is always preserved, even if the &lt;code&gt;init.el&lt;/code&gt; file isn't set up that way.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="c1"&gt;# Local Variables:&lt;/span&gt;
  &lt;span class="c1"&gt;# org-src-preserve-indentation: t&lt;/span&gt;
  &lt;span class="c1"&gt;# End:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>orgmode literateprogramming</category><guid>https://necromuralist.github.io/posts/org-babel-noweb-ref/</guid><pubDate>Sun, 19 Feb 2017 19:06:06 GMT</pubDate></item></channel></rss>