<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about emacs)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 18 May 2023 07:55:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Tangling Multiple Org Files</title><link>https://necromuralist.github.io/posts/tangling-multiple-org-files/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#orgc5a13c6"&gt;The Steps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org90471af"&gt;Create one.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org00e3a83"&gt;Create two.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org2d245df"&gt;Export one.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#orge562fb1"&gt;Tangle one.org.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org5ee95b9"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
I've been looking off and on for ways to combine separate code-blocks in org-mode into a single tangled file. I wanted to use it because I tangle code that I want to re-use out of posts but then if I want to break the posts up I need to create a separate file (tangle) for each post. I'm hopeful that this method will allow me to break up a tangle across multiple posts. I've only tried it on toy files but I want to get some initial documentation for it in place.
&lt;/p&gt;
&lt;div id="outline-container-orgc5a13c6" class="outline-2"&gt;
&lt;h2 id="orgc5a13c6"&gt;The Steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc5a13c6"&gt;
&lt;p&gt;
Let's say that there are two source org-files:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;one.org&lt;/code&gt;: contains the tangle block and a source block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;two.org&lt;/code&gt;: contains another block that we want to tangle with the one in &lt;code&gt;one.org&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The steps are:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Put an &lt;code&gt;#+INCLUDE&lt;/code&gt; directive to include &lt;code&gt;two.org&lt;/code&gt; into &lt;code&gt;one.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Export &lt;code&gt;one.org&lt;/code&gt; to an &lt;code&gt;org&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Open the exported org file (&lt;code&gt;one.org.org&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Tangle it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-org90471af" class="outline-3"&gt;
&lt;h3 id="org90471af"&gt;Create one.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org90471af"&gt;
&lt;p&gt;
The file &lt;code&gt;one.org&lt;/code&gt; is going to have the tangle and the first source-block:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src python :tangle ~/test.py :exports none
&amp;lt;&amp;lt;block-one&amp;gt;&amp;gt;

&amp;lt;&amp;lt;block-two&amp;gt;&amp;gt;
#+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src python :noweb-ref block-one
def one():
    print("One")
#+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We also need to include what's in the second file (&lt;code&gt;two.org&lt;/code&gt;). The code we want to include is in a section called &lt;code&gt;Two&lt;/code&gt; so we can include just that section by adding a search term at the end.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+INCLUDE: "./two.org::*Two"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00e3a83" class="outline-3"&gt;
&lt;h3 id="org00e3a83"&gt;Create two.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org00e3a83"&gt;
&lt;p&gt;
In the other file add the section header to match the &lt;code&gt;INCLUDE&lt;/code&gt; search term (&lt;code&gt;*Two&lt;/code&gt;) and put a code block with a reference named &lt;code&gt;block-two&lt;/code&gt; to match what's in the tangle block above.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* Two
#+begin_src python :noweb-ref block-two
def two():
print("Two")
#+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d245df" class="outline-3"&gt;
&lt;h3 id="org2d245df"&gt;Export one.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2d245df"&gt;
&lt;p&gt;
Tangling unfortunately ignores the &lt;code&gt;INCLUDE&lt;/code&gt; directive so we have to export it first to another org-file in order to get the text from &lt;code&gt;org.two&lt;/code&gt; into our source file. By default, exporting to &lt;code&gt;org&lt;/code&gt; is disabled so you need to enable it (e.g. starting with &lt;code&gt;M-x customize&lt;/code&gt; &lt;code&gt;org-export-backends&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Once it's enabled you can export &lt;code&gt;one.org&lt;/code&gt; to an org-mode file using &lt;code&gt;C-c C-e O v&lt;/code&gt; (the default name will be &lt;code&gt;one.org.org&lt;/code&gt;). 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge562fb1" class="outline-3"&gt;
&lt;h3 id="orge562fb1"&gt;Tangle one.org.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge562fb1"&gt;
&lt;p&gt;
The last choice when we exported the file in the previous step (&lt;code&gt;v&lt;/code&gt;) will save it to a file and open it up in an emacs buffer. When the buffer is open you can then tangle it (&lt;code&gt;C-c C-v C-t&lt;/code&gt;) and the output (&lt;code&gt;/test.py&lt;/code&gt; from our tangle block) should contain both of our functions.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5ee95b9" class="outline-2"&gt;
&lt;h2 id="org5ee95b9"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5ee95b9"&gt;
&lt;p&gt;
This is where I got the information on breaking up the files. It includes some emacs-lisp to run the steps automatically (although I didn't try it):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Multi-File Org-Babel Tangles with Include Directives [Internet]. DEV Community. [cited 2022 Mar 21]. Available from: &lt;a href="https://dev.to/jfhbrook/multi-file-org-babel-tangles-with-include-directives-5522"&gt;https://dev.to/jfhbrook/multi-file-org-babel-tangles-with-include-directives-5522&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is the post that mentions that exporting org-files to org-format needs to be enabled (and how to do it):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;exporting - Org mode export subtree to new org file - option missing? [Internet]. Emacs Stack Exchange. [cited 2022 Mar 21]. Available from: &lt;a href="https://emacs.stackexchange.com/a/70453"&gt;https://emacs.stackexchange.com/a/70453&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is the manual page explaining the search syntax (which is what the &lt;code&gt;#+INCLUDE&lt;/code&gt; format uses).
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Search Options (The Org Manual) [Internet]. [cited 2022 Mar 21]. Available from: &lt;a href="https://orgmode.org/manual/Search-Options.html"&gt;https://orgmode.org/manual/Search-Options.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This explains the &lt;code&gt;#+INCLUDE&lt;/code&gt; directive options:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Include Files (The Org Manual) [Internet]. [cited 2022 Mar 21]. Available from: &lt;a href="https://orgmode.org/manual/Include-Files.html"&gt;https://orgmode.org/manual/Include-Files.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>literate programming</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/tangling-multiple-org-files/</guid><pubDate>Tue, 22 Mar 2022 00:30:14 GMT</pubDate></item><item><title>Emacs Scrollbar Artifact on Kubuntu</title><link>https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#org7dd5f43"&gt;What's this then?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#orge7eae49"&gt;The Cause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#org4a5eafa"&gt;The Fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#org8d08c14"&gt;The Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7dd5f43" class="outline-2"&gt;
&lt;h2 id="org7dd5f43"&gt;What's this then?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7dd5f43"&gt;
&lt;p&gt;
I switch back and forth between Kubuntu and Ubuntu (Ubuntu seems to work better, but I like the aesthetics of Kubuntu) and one of the problems I had was that when I launched emacs in Kubuntu it had a permanent scrollbar in the center of the window that blocked out whatever text was there.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/emacs-scrol-artifact.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
It's more of an annoyance than anything else but since it doesn't happen on Ubuntu I figured I'd try and fix it. It took me a couple of different searches to find the answer so I thought I'd document it in case I need to remember this later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge7eae49" class="outline-2"&gt;
&lt;h2 id="orge7eae49"&gt;The Cause&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge7eae49"&gt;
&lt;p&gt;
This is the desktop that's causing the problem:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/kubuntu-version.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
It turns out that it's because my monitors are of different resolutions and in order to be able to read anything on the higher-resolution monitor I had to set the display scale to 200%, but this causes a problem with the scaling of the widgets (at least that's what it said on the &lt;a href="https://www.reddit.com/r/emacs/comments/am64y8/bug_with_scrollbar_on_ubuntu_1804/"&gt;reddit&lt;/a&gt; post where I found the solution).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a5eafa" class="outline-2"&gt;
&lt;h2 id="org4a5eafa"&gt;The Fix&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4a5eafa"&gt;
&lt;p&gt;
The fix for me was to edit the &lt;code&gt;~/.local/share/applications/emacs.desktop&lt;/code&gt; file so that the EXEC line read:
&lt;/p&gt;

&lt;pre class="example" id="orgae1defd"&gt;
Exec= /usr/bin/env GDK_SCALE= emacs
&lt;/pre&gt;

&lt;p&gt;
Once this was in place the artifact went away.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/emacs-no-artifact.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8d08c14" class="outline-2"&gt;
&lt;h2 id="org8d08c14"&gt;The Source&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8d08c14"&gt;
&lt;p&gt;
I linked to it above, but this is the reddit post where I found the fix:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/am64y8/bug_with_scrollbar_on_ubuntu_1804/"&gt;https://www.reddit.com/r/emacs/comments/am64y8/bug_with_scrollbar_on_ubuntu_1804/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>how-to</category><category>kubuntu</category><guid>https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/</guid><pubDate>Sun, 03 Oct 2021 20:58:02 GMT</pubDate></item><item><title>Javascript in Org-Babel</title><link>https://necromuralist.github.io/posts/javascript-in-org-babel/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org5fc44d7"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org86c5112"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#orgc739cd3"&gt;Prerequites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org25f6187"&gt;init.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org7af4a73"&gt;Try It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#orgdbb2e25"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5fc44d7" class="outline-2"&gt;
&lt;h2 id="org5fc44d7"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5fc44d7"&gt;
&lt;p&gt;
This is a test of running javascript in org-babel blocks. For some reason I couldn't find any documentation about setting it up so this is also a place for me to collect what to do.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I actually did use &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.html"&gt;this org-babel page&lt;/a&gt; for some of it, but it wasn't enough for me to really figure out what was going on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org86c5112" class="outline-2"&gt;
&lt;h2 id="org86c5112"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org86c5112"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc739cd3" class="outline-3"&gt;
&lt;h3 id="orgc739cd3"&gt;Prerequites&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc739cd3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org58eccda" class="outline-4"&gt;
&lt;h4 id="org58eccda"&gt;Node&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org58eccda"&gt;
&lt;p&gt;
Since javascript is an interpreted language you need an interpreter to run code blocks. Org-babel assumes you're using &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt; so you need to install it and make sure it's on the &lt;code&gt;PATH&lt;/code&gt;. They do support debian-based systems (including Ubuntu, which I use) but they don't use the traditional PPA system. Instead they have different installs for the different versions - but they do have a Long-Term Support (LTS) version which I'm hoping updates so that's what I installed.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt-get install -y nodejs
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As of this writing it install version 12.19.0, versus the Ubuntu 20.04 version of 10.19.0.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org25f6187" class="outline-3"&gt;
&lt;h3 id="org25f6187"&gt;init.el&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org25f6187"&gt;
&lt;p&gt;
Besides installing node you have to make sure that you add &lt;code&gt;js&lt;/code&gt; to your org-babel set up.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you already have other languages added this just goes in the same block.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(org-babel-do-load-languages
 'org-babel-load-languages
 '((plantuml . t)
   (shell . t)
   (emacs-lisp . t)
   (latex . t)
   (ditaa . t)
   (js . t)
   (python . t)
   (jupyter . t)
   ))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7af4a73" class="outline-3"&gt;
&lt;h3 id="org7af4a73"&gt;Try It&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7af4a73"&gt;
&lt;p&gt;
Now that it's set up you can execute javascript in org-babel code blocks, designating them as &lt;code&gt;js&lt;/code&gt; blocks (e.g. &lt;code&gt;#+begin_src js :results output :exports both&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Here's a simple output block.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
test
&lt;/pre&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'apple'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'banana'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
apple
applebanana
&lt;/pre&gt;


&lt;p&gt;
One thing to note is that this doesn't seem create sessions that persist across blocks. Even though I defined &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in the previous block, this next block raises an error because it doesn't think I've defined &lt;code&gt;y&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you try and put a session argument in the org-babel header you'll get a message saying "Session evaluation with node.js not supported". According to the &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.org.html"&gt;org-babel-js documentation&lt;/a&gt; you can put in special headers to run the code in an alternate REPL, but I tried it and the output ends up in a separate buffer rather than showing up in the org-document, which seems to kind of lessen the usefulness of it. Also the js-comint version dumps extra text into the REPL as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdbb2e25" class="outline-2"&gt;
&lt;h2 id="orgdbb2e25"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdbb2e25"&gt;
&lt;p&gt;
Okay, so this was a very basic hello world for javascript in emacs. The lack of sessions is kind of disappointing, but I don't know how useful this is going to be, anyway, since javascript is so tied to the browser, but there it is.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>javascript</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/javascript-in-org-babel/</guid><pubDate>Sat, 17 Oct 2020 03:48:55 GMT</pubDate></item><item><title>Jupyter-Emacs Sessions with org-mode</title><link>https://necromuralist.github.io/posts/jupyter-emacs-sessions/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org0a93c14"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org7cf8ea2"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#orgb8080bd"&gt;Starting the Jupyter Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org46d9b7a"&gt;Start a Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#orga438600"&gt;Setting the Session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org16f9066"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0a93c14" class="outline-2"&gt;
&lt;h2 id="org0a93c14"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0a93c14"&gt;
&lt;p&gt;
These are my notes on using &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; using a remote session. It works with a local session as well, but I'll just relate the steps as if you're running the jupyter session on a remote machine.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7cf8ea2" class="outline-2"&gt;
&lt;h2 id="org7cf8ea2"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7cf8ea2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb8080bd" class="outline-3"&gt;
&lt;h3 id="orgb8080bd"&gt;Starting the Jupyter Server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb8080bd"&gt;
&lt;p&gt;
The first thing to do is start the jupyter session on the remote machine. Since I'm doing this with &lt;b&gt;nikola&lt;/b&gt; I should note that you want to start the session in the same location as the file you're editing in emacs, because all your file references will be based on that directory (so if you, for instance, create an image and want to place it in the &lt;code&gt;files&lt;/code&gt; folder, you will need to note where that stands relative to the file you are editing and where you start the jupyter kernel).
&lt;/p&gt;

&lt;p&gt;
In my case I'm editing a file in &lt;code&gt;~/projects/In-Too-Deep/posts/fastai/&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/projects/In-Too-Deep/posts/fastai/
jupyter kernel
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will start the kernel and show you the file that you need to copy to your local machine (where you are running emacs). Here's an example output of that command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(In-Too-Deep) hades@erebus ~/p/I/p/fastai (fastai-restart| Dirty:4)&amp;gt; jupyter kernel
[KernelApp] Starting kernel 'python3'
[KernelApp] Connection file: /home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json
[KernelApp] To connect a client: --existing kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The important thing to note is the line with &lt;code&gt;Connection file&lt;/code&gt; (&lt;code&gt;[KernelApp] Connection file: /home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json&lt;/code&gt;). You will need to copy that file to the machine that you are running emacs on. Where do you put it? Check your jupyter location on your local machine (where you're running emacs, not where you're running jupyter).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --runtime-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Change into whatever directory is output by that command and then copy the json file from the machine with the running jupyter kernel onto your local machine.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/.local/share/jupyter/runtime
scp Hades:/home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org46d9b7a" class="outline-3"&gt;
&lt;h3 id="org46d9b7a"&gt;Start a Console&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org46d9b7a"&gt;
&lt;p&gt;
Now that you've copied over the information for the jupyter session you can start a console for it. I'll assume you're still in the directory with the json file in it, so I won't pass in the full path.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --console kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json --ssh Hades
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note the second argument where I passed in the SSH alias for my remote machine. If you don't have an alias set up then replace it with something that looks like &lt;code&gt;&amp;lt;username&amp;gt;@&amp;lt;IP Address&amp;gt;&lt;/code&gt; (this assumes, of course, that the machine with the jupyter session running on it also has an SSH server running). This command sets up our session to forward our jupyter commands to the remote machine. When you execute this command it should tell you that you can connect to the kernel using a slightly modified JSON file name:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ZMQTerminalIPythonApp] Forwarding connections to 127.0.0.1 via Hades
[ZMQTerminalIPythonApp] To connect another client via this tunnel, use:
[ZMQTerminalIPythonApp] --existing kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that &lt;code&gt;--existing&lt;/code&gt; argument for the next session (it should be the same as the original json file but with &lt;code&gt;-ssh&lt;/code&gt; added to the end of the name).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga438600" class="outline-3"&gt;
&lt;h3 id="orga438600"&gt;Setting the Session&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga438600"&gt;
&lt;p&gt;
Since this is org-mode-based the first thing you should do is connect your emacs buffer to the console. Add this to the top of your buffer (the file where you intend to run python).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+PROPERTY: header-args :session /home/athena/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you have this in your file when you open it you don't need to do anything special, but otherwise C-c C-c on it to load the session. What this does is allow subsequent python org-mode blocks to use the remote jupyter session when you execute them, without needing to specify a session.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org16f9066" class="outline-2"&gt;
&lt;h2 id="org16f9066"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org16f9066"&gt;
&lt;p&gt;
At this point you can run org-mode code blocs that are set up to use &lt;code&gt;emacs-jupyter&lt;/code&gt; and they will redirect to the remote jupyter session. That is a whole other adventure so I'll leave it for another time (or to someone else).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>python</category><guid>https://necromuralist.github.io/posts/jupyter-emacs-sessions/</guid><pubDate>Sat, 09 May 2020 22:36:05 GMT</pubDate></item><item><title>emacs-jupyter</title><link>https://necromuralist.github.io/posts/emacs-jupyter/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgfe19da2"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org8e4e67c"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org22df140"&gt;Finding the Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org087a2ec"&gt;Fixing the Problem&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org87641b0"&gt;First Clone the Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orge28225f"&gt;Then Install the Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgf360691"&gt;Then Build It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orga040e27"&gt;Fix the Other Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgce1605e"&gt;An Update That Broke It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org61ad6a5"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfe19da2" class="outline-2"&gt;
&lt;h2 id="orgfe19da2"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfe19da2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; has become one of the most important tools in my workflow (along with &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;, and the &lt;a href="https://plugins.getnikola.com/v8/orgmode/"&gt;org-mode plugin&lt;/a&gt;), but earlier this week I stumbled upon &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; and I thought maybe it'd be worth it to at least take a look. If the &lt;code&gt;readme&lt;/code&gt; file is to be believed, it does everything &lt;code&gt;ob-ipython&lt;/code&gt; does and more, so maybe my world would change once again. But then I ran into a little problem - trying to install it from &lt;a href="https://melpa.org/#/"&gt;MELPA&lt;/a&gt; caused emacs to crashâ¦ with no messages, nothing. So is this thing ready for the world to use yet?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8e4e67c" class="outline-2"&gt;
&lt;h2 id="org8e4e67c"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8e4e67c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org22df140" class="outline-3"&gt;
&lt;h3 id="org22df140"&gt;Finding the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org22df140"&gt;
&lt;p&gt;
I tried different things based on the errors in the emacs-jupyter's &lt;a href="https://github.com/dzop/emacs-jupyter/issues"&gt;"Issues"&lt;/a&gt; but it turned out that &lt;a href="https://github.com/dzop/emacs-zmq/issues/14"&gt;this emacs-zmq bug&lt;/a&gt; had the answer - the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs snapshot&lt;/a&gt; for Ubuntu wasn't built in a way that works with emacs-jupyter. The bug-report mentions an out of date gcc version, but I didn't confirm that.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org087a2ec" class="outline-3"&gt;
&lt;h3 id="org087a2ec"&gt;Fixing the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org087a2ec"&gt;
&lt;p&gt;
So, knowing that the version of emacs I was using was the problem I decided to build it myself. In the earlier days of Ubuntu this was something I did all the time, but it seems like it's been forever since I had to do this so I was a little worried that it might be a huge mess of Makefile debugging, but I found &lt;a href="https://www.emacswiki.org/emacs/EmacsSnapshotAndDebian"&gt;this page on the emacs wiki&lt;/a&gt; which made it pretty easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org87641b0" class="outline-4"&gt;
&lt;h4 id="org87641b0"&gt;First Clone the Repository&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org87641b0"&gt;
&lt;pre class="example" id="orgd4b2b30"&gt;
git clone --depth 1 git://git.sv.gnu.org/emacs.git
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; The &lt;code&gt;--depth 1&lt;/code&gt; option pulls only the most recent commit. This helps save on time, as the repository is huge.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge28225f" class="outline-4"&gt;
&lt;h4 id="orge28225f"&gt;Then Install the Dependencies&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge28225f"&gt;
&lt;pre class="example" id="org49ff521"&gt;
sudo apt-fast install autoconf automake libtool texinfo build-essential xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev libgif-dev libtiff-dev libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev libxml2-dev
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf360691" class="outline-4"&gt;
&lt;h4 id="orgf360691"&gt;Then Build It&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf360691"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; This is how I first did it and it doesn't work the way I wanted it to so see the next section for the one that did work.
&lt;/p&gt;

&lt;p&gt;
First do the autogen.
&lt;/p&gt;
&lt;pre class="example" id="org5b4d531"&gt;
cd emacs
./autogen.sh
&lt;/pre&gt;

&lt;p&gt;
Then I did the configure. I wanted to install it in my user directory so I passed in a prefix for the path I wanted. This takes about a half a munite.
&lt;/p&gt;

&lt;pre class="example" id="orgfe25723"&gt;
./configure --prefix=/home/athena/bin/emacs-jupyter/
&lt;/pre&gt;

&lt;p&gt;
And now to actually build it. The &lt;code&gt;make bootstrap&lt;/code&gt; took around 15 minutes for me.
&lt;/p&gt;

&lt;pre class="example" id="orgb2586fe"&gt;
make bootstrap
make install
&lt;/pre&gt;

&lt;p&gt;
And finally link to it in &lt;code&gt;/usr/local/bin&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class="example" id="org0d4c01e"&gt;
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
That bit about installing it in my home directory and linking it isn't necessary, but just a habit of mine, since I tend to forget how I installed things and having it set up this way makes me remember.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga040e27" class="outline-3"&gt;
&lt;h3 id="orga040e27"&gt;Fix the Other Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga040e27"&gt;
&lt;p&gt;
It turned out that the build went okay, and I could even install emacs-jupyter (yay), but when I tried to execute &lt;code&gt;M-x jupyter-run-repl&lt;/code&gt; I got an error message saying that modules weren't supported (what?). So then I found &lt;a href="http://diobla.info/blog-archive/modules-tut.html"&gt;this blog post&lt;/a&gt; that said you have to pass in the &lt;code&gt;--with-modules&lt;/code&gt; argument when you run &lt;code&gt;configure&lt;/code&gt;â¦ So now the process became this:
&lt;/p&gt;

&lt;pre class="example" id="org92f3e77"&gt;
cd emacs
./autogen.sh
./configure --prefix=/home/athena/bin/emacs-jupyter/ --with-modules
make bootstrap
make install
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
And what do you know, it worked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgce1605e" class="outline-3"&gt;
&lt;h3 id="orgce1605e"&gt;An Update That Broke It&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgce1605e"&gt;
&lt;p&gt;
At some point after I first wrote this I switched to using the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs-snapshot&lt;/a&gt; package, which worked for a while, but when I updated it on March 9, 2021, it caused emacs-jupyter to fail with a ZMQ error:
&lt;/p&gt;

&lt;pre class="example" id="org25cf326"&gt;
error in process filter: Error in ZMQ subprocess: error, ("Lisp nesting exceeds âmax-lisp-eval-depthâ")
&lt;/pre&gt;

&lt;p&gt;
I tried re-installing &lt;code&gt;emacs-jupyter&lt;/code&gt; and &lt;code&gt;emacs-zmq&lt;/code&gt; but that didn't help so I decided to find a version of emacs that was older, but they only had the most recent emacs-snapshot available for Ubuntu 20.10 so I decide to go back to building emacs myself.
&lt;/p&gt;

&lt;p&gt;
Since it was an update that caused it to break (which happened sometime between August of last year when the previous snapshot came out and March 9, when I updated) pulling just the most recent version wouldn't work for me, given that I needed to find code that predated the thing that broke it, so I pulled the whole history and the found the tag for the most recent release (&lt;code&gt;emacs-27.1-rc2&lt;/code&gt;) from last August and checked it out.
&lt;/p&gt;

&lt;pre class="example" id="org8ab16cd"&gt;
git checkout emacs-27.1-rc2
&lt;/pre&gt;

&lt;p&gt;
According to &lt;a href="https://stackoverflow.com/questions/20280726/how-to-git-clone-a-specific-tag"&gt;Stack Overflow&lt;/a&gt; you could also just checkout that one tag, but I didn't think to look until after I already cloned it. Also, I don't know how I would have gotten the tag without cloning it first. Must be out there somewhere.
&lt;/p&gt;

&lt;p&gt;
And then built it like I did in the previous section.
&lt;/p&gt;

&lt;p&gt;
Also, since I pulled an older version I had to re-compile the packages as mentioned on &lt;a href="https://stackoverflow.com/questions/24725778/how-to-rebuild-elpa-packages-after-upgrade-of-emacs"&gt;Stack Overflow&lt;/a&gt;. First &lt;code&gt;M-:&lt;/code&gt; then in the mini-buffer
&lt;/p&gt;

&lt;pre class="example" id="orgf49d11a"&gt;
(byte-recompile-directory package-user-dir nil 'force)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org61ad6a5" class="outline-2"&gt;
&lt;h2 id="org61ad6a5"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org61ad6a5"&gt;
&lt;p&gt;
&lt;code&gt;emacs-jupyter&lt;/code&gt; looks like an improvement over &lt;code&gt;ob-ipython&lt;/code&gt; in that it adds a lot of features (and claims to be faster), but getting it to work was way harder than I'm used to. I don't think it was "difficult" in a real sense, given what it used to be like to make and install things on Ubuntu, but I think I've gotten used to things just working. Anyway, now I can see if emacs-jupyter lives up to its own hype.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;/b&gt; Since I first wrote this I've come to rely on &lt;code&gt;emacs-jupyter&lt;/code&gt; a lot, I don't take advantage of a lot of its features, but for executing python code in org-babel, it's everything that I need (so far).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>emacs-jupyter</category><guid>https://necromuralist.github.io/posts/emacs-jupyter/</guid><pubDate>Sat, 10 Aug 2019 22:13:27 GMT</pubDate></item><item><title>Opening Remote Files In Emacs Using SSH</title><link>https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#orgc0557d4"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#org69bcabf"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#orgbeee612"&gt;Editing a Remote User File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#org5fa2714"&gt;Editing a Remote File As Root&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#orgae14693"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc0557d4" class="outline-2"&gt;
&lt;h2 id="orgc0557d4"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc0557d4"&gt;
&lt;p&gt;
For some strange reason, &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;the emacs wiki page on tramp mode&lt;/a&gt; doesn't have instructions on how to open a file on a remote machine using tramp in its main section. You instead have to go down to the &lt;i&gt;Tips and Tricks&lt;/i&gt; and try and pick out a version that works. So I'm writing this here so I maybe won't have to do all the searching I did the next time. This is the version that worked for me (Emacs 27.0.50, Ubuntu 19.04).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org69bcabf" class="outline-2"&gt;
&lt;h2 id="org69bcabf"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org69bcabf"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbeee612" class="outline-3"&gt;
&lt;h3 id="orgbeee612"&gt;Editing a Remote User File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbeee612"&gt;
&lt;p&gt;
You start by opening the file like you would a local file (&lt;code&gt;C-x C-f&lt;/code&gt;) and then in when the minibuffer opens up you use this syntax for the path:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:&amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt;&amp;gt;:&amp;lt;path to file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So, for example, I have an SSH alias to &lt;code&gt;hades@erebus&lt;/code&gt; named &lt;code&gt;Hades&lt;/code&gt; and if I wanted to edit the emacs init file on that machine I would use this:
&lt;/p&gt;

&lt;pre class="example" id="org487c431"&gt;
/ssh:Hades:.emacs.d/init.el
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5fa2714" class="outline-3"&gt;
&lt;h3 id="org5fa2714"&gt;Editing a Remote File As Root&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5fa2714"&gt;
&lt;p&gt;
To open a file as root you stick an extra pipe (&lt;code&gt;|sudo&lt;/code&gt;) into the previous path syntax.
&lt;/p&gt;

&lt;pre class="example" id="org0059c25"&gt;
/ssh:&amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt;|sudo:&amp;lt;hostname&amp;gt;:&amp;lt;path to file&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
This syntax doesn't work with SSH aliases (or didn't seem to when I tried), so editing the &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; file the same machine as before would use this:
&lt;/p&gt;

&lt;pre class="example" id="orgff6bf93"&gt;
/ssh:hades@erebus|sudo:erebus:/etc/apt/sources.list
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgae14693" class="outline-2"&gt;
&lt;h2 id="orgae14693"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgae14693"&gt;
&lt;p&gt;
I got the &lt;code&gt;sudo&lt;/code&gt; version from &lt;a href="https://stackoverflow.com/questions/20624024/what-is-the-best-way-to-open-remote-files-with-emacs-and-ssh"&gt;Stack Overflow&lt;/a&gt; (of course).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>how-to</category><category>ssh</category><guid>https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/</guid><pubDate>Sat, 27 Jul 2019 19:58:44 GMT</pubDate></item><item><title>Remote jupyter Sessions With ob-ipython</title><link>https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org1879947"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org77ff925"&gt;The Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org5e49152"&gt;Setting up the Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#orgbc74d7f"&gt;A Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org7353522"&gt;One More Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1879947" class="outline-2"&gt;
&lt;h2 id="org1879947"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1879947"&gt;
&lt;p&gt;
These are my notes about trying to use a remote jupyter session in org-mode (with ob-ipython). My main source was &lt;a href="https://vxlabs.com/2017/11/30/run-code-on-remote-ipython-kernels-with-emacs-and-orgmode/"&gt;this blog post&lt;/a&gt; from vxlabs, and also the &lt;a href="https://github.com/ipython/ipython/wiki/Cookbook:-Connecting-to-a-remote-kernel-via-ssh"&gt;ipython&lt;/a&gt; instructions for setting up a remote-session. I also referred to the &lt;a href="https://github.com/gregsexton/ob-ipython#working-with-a-remote-session"&gt;ob-ipython notes&lt;/a&gt; on setting up a remote session, although I didn't really understand everything it said until after I had done it once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org77ff925" class="outline-2"&gt;
&lt;h2 id="org77ff925"&gt;The Layout&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org77ff925"&gt;
&lt;p&gt;
Both this post and the jupyter server are running on my desktop (Hades) while I'm editing them in emacs on my laptop.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5e49152" class="outline-2"&gt;
&lt;h2 id="org5e49152"&gt;Setting up the Session&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5e49152"&gt;
&lt;p&gt;
The steps are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Find out where the JSON file you will need is going to be put on the server&lt;/li&gt;
&lt;li&gt;Start the server&lt;/li&gt;
&lt;li&gt;Copy the json file that was created to your client&lt;/li&gt;
&lt;li&gt;Start an ipython session to connect to the remote session&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2a9af37" class="outline-3"&gt;
&lt;h3 id="org2a9af37"&gt;Find Out Where the JSON File Will Be&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2a9af37"&gt;
&lt;p&gt;
While ssh'd into the server (and with the appropriate virtual environment running if you need it), enter the command to show the folder where the JSON file will be.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --runtime-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In my case this is what came out.
&lt;/p&gt;

&lt;pre class="example" id="org9e28536"&gt;
/run/user/1000/jupyter
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9dcd1f8" class="outline-3"&gt;
&lt;h3 id="org9dcd1f8"&gt;Start the Server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9dcd1f8"&gt;
&lt;p&gt;
Change into the directory where you want the jupyter server to run and start the ipython kernel.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython kernel
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is what came out for me.
&lt;/p&gt;

&lt;pre class="example" id="org8059e2e"&gt;
NOTE: When using the `ipython kernel` entry point, Ctrl-C will not work.

To exit, you will have to explicitly quit this process, by either sending
"quit" from a client, or using Ctrl-\ in UNIX-like environments.

To read more about this, see https://github.com/ipython/ipython/issues/2049


To connect another client to this kernel, use:
    --existing kernel-10181.json

&lt;/pre&gt;
&lt;p&gt;
That last line refers to the JSON file that we're going to need on the client side (&lt;code&gt;kernel-10181.json&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgea73129" class="outline-3"&gt;
&lt;h3 id="orgea73129"&gt;Copy the File From the Server To the Client&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgea73129"&gt;
&lt;p&gt;
Go back to your client (my laptop in this case) and check where your jupyter installation is.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --runtime-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example" id="org9018a1c"&gt;
/run/user/1000/jupyter
&lt;/pre&gt;

&lt;p&gt;
Both my laptop and desktop had the same location, so it's probably the default. Now change into that directory on the client and copy the file from the server.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /run/user/1000/jupyter
scp Hades:/run/user/1000/jupyter/kernel-10181.json .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0e2c5cf" class="outline-3"&gt;
&lt;h3 id="org0e2c5cf"&gt;Start the Client&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0e2c5cf"&gt;
&lt;p&gt;
You can run this next command anywhere on the client where you can run jupyter.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter console --existing kernel-10181.json --ssh Hades
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Where &lt;code&gt;kernel-10181.json&lt;/code&gt; is the files copied from the server and &lt;code&gt;Hades&lt;/code&gt; is the ssh alias for my server (so it would be &lt;code&gt;hades@erebus&lt;/code&gt; without the alias).
&lt;/p&gt;

&lt;p&gt;
When you run this command it will open up an ipython prompt that will be connected to the server. This turns out to be more useful than I thought it would be because the prompt that ob-ipython normally opens seems to be broken when I'm connected to the remote client. Maybe there's something else to configure. Anyway, whatever you add to your emacs ob-ipython namespace will be accessible to you in the ipython prompt so you can fiddle with things live in there.
&lt;/p&gt;

&lt;p&gt;
Once you open this it will add another file (&lt;code&gt;kernel-10181-ssh.json&lt;/code&gt; in this case) that you can use to connect if you want to open up more than ipython prompt for some reason:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter console --existing kernel-10181-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You don't pass in the &lt;code&gt;--ssh&lt;/code&gt; flag this time. Note that you're still sharing the same jupyter session so all the variables and stuff will show up in the second console as well.
&lt;/p&gt;

&lt;p&gt;
But, more importantly, this second json file is how we can connect while in emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org823b6f1" class="outline-3"&gt;
&lt;h3 id="org823b6f1"&gt;Use The Session&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org823b6f1"&gt;
&lt;p&gt;
To make use of the session you need to pass in the name of the ssh kernel file as the name of the ipython session.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none

#+END_SRC
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Anything you do in a block with that session ID will send the commands to the remote server to be interpreted.
&lt;/p&gt;

&lt;p&gt;
To clarify:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;kernel-10181.json&lt;/code&gt; is the file you copy over from the server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kernel-10181-ssh.json&lt;/code&gt; is created on your client and is what you use in the org-babel header&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbc74d7f" class="outline-2"&gt;
&lt;h2 id="orgbc74d7f"&gt;A Plot&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc74d7f"&gt;
&lt;p&gt;
I'm going to use this example from the &lt;a href="https://seaborn.pydata.org/examples/structured_heatmap.html"&gt;seaborn gallery&lt;/a&gt; to test out the setup. It might not be obvious from the post itself but the web-server for this post is also on my remote machine so I can tell if it worked by checking the page in a browser (because if it was using an ipython session on my laptop the page wouldn't get the image).
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org23dc837" class="outline-3"&gt;
&lt;h3 id="org23dc837"&gt;Imports From PyPi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org23dc837"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import pandas
import seaborn
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0c77e26" class="outline-3"&gt;
&lt;h3 id="org0c77e26"&gt;Plotting Setup&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0c77e26"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%matplotlib inline
seaborn.set(style="whitegrid",
	    rc={"axes.grid": False,
		"font.family": ["sans-serif"],
		"font.sans-serif": ["Latin Modern Sans", "Lato"],
		"figure.figsize": (13, 13)},
	    font_scale=1)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Load the brain networks example dataset
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = seaborn.load_dataset("brain_networks", header=[0, 1, 2], index_col=0)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Select a subset of the networks.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;used_networks = [1, 5, 6, 7, 8, 12, 13, 17]
used_columns = (data.columns.get_level_values("network")
		.astype(int)
		.isin(used_networks))
data = data.loc[:, used_columns]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Create a categorical palette to identify the networks.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network_palette = seaborn.husl_palette(8, s=.45)
# I have no idea what the network_lut is.
network_lut = dict(zip(map(str, used_networks), network_palette))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Convert the palette to vectors that will be drawn on the side of the matrix.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;networks = data.columns.get_level_values("network")
network_colors = pandas.Series(networks, index=data.columns).map(network_lut)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Plot.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cluster = seaborn.clustermap(data.corr(), center=0, cmap="vlag",
			     row_colors=network_colors,
			     col_colors=network_colors,
			     linewidths=.75)
title = cluster.fig.suptitle("Brain Networks")
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/cluster_map.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Besides the ipython shell not working in emacs I also couldn't get it to render images directly in emacs, but they did render on the remote side so I could see the plot in my web-browser.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7353522" class="outline-2"&gt;
&lt;h2 id="org7353522"&gt;One More Thing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7353522"&gt;
&lt;p&gt;
I stumbled over this a couple of times so I thought I should mention that the virtualenv you activate in emacs has to be on your client (the laptop in my case), so to make it easier you should set it before opening the remote document via tramp. If you try to activate the virtualenv while in tramp it will attempt to use the remote machine's (server's) virtualenv. You can see that it's the case in the mini-buffer, but I think being prompted like that made me pick the wrong side. Use the virtualenv on the machine you're working on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>org-mode</category><category>programming</category><category>python</category><guid>https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/</guid><pubDate>Fri, 23 Nov 2018 20:24:49 GMT</pubDate></item><item><title>Disabling Sub-scripting in Org-Mode</title><link>https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/#orge93706a"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/#orgb136f6d"&gt;Stack Overflow to the Rescue (Again)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/#org6cf7cbd"&gt;A Final Note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge93706a" class="outline-2"&gt;
&lt;h2 id="orge93706a"&gt;The Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge93706a"&gt;
&lt;p&gt;
If you use underscores in org-mode it will treat them almost the way &lt;a href="https://en.wikipedia.org/wiki/LaTeX#Versions"&gt;latex&lt;/a&gt; does, changing the text that immediately follows the underscore as a sub-string.
&lt;/p&gt;

&lt;p&gt;
This:
&lt;/p&gt;

&lt;pre class="example" id="orge1f3163"&gt;
before-the-underscore_aftertheunderscore
&lt;/pre&gt;

&lt;p&gt;
Is rendered as this:
&lt;/p&gt;

&lt;p&gt;
before-the-underscore&lt;sub&gt;aftertheunderscore&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
But sometimes you just want an underscore (especially if you are writing about python code).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb136f6d" class="outline-2"&gt;
&lt;h2 id="orgb136f6d"&gt;Stack Overflow to the Rescue (Again)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb136f6d"&gt;
&lt;p&gt;
I found the answer &lt;a href="https://stackoverflow.com/questions/698562/disabling-underscore-to-subscript-in-emacs-org-mode-export"&gt;on Stack Overflow&lt;/a&gt; (of course) - you can add an &lt;code&gt;#+OPTIONS&lt;/code&gt; directive to the file to disable this behavior. I originally went with the accepted answer which was to add &lt;code&gt;#+OPTIONS: ^:nil&lt;/code&gt;, and it works in most cases, but then I couldn't figure out how to write this post, since the underscores stopped working and I didn't want to have to use MathJax to show what I meant (although maybe that wouldn't be so bad), so now I think the better answer is the one given by &lt;a href="https://stackoverflow.com/users/60183/danielpoe"&gt;danielpoe&lt;/a&gt; in the comments - use &lt;code&gt;#+OPTIONS: ^:{}&lt;/code&gt; instead. This disables the sub-scripting behavior of the underscore in most cases but allows you to add sub-scripting by putting the text following the underscore in curly-braces.
&lt;/p&gt;

&lt;p&gt;
I wrote the example above, for instance, like this:
&lt;/p&gt;

&lt;pre class="example" id="orgb232f91"&gt;
before-the-underscore_{aftertheunderscore}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6cf7cbd" class="outline-2"&gt;
&lt;h2 id="org6cf7cbd"&gt;A Final Note&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6cf7cbd"&gt;
&lt;p&gt;
This solution doesn't replicate the original org-mode behavior completely when you use the curly-braces. Without the directive if you have multiple underscores org-mode puts everything after the first underscore in the sub-string and removes all subsequent underscores, smashing the words together.
&lt;/p&gt;

&lt;p&gt;
When I wrote this:
&lt;/p&gt;

&lt;pre class="example" id="orged238e6"&gt;
before-the-underscore_after_the_under_score
&lt;/pre&gt;

&lt;p&gt;
It came out as this:
&lt;/p&gt;

&lt;p&gt;
before-the-underscore&lt;sub&gt;aftertheunderscore&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
But the curly-braces keeps them:
&lt;/p&gt;

&lt;p&gt;
before-the-underscore&lt;sub&gt;after_the_under_score&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
Which seems like an improvement anyway. 
&lt;/p&gt;

&lt;p&gt;
The only problem now is that I keep forgetting what to type in every time I want to use an underscore, which is why I'm making this post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>how-to</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/</guid><pubDate>Fri, 03 Aug 2018 15:12:01 GMT</pubDate></item><item><title>Org-Babel Ipython and Elpy Conflict</title><link>https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#org12fc4b0"&gt;Short-take&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#orgce25c1c"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#org031455f"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#org246c407"&gt;The Fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#org69c424a"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org12fc4b0" class="outline-2"&gt;
&lt;h2 id="org12fc4b0"&gt;Short-take&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org12fc4b0"&gt;
&lt;p&gt;
If you use &lt;a href="https://elpy.readthedocs.io/en/latest/"&gt;elpy&lt;/a&gt; and &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; together and use the &lt;code&gt;jupyter&lt;/code&gt; option when configuring the &lt;code&gt;elpy&lt;/code&gt; interpreter settings it will break the execution of &lt;code&gt;ob-ipython&lt;/code&gt; code blocks, so use the &lt;code&gt;ipython&lt;/code&gt; version instead. In other words use this in your &lt;code&gt;init.el&lt;/code&gt; file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;python-shell-interpreter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ipython"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;python-shell-interpreter-args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-i --simple-prompt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgce25c1c" class="outline-2"&gt;
&lt;h2 id="orgce25c1c"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgce25c1c"&gt;
&lt;p&gt;
I've become quite reliant on &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; for emacs (it lets you use ipython with org-babel to create literate programming documents). I used to use &lt;a href="http://mpastell.com/pweave/"&gt;pweave&lt;/a&gt;, and if I weren't an emacs user I probably would still use it, and of course there's &lt;a href="http://jupyter.org"&gt;jupyter notebooks&lt;/a&gt;, and the attendant &lt;a href="https://github.com/millejoh/emacs-ipython-notebook"&gt;emacs-ipython-notebook&lt;/a&gt; that I've used as well (and sometimes still use - as when I need to hand in a Coursera assignment, for instance), but org-mode and ipython seems to hit the sweet spot for me (at least this week).
&lt;/p&gt;

&lt;p&gt;
So I was more than a little disturbed when I tried to execute a code block on my new laptop and found that nothing would run. This is a description of what happened and the fix, in case I forget the next time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org031455f" class="outline-2"&gt;
&lt;h2 id="org031455f"&gt;The Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org031455f"&gt;
&lt;p&gt;
I tried executing some python code in an ipython code block but I kept getting an error. This is a toy example of what an ob-ipython block looks like:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session test :results output
print("tester")
#+END_SRC
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To execute it you'd put your cursor somewhere in the block and enter &lt;code&gt;Control-c Control-c&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
This is the error I was getting:
&lt;/p&gt;

&lt;pre class="example" id="org66b68ed"&gt;
There was a fatal error trying to process the request. See *ob-ipython-debug*
&lt;/pre&gt;

&lt;p&gt;
And in the &lt;code&gt;*ob-ipython-debug*&lt;/code&gt; buffer would be this:
&lt;/p&gt;

&lt;pre class="example" id="org1bfbb75"&gt;
Error executing Jupyter command '/home/dogen/.emacs.d/elpa/ob-ipython-20180113.929/client.py': [Errno 2] No such file or directory
&lt;/pre&gt;

&lt;p&gt;
I tried googling for the error, which brought up some Jupyter questions on Stack Overflow that didn't seem relevant. There were also some &lt;i&gt;issues&lt;/i&gt; on the &lt;code&gt;ob-ipython&lt;/code&gt; github site, but none of them looked exactly the same. They seemed to suggest that the wrong python interpreter was being used, but when I brought up the interpreter in emacs (&lt;code&gt;C-c C-v C-z&lt;/code&gt;) it showed the correct interpreter version and I could import the &lt;code&gt;jupyter&lt;/code&gt; moduleâ¦ but since that was what people said was the problem and I was using a virtualenv I decided to try setting up &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;, which apparently lets you switch between python versions fairly easily.
&lt;/p&gt;

&lt;p&gt;
So, I jumped on my desktop to test it out (I ran into the org-mode problem on my laptop, but I was home so I figured I'd switch), but first I brought up emacs and tried executing the same code-block that failed on my laptop, and of course it ran perfectly. So then I went into a long death-spiral of trying to download the ob-ipython git repository and going back in the git-history to see if I could find the place where it might work (my desktop version of ob-ipython was from October of 2017, my laptop's version is from January 2018), and of course none of them worked. Then I tried copying my &lt;code&gt;init.el&lt;/code&gt; file from my desktop to my laptop, and suddenly things worked - so it was a configuration problem, but what was it?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org246c407" class="outline-2"&gt;
&lt;h2 id="org246c407"&gt;The Fix&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org246c407"&gt;
&lt;p&gt;
If you go to the &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;elpy&lt;/a&gt; documentation  (elpy is a mode for emacs that makes editing python much easier), there is a &lt;a href="https://elpy.readthedocs.io/en/latest/ide.html#interactive-python"&gt;section on setting up which interpreter to use&lt;/a&gt; - and if you're wondering why I'm suddenly talking about &lt;code&gt;elpy&lt;/code&gt; instead of &lt;code&gt;ob-ipython&lt;/code&gt;, well, it's because it was the problem (or at least using them together was the problem).
&lt;/p&gt;

&lt;p&gt;
The documentation gives you three options for setting the interpreter - python, ipython, or jupyter. This is what my laptop had:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;python-shell-interpreter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"jupyter"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;python-shell-interpreter-args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"console --simple-prompt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is what my desktop had:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;python-shell-interpreter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ipython"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;python-shell-interpreter-args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-i --simple-prompt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I don't know why I configured them differently, but I tried using the &lt;code&gt;ipython&lt;/code&gt; setting instead of the &lt;code&gt;jupyter&lt;/code&gt; setting and all of a sudden - it worked. Maybe I've now broken something else, but it's fixed for now.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session test :results output
print("tester")
#+END_SRC

#+RESULTS:
: tester
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org69c424a" class="outline-2"&gt;
&lt;h2 id="org69c424a"&gt;Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org69c424a"&gt;
&lt;p&gt;
This documents a problem that I ran into wherein the &lt;code&gt;elpy&lt;/code&gt; settings I used broke the execution of code blocks by &lt;code&gt;ob-ipython&lt;/code&gt; . Just remember to use &lt;code&gt;ipython&lt;/code&gt; instead of &lt;code&gt;jupyter&lt;/code&gt; and it should be okay. Another day of my life lost to troubleshooting (well, not a &lt;i&gt;whole&lt;/i&gt; day, but too much).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>elpy</category><category>emacs</category><category>org-mode</category><category>python</category><guid>https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/</guid><pubDate>Fri, 16 Feb 2018 23:50:23 GMT</pubDate></item><item><title>Shell Output With Org-Babel Ipython</title><link>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;One of the nice things about ipython is the ability to run shell commands with &lt;code class="docutils literal"&gt;!&lt;/code&gt;. When you use it in an &lt;a class="reference external" href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; block, though, it will dump the output into a popup rather than in the same emacs org-file. One alternative is to use a shell block instead. I wrote earlier that this requires you to put an echo command in the block to prevent the text going to a pop-up.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-1" name="rest_code_1b4968768836474094614e7d6e39ae35-1" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-2" name="rest_code_1b4968768836474094614e7d6e39ae35-2" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-2"&gt;&lt;/a&gt;head&lt;span class="w"&gt; &lt;/span&gt;Future_Connections.csv
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-3" name="rest_code_1b4968768836474094614e7d6e39ae35-3" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-4" name="rest_code_1b4968768836474094614e7d6e39ae35-4" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-5" name="rest_code_1b4968768836474094614e7d6e39ae35-5" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-6" name="rest_code_1b4968768836474094614e7d6e39ae35-6" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-7" name="rest_code_1b4968768836474094614e7d6e39ae35-7" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Future&lt;span class="w"&gt; &lt;/span&gt;Connection&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-8" name="rest_code_1b4968768836474094614e7d6e39ae35-8" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;840&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-9" name="rest_code_1b4968768836474094614e7d6e39ae35-9" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;197&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-10" name="rest_code_1b4968768836474094614e7d6e39ae35-10" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;979&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-11" name="rest_code_1b4968768836474094614e7d6e39ae35-11" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;519&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;872&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-12" name="rest_code_1b4968768836474094614e7d6e39ae35-12" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;382&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;423&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-13" name="rest_code_1b4968768836474094614e7d6e39ae35-13" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;226&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-14" name="rest_code_1b4968768836474094614e7d6e39ae35-14" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;349&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;905&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-15" name="rest_code_1b4968768836474094614e7d6e39ae35-15" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;429&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;860&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_1b4968768836474094614e7d6e39ae35-16" name="rest_code_1b4968768836474094614e7d6e39ae35-16" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_1b4968768836474094614e7d6e39ae35-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;309&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;989&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turns out that there's a similar solution to the ob-ipython popup, only since it's in python you have to use a print this time.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-1" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-1" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC ipython :session futures :results output&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-2" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-2" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;Future_Connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-3" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-3" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-4" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-4" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-5" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-5" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-6" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-6" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-7" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-7" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+begin_example&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-8" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-8" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-9" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-9" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(6, 840)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-10" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-10" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(4, 197)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-11" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-11" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(620, 979)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-12" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-12" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(519, 872)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-13" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-13" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(382, 423)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-14" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-14" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(97, 226)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-15" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-15" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(349, 905)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-16" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-16" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(429, 860)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-17" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-17" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(309, 989)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-18" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-18" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-19" name="rest_code_b262ecc425674c1abd42bb6c9ee3e82e-19" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_b262ecc425674c1abd42bb6c9ee3e82e-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+end_example&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I actually prefer the shell version, and since this is org-babel it makes more sense to use it, but I forgot about it just now and it took me a little while to figure out how to get the ob-ipython block to work so &lt;strong&gt;*note to future self:&lt;/strong&gt; &lt;em&gt;This is how to make it work, but use a shell block instead.&lt;/em&gt;&lt;/p&gt;</description><category>emacs</category><category>org-mode</category><category>python</category><guid>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</guid><pubDate>Wed, 11 Oct 2017 19:49:19 GMT</pubDate></item></channel></rss>