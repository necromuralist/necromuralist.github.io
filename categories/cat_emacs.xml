<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about Emacs)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 18 May 2023 07:55:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Tangling Multiple Org Files</title><link>https://necromuralist.github.io/posts/tangling-multiple-org-files/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#orgc5a13c6"&gt;The Steps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org90471af"&gt;Create one.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org00e3a83"&gt;Create two.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org2d245df"&gt;Export one.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#orge562fb1"&gt;Tangle one.org.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org5ee95b9"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
I've been looking off and on for ways to combine separate code-blocks in org-mode into a single tangled file. I wanted to use it because I tangle code that I want to re-use out of posts but then if I want to break the posts up I need to create a separate file (tangle) for each post. I'm hopeful that this method will allow me to break up a tangle across multiple posts. I've only tried it on toy files but I want to get some initial documentation for it in place.
&lt;/p&gt;
&lt;div id="outline-container-orgc5a13c6" class="outline-2"&gt;
&lt;h2 id="orgc5a13c6"&gt;The Steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc5a13c6"&gt;
&lt;p&gt;
Let's say that there are two source org-files:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;one.org&lt;/code&gt;: contains the tangle block and a source block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;two.org&lt;/code&gt;: contains another block that we want to tangle with the one in &lt;code&gt;one.org&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The steps are:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Put an &lt;code&gt;#+INCLUDE&lt;/code&gt; directive to include &lt;code&gt;two.org&lt;/code&gt; into &lt;code&gt;one.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Export &lt;code&gt;one.org&lt;/code&gt; to an &lt;code&gt;org&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Open the exported org file (&lt;code&gt;one.org.org&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Tangle it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-org90471af" class="outline-3"&gt;
&lt;h3 id="org90471af"&gt;Create one.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org90471af"&gt;
&lt;p&gt;
The file &lt;code&gt;one.org&lt;/code&gt; is going to have the tangle and the first source-block:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src python :tangle ~/test.py :exports none
&amp;lt;&amp;lt;block-one&amp;gt;&amp;gt;

&amp;lt;&amp;lt;block-two&amp;gt;&amp;gt;
#+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src python :noweb-ref block-one
def one():
    print("One")
#+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We also need to include what's in the second file (&lt;code&gt;two.org&lt;/code&gt;). The code we want to include is in a section called &lt;code&gt;Two&lt;/code&gt; so we can include just that section by adding a search term at the end.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+INCLUDE: "./two.org::*Two"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00e3a83" class="outline-3"&gt;
&lt;h3 id="org00e3a83"&gt;Create two.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org00e3a83"&gt;
&lt;p&gt;
In the other file add the section header to match the &lt;code&gt;INCLUDE&lt;/code&gt; search term (&lt;code&gt;*Two&lt;/code&gt;) and put a code block with a reference named &lt;code&gt;block-two&lt;/code&gt; to match what's in the tangle block above.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* Two
#+begin_src python :noweb-ref block-two
def two():
print("Two")
#+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d245df" class="outline-3"&gt;
&lt;h3 id="org2d245df"&gt;Export one.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2d245df"&gt;
&lt;p&gt;
Tangling unfortunately ignores the &lt;code&gt;INCLUDE&lt;/code&gt; directive so we have to export it first to another org-file in order to get the text from &lt;code&gt;org.two&lt;/code&gt; into our source file. By default, exporting to &lt;code&gt;org&lt;/code&gt; is disabled so you need to enable it (e.g. starting with &lt;code&gt;M-x customize&lt;/code&gt; &lt;code&gt;org-export-backends&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Once it's enabled you can export &lt;code&gt;one.org&lt;/code&gt; to an org-mode file using &lt;code&gt;C-c C-e O v&lt;/code&gt; (the default name will be &lt;code&gt;one.org.org&lt;/code&gt;). 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge562fb1" class="outline-3"&gt;
&lt;h3 id="orge562fb1"&gt;Tangle one.org.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge562fb1"&gt;
&lt;p&gt;
The last choice when we exported the file in the previous step (&lt;code&gt;v&lt;/code&gt;) will save it to a file and open it up in an emacs buffer. When the buffer is open you can then tangle it (&lt;code&gt;C-c C-v C-t&lt;/code&gt;) and the output (&lt;code&gt;/test.py&lt;/code&gt; from our tangle block) should contain both of our functions.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5ee95b9" class="outline-2"&gt;
&lt;h2 id="org5ee95b9"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5ee95b9"&gt;
&lt;p&gt;
This is where I got the information on breaking up the files. It includes some emacs-lisp to run the steps automatically (although I didn't try it):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Multi-File Org-Babel Tangles with Include Directives [Internet]. DEV Community. [cited 2022 Mar 21]. Available from: &lt;a href="https://dev.to/jfhbrook/multi-file-org-babel-tangles-with-include-directives-5522"&gt;https://dev.to/jfhbrook/multi-file-org-babel-tangles-with-include-directives-5522&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is the post that mentions that exporting org-files to org-format needs to be enabled (and how to do it):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;exporting - Org mode export subtree to new org file - option missing? [Internet]. Emacs Stack Exchange. [cited 2022 Mar 21]. Available from: &lt;a href="https://emacs.stackexchange.com/a/70453"&gt;https://emacs.stackexchange.com/a/70453&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is the manual page explaining the search syntax (which is what the &lt;code&gt;#+INCLUDE&lt;/code&gt; format uses).
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Search Options (The Org Manual) [Internet]. [cited 2022 Mar 21]. Available from: &lt;a href="https://orgmode.org/manual/Search-Options.html"&gt;https://orgmode.org/manual/Search-Options.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This explains the &lt;code&gt;#+INCLUDE&lt;/code&gt; directive options:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Include Files (The Org Manual) [Internet]. [cited 2022 Mar 21]. Available from: &lt;a href="https://orgmode.org/manual/Include-Files.html"&gt;https://orgmode.org/manual/Include-Files.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>literate programming</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/tangling-multiple-org-files/</guid><pubDate>Tue, 22 Mar 2022 00:30:14 GMT</pubDate></item><item><title>Emacs Scrollbar Artifact on Kubuntu</title><link>https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#org7dd5f43"&gt;What's this then?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#orge7eae49"&gt;The Cause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#org4a5eafa"&gt;The Fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/#org8d08c14"&gt;The Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7dd5f43" class="outline-2"&gt;
&lt;h2 id="org7dd5f43"&gt;What's this then?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7dd5f43"&gt;
&lt;p&gt;
I switch back and forth between Kubuntu and Ubuntu (Ubuntu seems to work better, but I like the aesthetics of Kubuntu) and one of the problems I had was that when I launched emacs in Kubuntu it had a permanent scrollbar in the center of the window that blocked out whatever text was there.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/emacs-scrol-artifact.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
It's more of an annoyance than anything else but since it doesn't happen on Ubuntu I figured I'd try and fix it. It took me a couple of different searches to find the answer so I thought I'd document it in case I need to remember this later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge7eae49" class="outline-2"&gt;
&lt;h2 id="orge7eae49"&gt;The Cause&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge7eae49"&gt;
&lt;p&gt;
This is the desktop that's causing the problem:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/kubuntu-version.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
It turns out that it's because my monitors are of different resolutions and in order to be able to read anything on the higher-resolution monitor I had to set the display scale to 200%, but this causes a problem with the scaling of the widgets (at least that's what it said on the &lt;a href="https://www.reddit.com/r/emacs/comments/am64y8/bug_with_scrollbar_on_ubuntu_1804/"&gt;reddit&lt;/a&gt; post where I found the solution).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a5eafa" class="outline-2"&gt;
&lt;h2 id="org4a5eafa"&gt;The Fix&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4a5eafa"&gt;
&lt;p&gt;
The fix for me was to edit the &lt;code&gt;~/.local/share/applications/emacs.desktop&lt;/code&gt; file so that the EXEC line read:
&lt;/p&gt;

&lt;pre class="example" id="orgae1defd"&gt;
Exec= /usr/bin/env GDK_SCALE= emacs
&lt;/pre&gt;

&lt;p&gt;
Once this was in place the artifact went away.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/emacs-no-artifact.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8d08c14" class="outline-2"&gt;
&lt;h2 id="org8d08c14"&gt;The Source&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8d08c14"&gt;
&lt;p&gt;
I linked to it above, but this is the reddit post where I found the fix:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/am64y8/bug_with_scrollbar_on_ubuntu_1804/"&gt;https://www.reddit.com/r/emacs/comments/am64y8/bug_with_scrollbar_on_ubuntu_1804/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>how-to</category><category>kubuntu</category><guid>https://necromuralist.github.io/posts/emacs-artifact-on-kubuntu/</guid><pubDate>Sun, 03 Oct 2021 20:58:02 GMT</pubDate></item><item><title>Jupyter-Emacs Sessions with org-mode</title><link>https://necromuralist.github.io/posts/jupyter-emacs-sessions/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org0a93c14"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org7cf8ea2"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#orgb8080bd"&gt;Starting the Jupyter Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org46d9b7a"&gt;Start a Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#orga438600"&gt;Setting the Session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org16f9066"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0a93c14" class="outline-2"&gt;
&lt;h2 id="org0a93c14"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0a93c14"&gt;
&lt;p&gt;
These are my notes on using &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; using a remote session. It works with a local session as well, but I'll just relate the steps as if you're running the jupyter session on a remote machine.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7cf8ea2" class="outline-2"&gt;
&lt;h2 id="org7cf8ea2"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7cf8ea2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb8080bd" class="outline-3"&gt;
&lt;h3 id="orgb8080bd"&gt;Starting the Jupyter Server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb8080bd"&gt;
&lt;p&gt;
The first thing to do is start the jupyter session on the remote machine. Since I'm doing this with &lt;b&gt;nikola&lt;/b&gt; I should note that you want to start the session in the same location as the file you're editing in emacs, because all your file references will be based on that directory (so if you, for instance, create an image and want to place it in the &lt;code&gt;files&lt;/code&gt; folder, you will need to note where that stands relative to the file you are editing and where you start the jupyter kernel).
&lt;/p&gt;

&lt;p&gt;
In my case I'm editing a file in &lt;code&gt;~/projects/In-Too-Deep/posts/fastai/&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/projects/In-Too-Deep/posts/fastai/
jupyter kernel
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will start the kernel and show you the file that you need to copy to your local machine (where you are running emacs). Here's an example output of that command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(In-Too-Deep) hades@erebus ~/p/I/p/fastai (fastai-restart| Dirty:4)&amp;gt; jupyter kernel
[KernelApp] Starting kernel 'python3'
[KernelApp] Connection file: /home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json
[KernelApp] To connect a client: --existing kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The important thing to note is the line with &lt;code&gt;Connection file&lt;/code&gt; (&lt;code&gt;[KernelApp] Connection file: /home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json&lt;/code&gt;). You will need to copy that file to the machine that you are running emacs on. Where do you put it? Check your jupyter location on your local machine (where you're running emacs, not where you're running jupyter).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --runtime-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Change into whatever directory is output by that command and then copy the json file from the machine with the running jupyter kernel onto your local machine.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/.local/share/jupyter/runtime
scp Hades:/home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org46d9b7a" class="outline-3"&gt;
&lt;h3 id="org46d9b7a"&gt;Start a Console&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org46d9b7a"&gt;
&lt;p&gt;
Now that you've copied over the information for the jupyter session you can start a console for it. I'll assume you're still in the directory with the json file in it, so I won't pass in the full path.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --console kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json --ssh Hades
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note the second argument where I passed in the SSH alias for my remote machine. If you don't have an alias set up then replace it with something that looks like &lt;code&gt;&amp;lt;username&amp;gt;@&amp;lt;IP Address&amp;gt;&lt;/code&gt; (this assumes, of course, that the machine with the jupyter session running on it also has an SSH server running). This command sets up our session to forward our jupyter commands to the remote machine. When you execute this command it should tell you that you can connect to the kernel using a slightly modified JSON file name:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ZMQTerminalIPythonApp] Forwarding connections to 127.0.0.1 via Hades
[ZMQTerminalIPythonApp] To connect another client via this tunnel, use:
[ZMQTerminalIPythonApp] --existing kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that &lt;code&gt;--existing&lt;/code&gt; argument for the next session (it should be the same as the original json file but with &lt;code&gt;-ssh&lt;/code&gt; added to the end of the name).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga438600" class="outline-3"&gt;
&lt;h3 id="orga438600"&gt;Setting the Session&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga438600"&gt;
&lt;p&gt;
Since this is org-mode-based the first thing you should do is connect your emacs buffer to the console. Add this to the top of your buffer (the file where you intend to run python).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+PROPERTY: header-args :session /home/athena/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you have this in your file when you open it you don't need to do anything special, but otherwise C-c C-c on it to load the session. What this does is allow subsequent python org-mode blocks to use the remote jupyter session when you execute them, without needing to specify a session.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org16f9066" class="outline-2"&gt;
&lt;h2 id="org16f9066"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org16f9066"&gt;
&lt;p&gt;
At this point you can run org-mode code blocs that are set up to use &lt;code&gt;emacs-jupyter&lt;/code&gt; and they will redirect to the remote jupyter session. That is a whole other adventure so I'll leave it for another time (or to someone else).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>python</category><guid>https://necromuralist.github.io/posts/jupyter-emacs-sessions/</guid><pubDate>Sat, 09 May 2020 22:36:05 GMT</pubDate></item><item><title>emacs-jupyter</title><link>https://necromuralist.github.io/posts/emacs-jupyter/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgfe19da2"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org8e4e67c"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org22df140"&gt;Finding the Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org087a2ec"&gt;Fixing the Problem&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org87641b0"&gt;First Clone the Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orge28225f"&gt;Then Install the Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgf360691"&gt;Then Build It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orga040e27"&gt;Fix the Other Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgce1605e"&gt;An Update That Broke It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org61ad6a5"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfe19da2" class="outline-2"&gt;
&lt;h2 id="orgfe19da2"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfe19da2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; has become one of the most important tools in my workflow (along with &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;, and the &lt;a href="https://plugins.getnikola.com/v8/orgmode/"&gt;org-mode plugin&lt;/a&gt;), but earlier this week I stumbled upon &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; and I thought maybe it'd be worth it to at least take a look. If the &lt;code&gt;readme&lt;/code&gt; file is to be believed, it does everything &lt;code&gt;ob-ipython&lt;/code&gt; does and more, so maybe my world would change once again. But then I ran into a little problem - trying to install it from &lt;a href="https://melpa.org/#/"&gt;MELPA&lt;/a&gt; caused emacs to crashâ¦ with no messages, nothing. So is this thing ready for the world to use yet?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8e4e67c" class="outline-2"&gt;
&lt;h2 id="org8e4e67c"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8e4e67c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org22df140" class="outline-3"&gt;
&lt;h3 id="org22df140"&gt;Finding the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org22df140"&gt;
&lt;p&gt;
I tried different things based on the errors in the emacs-jupyter's &lt;a href="https://github.com/dzop/emacs-jupyter/issues"&gt;"Issues"&lt;/a&gt; but it turned out that &lt;a href="https://github.com/dzop/emacs-zmq/issues/14"&gt;this emacs-zmq bug&lt;/a&gt; had the answer - the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs snapshot&lt;/a&gt; for Ubuntu wasn't built in a way that works with emacs-jupyter. The bug-report mentions an out of date gcc version, but I didn't confirm that.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org087a2ec" class="outline-3"&gt;
&lt;h3 id="org087a2ec"&gt;Fixing the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org087a2ec"&gt;
&lt;p&gt;
So, knowing that the version of emacs I was using was the problem I decided to build it myself. In the earlier days of Ubuntu this was something I did all the time, but it seems like it's been forever since I had to do this so I was a little worried that it might be a huge mess of Makefile debugging, but I found &lt;a href="https://www.emacswiki.org/emacs/EmacsSnapshotAndDebian"&gt;this page on the emacs wiki&lt;/a&gt; which made it pretty easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org87641b0" class="outline-4"&gt;
&lt;h4 id="org87641b0"&gt;First Clone the Repository&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org87641b0"&gt;
&lt;pre class="example" id="orgd4b2b30"&gt;
git clone --depth 1 git://git.sv.gnu.org/emacs.git
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; The &lt;code&gt;--depth 1&lt;/code&gt; option pulls only the most recent commit. This helps save on time, as the repository is huge.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge28225f" class="outline-4"&gt;
&lt;h4 id="orge28225f"&gt;Then Install the Dependencies&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge28225f"&gt;
&lt;pre class="example" id="org49ff521"&gt;
sudo apt-fast install autoconf automake libtool texinfo build-essential xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev libgif-dev libtiff-dev libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev libxml2-dev
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf360691" class="outline-4"&gt;
&lt;h4 id="orgf360691"&gt;Then Build It&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf360691"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; This is how I first did it and it doesn't work the way I wanted it to so see the next section for the one that did work.
&lt;/p&gt;

&lt;p&gt;
First do the autogen.
&lt;/p&gt;
&lt;pre class="example" id="org5b4d531"&gt;
cd emacs
./autogen.sh
&lt;/pre&gt;

&lt;p&gt;
Then I did the configure. I wanted to install it in my user directory so I passed in a prefix for the path I wanted. This takes about a half a munite.
&lt;/p&gt;

&lt;pre class="example" id="orgfe25723"&gt;
./configure --prefix=/home/athena/bin/emacs-jupyter/
&lt;/pre&gt;

&lt;p&gt;
And now to actually build it. The &lt;code&gt;make bootstrap&lt;/code&gt; took around 15 minutes for me.
&lt;/p&gt;

&lt;pre class="example" id="orgb2586fe"&gt;
make bootstrap
make install
&lt;/pre&gt;

&lt;p&gt;
And finally link to it in &lt;code&gt;/usr/local/bin&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class="example" id="org0d4c01e"&gt;
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
That bit about installing it in my home directory and linking it isn't necessary, but just a habit of mine, since I tend to forget how I installed things and having it set up this way makes me remember.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga040e27" class="outline-3"&gt;
&lt;h3 id="orga040e27"&gt;Fix the Other Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga040e27"&gt;
&lt;p&gt;
It turned out that the build went okay, and I could even install emacs-jupyter (yay), but when I tried to execute &lt;code&gt;M-x jupyter-run-repl&lt;/code&gt; I got an error message saying that modules weren't supported (what?). So then I found &lt;a href="http://diobla.info/blog-archive/modules-tut.html"&gt;this blog post&lt;/a&gt; that said you have to pass in the &lt;code&gt;--with-modules&lt;/code&gt; argument when you run &lt;code&gt;configure&lt;/code&gt;â¦ So now the process became this:
&lt;/p&gt;

&lt;pre class="example" id="org92f3e77"&gt;
cd emacs
./autogen.sh
./configure --prefix=/home/athena/bin/emacs-jupyter/ --with-modules
make bootstrap
make install
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
And what do you know, it worked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgce1605e" class="outline-3"&gt;
&lt;h3 id="orgce1605e"&gt;An Update That Broke It&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgce1605e"&gt;
&lt;p&gt;
At some point after I first wrote this I switched to using the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs-snapshot&lt;/a&gt; package, which worked for a while, but when I updated it on March 9, 2021, it caused emacs-jupyter to fail with a ZMQ error:
&lt;/p&gt;

&lt;pre class="example" id="org25cf326"&gt;
error in process filter: Error in ZMQ subprocess: error, ("Lisp nesting exceeds âmax-lisp-eval-depthâ")
&lt;/pre&gt;

&lt;p&gt;
I tried re-installing &lt;code&gt;emacs-jupyter&lt;/code&gt; and &lt;code&gt;emacs-zmq&lt;/code&gt; but that didn't help so I decided to find a version of emacs that was older, but they only had the most recent emacs-snapshot available for Ubuntu 20.10 so I decide to go back to building emacs myself.
&lt;/p&gt;

&lt;p&gt;
Since it was an update that caused it to break (which happened sometime between August of last year when the previous snapshot came out and March 9, when I updated) pulling just the most recent version wouldn't work for me, given that I needed to find code that predated the thing that broke it, so I pulled the whole history and the found the tag for the most recent release (&lt;code&gt;emacs-27.1-rc2&lt;/code&gt;) from last August and checked it out.
&lt;/p&gt;

&lt;pre class="example" id="org8ab16cd"&gt;
git checkout emacs-27.1-rc2
&lt;/pre&gt;

&lt;p&gt;
According to &lt;a href="https://stackoverflow.com/questions/20280726/how-to-git-clone-a-specific-tag"&gt;Stack Overflow&lt;/a&gt; you could also just checkout that one tag, but I didn't think to look until after I already cloned it. Also, I don't know how I would have gotten the tag without cloning it first. Must be out there somewhere.
&lt;/p&gt;

&lt;p&gt;
And then built it like I did in the previous section.
&lt;/p&gt;

&lt;p&gt;
Also, since I pulled an older version I had to re-compile the packages as mentioned on &lt;a href="https://stackoverflow.com/questions/24725778/how-to-rebuild-elpa-packages-after-upgrade-of-emacs"&gt;Stack Overflow&lt;/a&gt;. First &lt;code&gt;M-:&lt;/code&gt; then in the mini-buffer
&lt;/p&gt;

&lt;pre class="example" id="orgf49d11a"&gt;
(byte-recompile-directory package-user-dir nil 'force)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org61ad6a5" class="outline-2"&gt;
&lt;h2 id="org61ad6a5"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org61ad6a5"&gt;
&lt;p&gt;
&lt;code&gt;emacs-jupyter&lt;/code&gt; looks like an improvement over &lt;code&gt;ob-ipython&lt;/code&gt; in that it adds a lot of features (and claims to be faster), but getting it to work was way harder than I'm used to. I don't think it was "difficult" in a real sense, given what it used to be like to make and install things on Ubuntu, but I think I've gotten used to things just working. Anyway, now I can see if emacs-jupyter lives up to its own hype.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;/b&gt; Since I first wrote this I've come to rely on &lt;code&gt;emacs-jupyter&lt;/code&gt; a lot, I don't take advantage of a lot of its features, but for executing python code in org-babel, it's everything that I need (so far).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>emacs-jupyter</category><guid>https://necromuralist.github.io/posts/emacs-jupyter/</guid><pubDate>Sat, 10 Aug 2019 22:13:27 GMT</pubDate></item><item><title>Opening Remote Files In Emacs Using SSH</title><link>https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#orgc0557d4"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#org69bcabf"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#orgbeee612"&gt;Editing a Remote User File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#org5fa2714"&gt;Editing a Remote File As Root&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/#orgae14693"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc0557d4" class="outline-2"&gt;
&lt;h2 id="orgc0557d4"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc0557d4"&gt;
&lt;p&gt;
For some strange reason, &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;the emacs wiki page on tramp mode&lt;/a&gt; doesn't have instructions on how to open a file on a remote machine using tramp in its main section. You instead have to go down to the &lt;i&gt;Tips and Tricks&lt;/i&gt; and try and pick out a version that works. So I'm writing this here so I maybe won't have to do all the searching I did the next time. This is the version that worked for me (Emacs 27.0.50, Ubuntu 19.04).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org69bcabf" class="outline-2"&gt;
&lt;h2 id="org69bcabf"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org69bcabf"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbeee612" class="outline-3"&gt;
&lt;h3 id="orgbeee612"&gt;Editing a Remote User File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbeee612"&gt;
&lt;p&gt;
You start by opening the file like you would a local file (&lt;code&gt;C-x C-f&lt;/code&gt;) and then in when the minibuffer opens up you use this syntax for the path:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ssh:&amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt;&amp;gt;:&amp;lt;path to file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So, for example, I have an SSH alias to &lt;code&gt;hades@erebus&lt;/code&gt; named &lt;code&gt;Hades&lt;/code&gt; and if I wanted to edit the emacs init file on that machine I would use this:
&lt;/p&gt;

&lt;pre class="example" id="org487c431"&gt;
/ssh:Hades:.emacs.d/init.el
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5fa2714" class="outline-3"&gt;
&lt;h3 id="org5fa2714"&gt;Editing a Remote File As Root&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5fa2714"&gt;
&lt;p&gt;
To open a file as root you stick an extra pipe (&lt;code&gt;|sudo&lt;/code&gt;) into the previous path syntax.
&lt;/p&gt;

&lt;pre class="example" id="org0059c25"&gt;
/ssh:&amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt;|sudo:&amp;lt;hostname&amp;gt;:&amp;lt;path to file&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
This syntax doesn't work with SSH aliases (or didn't seem to when I tried), so editing the &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; file the same machine as before would use this:
&lt;/p&gt;

&lt;pre class="example" id="orgff6bf93"&gt;
/ssh:hades@erebus|sudo:erebus:/etc/apt/sources.list
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgae14693" class="outline-2"&gt;
&lt;h2 id="orgae14693"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgae14693"&gt;
&lt;p&gt;
I got the &lt;code&gt;sudo&lt;/code&gt; version from &lt;a href="https://stackoverflow.com/questions/20624024/what-is-the-best-way-to-open-remote-files-with-emacs-and-ssh"&gt;Stack Overflow&lt;/a&gt; (of course).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>how-to</category><category>ssh</category><guid>https://necromuralist.github.io/posts/opening-remote-files-in-emacs-using-ssh/</guid><pubDate>Sat, 27 Jul 2019 19:58:44 GMT</pubDate></item><item><title>Inserting Text Between Methods in Org-Mode</title><link>https://necromuralist.github.io/posts/org-babel-noweb-ref/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org7df1366"&gt;The Tangle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#orgb383d45"&gt;The First Class&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org00e8e62"&gt;The Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org6f43dee"&gt;The Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org759babb"&gt;The Main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org0a0257f"&gt;Trying it out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org5f7a591"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
This is an attempt to get org-mode to insert text between methods in a class definition using the noweb-ref property. I think you can also do it by just tangling everything to the same file, but I like the noweb notation better.
&lt;/p&gt;

&lt;div id="outline-container-org7df1366" class="outline-2"&gt;
&lt;h2 id="org7df1366"&gt;The Tangle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7df1366"&gt;
&lt;p&gt;
To keep it simple I'm just going to include a section for the class definition and a &lt;code&gt;main&lt;/code&gt; section to check out the results. Note that to be able to break up the class definition I had to turn off org-mode's clean-up so all the python blocks have to be indented exactly the way they will be in the final python file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb383d45" class="outline-2"&gt;
&lt;h2 id="orgb383d45"&gt;The First Class&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb383d45"&gt;
&lt;p&gt;
This first class won't do much, but if I understand the documentation I should be able to insert text between the parts of it and still have it work when the python gets tangled out. The org-mode source block starts like this - &lt;code&gt;#+BEGIN_SRC python :noweb-ref first-class&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00e8e62" class="outline-3"&gt;
&lt;h3 id="org00e8e62"&gt;The Constructor&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org00e8e62"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FirstClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="sd"&gt;"""a class that is first&lt;/span&gt;
&lt;span class="sd"&gt;       Parameters&lt;/span&gt;
&lt;span class="sd"&gt;       ----------&lt;/span&gt;

&lt;span class="sd"&gt;       name: string&lt;/span&gt;
&lt;span class="sd"&gt;	 some kind of identifier&lt;/span&gt;
&lt;span class="sd"&gt;       """&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6f43dee" class="outline-3"&gt;
&lt;h3 id="org6f43dee"&gt;The Call&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6f43dee"&gt;
&lt;p&gt;
The call emits the name. To concatenate this method to the previous block I'm using the same org-mode source-block header as I did with the constructor (&lt;code&gt;#+BEGIN_SRC python :noweb-ref first-class&lt;/code&gt;). You could use a different name and insert another reference in the tangle but this seems more logical to me. One problem here is that python-mode (or some other mode) will interpret the methods as stand-alone functions and move them flush left. To fix this I had to turn off the automatic indentation using &lt;code&gt;(setq org-src-preserve-indentation t)&lt;/code&gt;. This means that you have to keep track of the indentation yourself, regardless of where the code sits in the org-mode document (so as you create sub-sections it will look uglier and uglier in the original document, at least to me). Putting the method in a separate block also requires that you to insert an empty line before the method to  keep it from being stuck to the bottom of the previous one, but it doesn't include it when it gets exported to HTML, so you can't see it in this post. In fact, I noticed afterwards that the HTML export also stripped out the indentation on the left so you can't really see what I'm talking about.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="sd"&gt;"""prints the name"""&lt;/span&gt;
       &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org759babb" class="outline-2"&gt;
&lt;h2 id="org759babb"&gt;The Main&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org759babb"&gt;
&lt;p&gt;
This part constructs the &lt;code&gt;FirstClass&lt;/code&gt; object and calls it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirstClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0a0257f" class="outline-2"&gt;
&lt;h2 id="org0a0257f"&gt;Trying it out&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0a0257f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;noweb_ref.py
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Bob
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5f7a591" class="outline-2"&gt;
&lt;h2 id="org5f7a591"&gt;Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5f7a591"&gt;
&lt;p&gt;
The point of trying this out is that I want to be able to break up and document class-methods better. Unfortunately it requires you to do a little more fiddling with the white-space yourself and makes the source org-mode file a little harder to read (I think) but I'm going to try it for a little while and see if the resulting documents are worth the extra headache. Maybe I'll just have to stick with docstrings for documenting the separate methodsâ¦
&lt;/p&gt;

&lt;p&gt;
This bit at the end makes it so the indentation is always preserved, even if the &lt;code&gt;init.el&lt;/code&gt; file isn't set up that way.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Local Variables:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# org-src-preserve-indentation: t&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# End:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>literate programming</category><category>org-babel</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/org-babel-noweb-ref/</guid><pubDate>Sun, 19 Feb 2017 19:06:06 GMT</pubDate></item><item><title>Changing Emacs Font Colors</title><link>https://necromuralist.github.io/posts/changing-emacs-font-colors/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;I prefer a white background with dark text when I work, which generally works well-enough but some modes in Emacs create foreground-background colors that make it hard to impossible to read. The simplest way that I know of to change a font's colors is with the &lt;cite&gt;customize-face&lt;/cite&gt; command.&lt;/p&gt;
&lt;section id="example-changing-this-headline"&gt;
&lt;h2&gt;Example: Changing This Headline&lt;/h2&gt;
&lt;p&gt;The original color for this headline in &lt;cite&gt;rst-mode&lt;/cite&gt; was magenta (not by default, I had changed things a couple of times).&lt;/p&gt;
&lt;img alt="magenta_headline.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/magenta_headline.png"&gt;
&lt;p&gt;To change it I moved my cursor onto the headline and entered &lt;cite&gt;M-x customize-face&lt;/cite&gt;.&lt;/p&gt;
&lt;img alt="enter_customize_face.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/enter_customize_face.png"&gt;
&lt;p&gt;This brings up a prompt so you can enter the particular &lt;cite&gt;face&lt;/cite&gt; you want to change. I didn't know the name that I wanted to change but since my cursor was already over the headline, it used that as the default so I could just hit enter to select it.&lt;/p&gt;
&lt;img alt="customize_face_prompt.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/customize_face_prompt.png"&gt;
&lt;p&gt;As you can see the headline-face in this case is &lt;cite&gt;rst-level-1&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;After I hit &lt;cite&gt;enter&lt;/cite&gt; it took me to a dialog page to let me change the settings for this face.&lt;/p&gt;
&lt;img alt="customization_dialog.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/customization_dialog.png"&gt;
&lt;p&gt;In this case I just wanted to change the background color so I clicked on the bottom &lt;cite&gt;Choose&lt;/cite&gt; button. You can enter values directly if you have something in mind, but I didn't so this seemed like the easier way to do it, since it brings up a color picker which lets you see what the colors look like.&lt;/p&gt;
&lt;img alt="color_selector.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/color_selector.png"&gt;
&lt;p&gt;I decided to go with &lt;em&gt;deep sky blue&lt;/em&gt; so I moved my cursor over that row in the color picker and hit &lt;code class="docutils literal"&gt;enter&lt;/code&gt;. This closes the color-picker and updates the color in the customization dialog.&lt;/p&gt;
&lt;img alt="updated_color.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/updated_color.png"&gt;
&lt;p&gt;This changes the dialog but doesn't actually change the settings. To do that you have to move you cursor to &lt;cite&gt;Apply and Save&lt;/cite&gt; and hit &lt;code class="docutils literal"&gt;enter&lt;/code&gt;. This updates the &lt;cite&gt;sample&lt;/cite&gt; color so you can see what it now looks like.&lt;/p&gt;
&lt;img alt="applied_change.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/applied_change.png"&gt;
&lt;p&gt;When I then switched back to my original editing buffer, the headline now had a blue background.&lt;/p&gt;
&lt;img alt="blue_headline.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/blue_headline.png"&gt;
&lt;p&gt;Which doesn't look as nice as I thought it would so I changed again. Same steps, different colors.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="describe-face"&gt;
&lt;h2&gt;Describe Face&lt;/h2&gt;
&lt;p&gt;Another useful command is &lt;cite&gt;M-x describe-face&lt;/cite&gt; which shows you the settings for a face. This is what it showed after I made another change to my headline color.&lt;/p&gt;
&lt;img alt="describe_face.png" src="https://necromuralist.github.io/posts/changing-emacs-font-colors/describe_face.png"&gt;
&lt;p&gt;If you click on &lt;cite&gt;customize this face&lt;/cite&gt; up at the top-right of the window it takes you to the same dialog that the &lt;cite&gt;M-x customize-face&lt;/cite&gt; command takes you to.&lt;/p&gt;
&lt;/section&gt;</description><category>emacs</category><category>how-to</category><guid>https://necromuralist.github.io/posts/changing-emacs-font-colors/</guid><pubDate>Sun, 25 Sep 2016 21:16:40 GMT</pubDate></item></channel></rss>