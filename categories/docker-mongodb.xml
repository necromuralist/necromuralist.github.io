<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about docker mongodb)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/docker-mongodb.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 20 Sep 2018 15:06:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Running MongoDB With Docker</title><link>https://necromuralist.github.io/posts/running-mongodb-with-docker/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;I am working through O'Reilly's &lt;cite&gt;Data Visualization with Python and JavaScript&lt;/cite&gt; and the chapter on reading and writing data uses MongoDB (among other things) as an example. I've wanted to isolate my exploratory/development software installation as much as possible. With python this is fairly easy (thanks to &lt;cite&gt;virtualenv&lt;/cite&gt;), and &lt;cite&gt;npm&lt;/cite&gt; can make isolating javascript installations easier, but I wanted to try and use Docker to isolate any other things I had to install so this is a first step. It's actuall a second step, since I already have a Redis container, but I didnt' take any notes when I installed it so I don't really remember doing it, and I'm going to extend the use of docker to handle all the intallations I make while reading this book so it's a first-step for this reason, at least.&lt;/p&gt;
&lt;p&gt;Anyway, here's what to do.&lt;/p&gt;
&lt;p&gt;First pull the &lt;cite&gt;mongo&lt;/cite&gt; docker image.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_073eba4e61ae47d9a168999e401b3c8b-1"&gt;&lt;/a&gt;docker pull mongo
&lt;/pre&gt;&lt;p&gt;To check that it's there after everything is done you can run &lt;tt class="docutils literal"&gt;docker images&lt;/tt&gt; and you should see something like this.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1647ae00a3ce49268331748ba6f7b3c7-1"&gt;&lt;/a&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
&lt;a name="rest_code_1647ae00a3ce49268331748ba6f7b3c7-2"&gt;&lt;/a&gt;mongo               latest              282fd552add6        &lt;span class="m"&gt;2&lt;/span&gt; days ago          &lt;span class="m"&gt;336&lt;/span&gt;.1 MB
&lt;a name="rest_code_1647ae00a3ce49268331748ba6f7b3c7-3"&gt;&lt;/a&gt;redis               latest              be9c5a746699        &lt;span class="m"&gt;5&lt;/span&gt; weeks ago         &lt;span class="m"&gt;184&lt;/span&gt;.9 MB
&lt;/pre&gt;&lt;p&gt;In this case I want the connection to Mongo DB to be available so I'm going to bind its local port (27017) to my host. I'm also going mount my local data file in the container so it will save its data my local folder.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_17bdca3026ca475a935dff8a969d3acc-1"&gt;&lt;/a&gt;docker run --name mongo -p &lt;span class="m"&gt;27017&lt;/span&gt;:27017 -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;/data:/data/db -d mongo
&lt;/pre&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--name&lt;/span&gt;&lt;/tt&gt; flag gives the name that you'll see if you run &lt;tt class="docutils literal"&gt;docker ps&lt;/tt&gt; to see the running containers. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; 27017:27017&lt;/tt&gt; makes it available to my host machine via &lt;tt class="docutils literal"&gt;localhost:27017&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;$PWD/data:/data/db&lt;/span&gt;&lt;/tt&gt; mounts the &lt;tt class="docutils literal"&gt;data&lt;/tt&gt; folder in the directory where I ran the docker command inside the container at &lt;tt class="docutils literal"&gt;/data/db&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/tt&gt; says to run it as a daemon. Finally the last argument &lt;tt class="docutils literal"&gt;mongo&lt;/tt&gt; identifies the image for the container.&lt;/p&gt;
&lt;p&gt;At this point MongoDb is accessible from my host machine, so, using &lt;tt class="docutils literal"&gt;pymongo&lt;/tt&gt; I can connect to it using something like this.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a3e56768bc3e4ae0a1eb5bca629eb211-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;
&lt;a name="rest_code_a3e56768bc3e4ae0a1eb5bca629eb211-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_a3e56768bc3e4ae0a1eb5bca629eb211-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And that's it.&lt;/p&gt;&lt;/div&gt;</description><category>docker mongodb</category><guid>https://necromuralist.github.io/posts/running-mongodb-with-docker/</guid><pubDate>Mon, 20 Jun 2016 03:01:17 GMT</pubDate></item></channel></rss>