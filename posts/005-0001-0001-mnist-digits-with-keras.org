#+BEGIN_COMMENT
.. title: MNIST Digits With Keras
.. slug: mnist-digits-with-keras
.. date: 2018-04-28 16:22:20 UTC-07:00
.. tags: deep learning,keras
.. category: Deep Learning
.. link: 
.. description: A look at using keras and tensor flow to recognize handwritten digits.
.. type: text
#+END_COMMENT

These are the parts that will make up the model.
* Imports
** The Sequential Model

   The Keras [[https://keras.io/getting-started/sequential-model-guide/][Sequential Model]] is a stack of layers that will make up the neural network.

#+BEGIN_SRC ipython :session mnist :results none
from keras.models import Sequential
#+END_SRC

** The Dense Layers

   The Keras [[https://keras.io/layers/core/][Dense]] layer is a densely-connected layer within our neural network.

#+BEGIN_SRC ipython :session mnist :results none
from keras.layers.core import Activation
#+END_SRC

** Activation

   The [[https://keras.io/layers/core/#activation][Activation]] represents the activation function for each layer (e.g. *relu*).

#+BEGIN_SRC ipython :session mnist :results none
from keras.layers.core import Activation
#+END_SRC

** Adam

   To tune the model to the data we'll use the [[https://keras.io/optimizers/#adam][Adam]] optimizer

#+BEGIN_SRC ipython :session mnist :results none
from keras.optimizers import Adam
#+END_SRC

** Categorical Converter
   Finally, since our problem is a classification problem (identify which of 10 digits an image represents) I'll import the Keras [[https://keras.io/utils/#to_categorical][=to_categorical=]] function to enable classification of our data.

#+BEGIN_SRC ipython :session mnist :results none
from keras.utils import np_utils
#+END_SRC

The [[http://yann.lecun.com/exdb/mnist/][MNIST dataset]] is made up of human-classified hand-written digits. Keras includes it as part of their installation so we can load it directly from keras.

#+BEGIN_SRC ipython :session mnist :results none
from keras.datasets import mnist
#+END_SRC

We're going to use numpy to reshape the data.
#+BEGIN_SRC ipython :session mnist :results none
import numpy
#+END_SRC

To make our output the same every time, I'll set the random seed to April 28, 2018 as a string of digits.

#+BEGIN_SRC ipython :session mnist :results none
numpy.random.seed(4282018)
#+END_SRC
