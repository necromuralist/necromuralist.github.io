<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about nikola)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/nikola.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Sun, 08 Nov 2020 21:07:25 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Updating a Nikola Shortcode Plugin</title><link>https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org59e907c"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgdc4bd67"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org4794d34"&gt;The Plugin File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgf6ac894"&gt;The Plugin Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org12b7323"&gt;Stealing From the &lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org3f4e8a2"&gt;The Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org67bb7ec"&gt;Checking It Out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org1d9e375"&gt;Does it work like the original doc?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgb1e7168"&gt;Does it accept a title?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org5bffbf4"&gt;What if the slug doesn't exist?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgc4c5f79"&gt;One More Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org9a8b786"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/lancelot_link.jpg" alt="lancelot_link.jpg"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Source: &lt;a href="https://www.flickr.com/photos/myprontopup/264413649/in/photostream/"&gt;Brian&lt;/a&gt; (&lt;a href="https://creativecommons.org/licenses/by-nc/2.0/"&gt;CC License&lt;/a&gt;)/Unmodified
&lt;/p&gt;
&lt;div id="outline-container-org59e907c" class="outline-2"&gt;
&lt;h2 id="org59e907c"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59e907c"&gt;
&lt;p&gt;
These are some notes to help me remember what I did to alter a &lt;a href="https://www.getnikola.com/"&gt;Nikola&lt;/a&gt; &lt;a href="https://www.getnikola.com/handbook.html#shortcodes"&gt;shortcode&lt;/a&gt; plugin. A while back I looked into using their &lt;a href="https://www.getnikola.com/handbook.html#doc"&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt; &lt;a href="https://www.getnikola.com/handbook.html#restructuredtext-extensions"&gt;reStructured Text extension&lt;/a&gt; ("role"?) which automatically creates links to other posts by looking up the &lt;a href="https://www.wikiwand.com/en/Clean_URL#/Slug"&gt;slug&lt;/a&gt; or title that you pass to it, but since I switched to using org-mode instead of restructured text I couldn't use it. Then I found out the other day that they built a &lt;a href="https://www.getnikola.com/handbook.html#shortcodes"&gt;shortcode&lt;/a&gt; that allows you to use it in other formats and when I tried it it worked - mostly.
&lt;/p&gt;

&lt;p&gt;
A tag that looks like this:
&lt;/p&gt;

&lt;p&gt;

{{% doc %}}2-nikola-inter-site-links{{% /doc %}}

&lt;/p&gt;

&lt;p&gt;
Gets turned into this: &lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;Nikola Inter-Site Links&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The problem is that, while the &lt;code&gt;doc&lt;/code&gt; shortcode supports giving the link an alternate title, it expects restructured-text formatting. e.g. &lt;code&gt;`alternate title&amp;lt;some-slug&amp;gt;`&lt;/code&gt;. Why is this a problem? Well, I didn't look into where it's happening, but when the text within the {{% doc %}} tags gets sent to the shortcode code (meaning the python plugin code) for processing it converts the angle brackets (&lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;) to &lt;a href="https://www.w3schools.com/html/html_entities.asp"&gt;HTML character entities&lt;/a&gt; (e.g. the &lt;code&gt;&amp;lt;&lt;/code&gt; becomes &lt;code&gt;&amp;amp;lt&lt;/code&gt;) but the regular expression in the code that extracts the alternate title is looking for the braces (presumably the role is processed differently from the shortcode) anyway, I was trying to figure out some workarounds but then I looked at the code and it looked fairly easy to customize so I decided I would so that I could learn how to do it (and have a way to use alternative titles in org-mode). So, here it goes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdc4bd67" class="outline-2"&gt;
&lt;h2 id="orgdc4bd67"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdc4bd67"&gt;
&lt;p&gt;
I'm going to call my shortcode &lt;code&gt;lancelot&lt;/code&gt;. I was going to call it link, but that seems like it might clash with something else, either now or in the future, so I decided to name it after &lt;a href="https://www.wikiwand.com/en/Lancelot_Link,_Secret_Chimp"&gt;Lancelot Link, Secret Chimp&lt;/a&gt; instead. Hopefully that won't end up conflicting with anything.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4794d34" class="outline-3"&gt;
&lt;h3 id="org4794d34"&gt;The Plugin File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4794d34"&gt;
&lt;p&gt;
The first thing I did was poke around in the nikola folders for something I could copy. I decided to use the existing &lt;code&gt;gist&lt;/code&gt; shortcode to start with. Why not use &lt;code&gt;doc&lt;/code&gt;? because it's in a different folder and inherits from the &lt;code&gt;RestExtension&lt;/code&gt; which didn't seem like what I wanted, although maybe that's what makes the angle brackets work, but anyway, the &lt;code&gt;gist&lt;/code&gt; seemed like a good place to start. They appear to be using &lt;a href="https://yapsy.readthedocs.io/en/latest/"&gt;yapsy&lt;/a&gt; for the plugin system, which requires two files for your plugin, a python file where you define the plugin and a plugin-info file (which looks like an ini file). So to start I copied &lt;code&gt;nikola/plugins/shortcode/gist.plugin&lt;/code&gt; and renamed it &lt;code&gt;lancelot.plugin&lt;/code&gt; then edited it to look like this.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Core]
name = lancelot
module = lancelot

[Nikola]
PluginCategory = Shortcode

[Documentation]
author = The Cloistered Monkey
version = 0.1
website = https://necromuralist.github.io/
description = Variant of the doc shortcode that allows alternate titles for non-restructured text formats.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Seems easy enough. Now to the plugin code.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf6ac894" class="outline-3"&gt;
&lt;h3 id="orgf6ac894"&gt;The Plugin Code&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf6ac894"&gt;
&lt;p&gt;
According to the documentation on &lt;a href="https://getnikola.com/extending.html#shortcodes"&gt;creating a shortcode&lt;/a&gt;, the requirements are that you create a plugin that inherits from the &lt;code&gt;ShortcodePlugin&lt;/code&gt; (you'll find it in the &lt;code&gt;nikola/plugin_categories.py&lt;/code&gt; file if you want to check it out) and define the &lt;code&gt;handler&lt;/code&gt; method that handles the shortcode and returns a tuple of &lt;code&gt;(output, dependencies)&lt;/code&gt;. The &lt;code&gt;output&lt;/code&gt; is the text that will replace the shortcode in the document and the &lt;code&gt;dependencies&lt;/code&gt; is a list of files that nikola will use to check if something is out of date (I don't use it here).
&lt;/p&gt;

&lt;p&gt;
There are three required named arguments for the &lt;code&gt;handler&lt;/code&gt; method:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;site&lt;/code&gt;: an object that you can use to check the state of the site&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: The text between the shortcode tags (if it uses both opening and closing tags)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lang&lt;/code&gt;: the current language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In addition, any attributes added within the shortcode tag will be passed into the &lt;code&gt;handler&lt;/code&gt; method by position or keyword. Anyway, since I copied the &lt;code&gt;doc&lt;/code&gt; code I didn't actually read this until just now, but maybe it's good to know. Onward.
&lt;/p&gt;

&lt;p&gt;
The next thing to do was to create &lt;code&gt;lancelot.py&lt;/code&gt; in the same folder as the &lt;code&gt;lancelot.plugin&lt;/code&gt; file. The basic definition of class (and the start of the file) looks more-or-less the same for all the plugins.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# This file is public domain according to its author, the Cloistered Monkey&lt;/span&gt;

&lt;span class="sd"&gt;"""Shortcode for non-restructured text inter-site links."""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nikola.plugin_categories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Plugin for non-rst inter-site links."""&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lancelot"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
So, other than some doc-strings all you have to do is set the name and then the handler, which we'll do next.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org12b7323" class="outline-3"&gt;
&lt;h3 id="org12b7323"&gt;Stealing From the &lt;code&gt;doc&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org12b7323"&gt;
&lt;p&gt;
The file that I stole most of the code from is located in &lt;code&gt;nikola/plugins/compile/rest/doc.py&lt;/code&gt;. The &lt;code&gt;Plugin&lt;/code&gt; class in that file is handling both the restructured text role and the shortcode so we don't need all of it. According to the documentation I linked to above, the &lt;code&gt;set_site&lt;/code&gt; method is used to tell nikola to use something other than the &lt;code&gt;handler&lt;/code&gt; method, and in this case the author used it to register the functions for the two things it's handling.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Set Nikola site."""&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;
    &lt;span class="n"&gt;roles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_canonical_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'doc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_shortcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'doc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_shortcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doc_role&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you look at the line &lt;code&gt;self.site.register_shortcode('doc', doc_shortcode)&lt;/code&gt; you can figure out that we need to steal from a function named - wait for itâ¦ &lt;code&gt;doc_shortcode&lt;/code&gt;. Here's what's in that function:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doc_shortcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Implement the doc shortcode."""&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_doc_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
		&lt;span class="s1"&gt;'More than one post with the same slug. Using "&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;" for doc shortcode'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;a href="&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/a&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	    &lt;span class="s1"&gt;'"&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;" slug doesn&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t exist.'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;span class="error text-error" style="color: red;"&amp;gt;Invalid link: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It looks pretty straight-forward except it's using two things not defined within it - &lt;code&gt;LOGGER&lt;/code&gt; and &lt;code&gt;_doc_link&lt;/code&gt;. The &lt;code&gt;LOGGER&lt;/code&gt; is just an import so we can just change the start of our file to grab it. The &lt;code&gt;doc_link&lt;/code&gt; is a function in the same file as &lt;code&gt;doc_shortcode&lt;/code&gt;. My first thought for the &lt;code&gt;_doc_link&lt;/code&gt; was that since it's a standalone function I could just import it and call it. That turned out to have a small problem though - right in the middle of &lt;code&gt;_doc_link&lt;/code&gt; is this for loop:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc_role&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'slug'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;twin_slugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
	    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
What you'll notice is that the &lt;code&gt;doc_role&lt;/code&gt; function has an attribute &lt;code&gt;site&lt;/code&gt;. Well, it doesn't really, until it's set in that &lt;code&gt;set_site&lt;/code&gt; method above. So, okay, maybe I could figure out some way to set itâ¦ or maybe not, I don't know but even if I could it seems like it'd get kind of convoluted, and who knows what changes the original author might make in the future, it just seemed like it'd make more sense to re-implement it myself.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3f4e8a2" class="outline-3"&gt;
&lt;h3 id="org3f4e8a2"&gt;The Plugin&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3f4e8a2"&gt;
&lt;p&gt;
So, first a different start to our file, this time with the &lt;code&gt;LOGGER&lt;/code&gt; and &lt;code&gt;slugify&lt;/code&gt; imported (the &lt;code&gt;slugify&lt;/code&gt; was in &lt;code&gt;_doc_link&lt;/code&gt; which I'm re-defining later).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# This file is public domain according to its author, the Cloisted Monkey&lt;/span&gt;

&lt;span class="sd"&gt;"""Shortcode for non-restructured text inter-site links.&lt;/span&gt;
&lt;span class="sd"&gt;Re-write of the ``doc`` plugin to allow alternative titles outside of RST"""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nikola.plugin_categories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nikola.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Plugin for non-rst inter-site links."""&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lancelot"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9a30d9d" class="outline-4"&gt;
&lt;h4 id="org9a30d9d"&gt;&lt;code&gt;lancelot_link&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9a30d9d"&gt;
&lt;p&gt;
To replace the &lt;code&gt;_doc_link&lt;/code&gt; I made a new function called &lt;code&gt;lancelot_link&lt;/code&gt; which I'll be looking at in parts. First up is the function declaration.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lancelot_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""process the slug, check if it exists or is duplicated&lt;/span&gt;

&lt;span class="sd"&gt;    if `title` is None this will grab the post-title&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;     site: the Nikola object&lt;/span&gt;
&lt;span class="sd"&gt;     slug: the text between the shortcode tags&lt;/span&gt;
&lt;span class="sd"&gt;     title: the title passed in by the user (if any)&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;     tuple (success, has duplicate slugs, title, permalink, slug)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The interface wants the objects that nikola passes into the &lt;code&gt;handler&lt;/code&gt; method - the &lt;code&gt;site&lt;/code&gt; object , the &lt;code&gt;data&lt;/code&gt; (renamed &lt;code&gt;slug&lt;/code&gt;) and the &lt;code&gt;title&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I'm not indenting the rest of the code in the post but imagine it's indented four spaces.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga596e77"&gt;&lt;/a&gt;Slugification&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga596e77"&gt;
&lt;p&gt;
The first thing the function does is split out any fragments that might have been attached and "slugifies" the slug (makes sure it's ASCII and has only alphanumeric characters).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org3ef0557"&gt;&lt;/a&gt;Find the Post&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3ef0557"&gt;
&lt;p&gt;
Next it checks to see if the slug refers to an actual page on the site and if there are duplicate slugs. If the page doesn't exist, then it short-circuits the function so the &lt;code&gt;handler&lt;/code&gt; can return some error text instead of a link. If it does exist it saves the &lt;code&gt;post&lt;/code&gt; object for the next step (using the first post in the timeline if there were duplicates).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;twin_slugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'slug'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;twin_slugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
	    &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org0003e69"&gt;&lt;/a&gt;The Title&lt;br&gt;
&lt;div class="outline-text-5" id="text-org0003e69"&gt;
&lt;p&gt;
If the user didn't pass in an alternative title this grabs the title that was given to the post we're linking to.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; The &lt;code&gt;doc&lt;/code&gt; shortcode raises then catches a &lt;code&gt;ValueError&lt;/code&gt; exception if there's no matching post. I had thought that this was for logging, but that doesn't appear to be the case so I took it out. But since I don't know what it was doing in the first place I might be breaking something. Not that I can tell, though.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org33b83ce"&gt;&lt;/a&gt;The Permalink&lt;br&gt;
&lt;div class="outline-text-5" id="text-org33b83ce"&gt;
&lt;p&gt;
Now we grab the permalink.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;permalink&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orge0ae8fd"&gt;&lt;/a&gt;The Return&lt;br&gt;
&lt;div class="outline-text-5" id="text-orge0ae8fd"&gt;
&lt;p&gt;
And finally we do the return dance to answer some questions for the &lt;code&gt;handler&lt;/code&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;Did we find the post?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Were there duplicate posts with the same slug?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;What's the text to display for the link?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;What's the address for the anchor tag?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;What's the correct slug?&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The &lt;code&gt;slug&lt;/code&gt; is only for the logging messages.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0468789" class="outline-4"&gt;
&lt;h4 id="org0468789"&gt;The handler&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0468789"&gt;
&lt;p&gt;
Now I'll define the &lt;code&gt;handler&lt;/code&gt; that's called by nikola. This is a method of the Plugin class that I started above, but I'm showing it after the &lt;code&gt;lancelot_link&lt;/code&gt; function since it mostly just calls &lt;code&gt;lancelot_link&lt;/code&gt; and creates the output from what it returned. I originally had it all in the same method (and maybe I'll put it back at some point). But I thought it was a little easier to read this way, especially as I referred back to the original &lt;code&gt;doc&lt;/code&gt; plugin to see what's going on.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Create an inter-site link&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;     title: optional argument to specify a different title from the post&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;     output HTML to replace the shortcode&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancelot_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
		&lt;span class="s1"&gt;'More than one post with the same slug. '&lt;/span&gt;
		&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Using "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;" for lancelot shortcode'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;a href="&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/a&amp;gt;'&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;" slug doesn&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t exist.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;span class="error text-error" style="color: red;"&amp;gt;'&lt;/span&gt;
		  &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Invalid link: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
One thing to note here is that the original &lt;code&gt;doc&lt;/code&gt; plugin only returns the output, not an empty list, even though the documentation says you should. It works either way, but I noticed the &lt;code&gt;gist&lt;/code&gt; plugin returned an empty list with the output so I followed, like a lemming to the sea.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org67bb7ec" class="outline-3"&gt;
&lt;h3 id="org67bb7ec"&gt;Checking It Out&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org67bb7ec"&gt;
&lt;p&gt;
Now let's give it a dry run.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1d9e375" class="outline-3"&gt;
&lt;h3 id="org1d9e375"&gt;Does it work like the original doc?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1d9e375"&gt;
&lt;p&gt;
   If we put this in the post:

{{% lancelot %}}2-nikola-inter-site-links{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
We get this:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;Nikola Inter-Site Links&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb1e7168" class="outline-3"&gt;
&lt;h3 id="orgb1e7168"&gt;Does it accept a title?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb1e7168"&gt;
&lt;p&gt;
Now, what this was all about.
&lt;/p&gt;

&lt;p&gt;

{{% lancelot title="An old post about linking to another post." %}}2-nikola-inter-site-links{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
Gives us:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;An old post about linking to another post.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
And if you forget the name of the parameter, you can just pass in the alternate title instead.
&lt;/p&gt;

&lt;p&gt;

{{% lancelot "Without the 'title=' part" %}}2-nikola-inter-site-links{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
Gives this:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;Without the 'title=' part&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5bffbf4" class="outline-3"&gt;
&lt;h3 id="org5bffbf4"&gt;What if the slug doesn't exist?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5bffbf4"&gt;
&lt;p&gt;

{{% lancelot title="Oops." %}}this-error-is-on-purpose-ignore-it{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
Gives us:
&lt;/p&gt;

&lt;p&gt;
&lt;span class="error text-error" style="color: red;"&gt;Invalid link: this-error-is-on-purpose-ignore-it&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
Note that adding this error to this post means it shows up in the logging every time I re-build. I hope I don't forget and try and hunt it down later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc4c5f79" class="outline-3"&gt;
&lt;h3 id="orgc4c5f79"&gt;One More Thing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc4c5f79"&gt;
&lt;p&gt;
When I originally was trying to figure this out I put the &lt;code&gt;lancelot&lt;/code&gt; files in the &lt;code&gt;shortcodes&lt;/code&gt; folder next to the &lt;code&gt;gist&lt;/code&gt; files (in the virtualenv, so I knew it was a bad idea, even as I did it) but while I was re-writing them for this post I wanted a place to stash the files so I put them in the &lt;code&gt;plugins&lt;/code&gt; folder that sits in the site repository next to the &lt;code&gt;conf.py&lt;/code&gt; file - which already existed because that's where nikola put the &lt;a href="https://plugins.getnikola.com/v7/orgmode/"&gt;org-mode plugin&lt;/a&gt; - and when I first re-built the site with the code only partially written, it raised an &lt;code&gt;Exception&lt;/code&gt; because it turns out that the place to put plugins, including shortcode plugins, for nikola/yapsy to find them is in the &lt;code&gt;plugins&lt;/code&gt; folder. Imagine that.
&lt;/p&gt;

&lt;p&gt;
Also, to use an interactive debugger (like my favorite one, &lt;a href="https://pypi.org/project/pudb/"&gt;pudb&lt;/a&gt;) you need to change the verbosity when you build the site to 2.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola build -v 2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Otherwise it captures the stdout and you won't see the debugger (it will just look like it hung-up). The other thing is if you see an error something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2020-07-28 20:53:44] ERROR: Nikola: Shortcode error: Syntax error in shortcode 'lancelot' at line 426, column 27: expecting whitespace!
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It more than likely mean that the error is actually in the tag - no space after the first &lt;code&gt;%&lt;/code&gt; or before the second one or one time I chopped off the end of a tag when copying and pasting and it gave the same error - it seems to be a generic error that means "check the tag". 
&lt;/p&gt;

&lt;p&gt;
I guess that's actually three more things.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9a8b786" class="outline-2"&gt;
&lt;h2 id="org9a8b786"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9a8b786"&gt;
&lt;p&gt;
So, that's my first foray into making a nikola plugin. I've been using nikola for a while now, but I never really looked at the code before. It's nice to see that the plugin system is so easy to use.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>nikola</category><guid>https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/</guid><pubDate>Tue, 28 Jul 2020 23:33:43 GMT</pubDate></item><item><title>pyLDAvis In org-mode With JQuery</title><link>https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#org885c15f"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#orgc5e2304"&gt;Imports&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#org4aff46f"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#org0a10ba3"&gt;From PyPi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#orgae18c06"&gt;The Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#org601a17b"&gt;The Vectorizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#orge48feb1"&gt;The LDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#org9b6b3d4"&gt;PyLDAvis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/#org97fa2a6"&gt;Prepare the Data for the Visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org885c15f" class="outline-2"&gt;
&lt;h2 id="org885c15f"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org885c15f"&gt;
&lt;p&gt;
In my &lt;a href="https://necromuralist.github.io/posts/pyldavis-in-org-mode/"&gt;last post&lt;/a&gt; I loaded the pyLDAvis widget by dumping the HTML/Javascript right into the org-mode document. The problem with doing this is that the document has a lot of lines of text in it, which slows down emacs a noticeable amount, making it hard to display one widget, and pretty much impractical to show more than one. So, since &lt;a href="https://www.getnikola.com/"&gt;Nikola&lt;/a&gt; (or maybe bootstrap or one of the other plugins I'm using) is loading &lt;a href="https://jquery.com/"&gt;JQuery&lt;/a&gt; anyway, I'm going to use javascript to add the HTML after it loads from a file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc5e2304" class="outline-2"&gt;
&lt;h2 id="orgc5e2304"&gt;Imports&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc5e2304"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4aff46f" class="outline-3"&gt;
&lt;h3 id="org4aff46f"&gt;Python&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4aff46f"&gt;
&lt;p&gt;
&lt;code&gt;datetime&lt;/code&gt; is just to show how long things take. In this case the data-set is fairly small so it doesn't take very long, but in other cases it might take a very long time to build the LDA model so I like to time it so I know the next time about how long I should wait.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0a10ba3" class="outline-3"&gt;
&lt;h3 id="org0a10ba3"&gt;From PyPi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0a10ba3"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fetch_20newsgroups&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.decomposition&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LatentDirichletAllocation&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CountVectorizer&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyLDAvis&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyLDAvis.sklearn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgae18c06" class="outline-2"&gt;
&lt;h2 id="orgae18c06"&gt;The Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgae18c06"&gt;
&lt;p&gt;
I'm going to use the &lt;a href="https://archive.ics.uci.edu/ml/datasets/Twenty+Newsgroups"&gt;Twenty Newsgroups&lt;/a&gt; data-set, not because of anything significant, but because sklearn has a downloader for it so I figured it'd be easiest.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~/datasets/newsgroups/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;newsgroups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_20newsgroups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_home&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
/home/brunhilde/datasets/newsgroups

&lt;/pre&gt;

&lt;p&gt;
The &lt;code&gt;newsgroups.data&lt;/code&gt; is a list, so it doesn't have a shape attribute like it would it it were a numpy array.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{:,}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsgroups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{:.2f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsgroups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;18000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
11,314
0.63

&lt;/pre&gt;

&lt;p&gt;
The &lt;a href="https://sklearn.org/datasets/twenty_newsgroups.html#newsgroups"&gt;documentation for the &lt;code&gt;fetch_20newsgroups&lt;/code&gt; function&lt;/a&gt; says that the full dataset has 18,000 entries, so we have about 63% of the full set.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org601a17b" class="outline-2"&gt;
&lt;h2 id="org601a17b"&gt;The Vectorizer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org601a17b"&gt;
&lt;p&gt;
I'm going to use sklearn's &lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html"&gt;CountVectorizer&lt;/a&gt; to convert the newsgroups documents to arrays of token counts. This is about the visualization, not making an accurate model so I'm going to use the built-in tokenizer. I'm not sure what the &lt;code&gt;fit&lt;/code&gt; method is for, but the &lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html#sklearn.feature_extraction.text.CountVectorizer.fit_transform"&gt;fit_transform&lt;/a&gt; method returns the document-term matrix that we need (each row represents a document, the columns are the tokens, and the cells hold the counts for each token in the document).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;vectorizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountVectorizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stop_words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"english"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;document_term_matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vectorizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsgroups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Elapsed: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Elapsed: 0:00:03.033235

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge48feb1" class="outline-2"&gt;
&lt;h2 id="orge48feb1"&gt;The LDA&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge48feb1"&gt;
&lt;p&gt;
Now we'll build the &lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.LatentDirichletAllocation.html"&gt;Latent Dirichlet Allocation Model&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsgroups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LatentDirichletAllocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document_term_matrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Elapsed: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Elapsed: 0:02:37.479097

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9b6b3d4" class="outline-2"&gt;
&lt;h2 id="org9b6b3d4"&gt;PyLDAvis&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9b6b3d4"&gt;
&lt;p&gt;
Okay so here's where we try and get &lt;a href="https://pyldavis.readthedocs.io/en/latest/readme.html#"&gt;pyLDAvis&lt;/a&gt; into this thing.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org97fa2a6" class="outline-3"&gt;
&lt;h3 id="org97fa2a6"&gt;Prepare the Data for the Visualization&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org97fa2a6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd32a8b8" class="outline-4"&gt;
&lt;h4 id="orgd32a8b8"&gt;The Prepared Data&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd32a8b8"&gt;
&lt;p&gt;
The first step in using pyLDAvis is to create a &lt;code&gt;PreparedData&lt;/code&gt; named-tuple using the &lt;a href="https://pyldavis.readthedocs.io/en/latest/modules/API.html#pyLDAvis.prepare"&gt;prepare&lt;/a&gt; function.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;prepared_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyLDAvis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sklearn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_term_matrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vectorizer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Elapsed: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Elapsed: 0:00:34.293668

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org30c3340" class="outline-4"&gt;
&lt;h4 id="org30c3340"&gt;Build the HTML&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org30c3340"&gt;
&lt;p&gt;
Now we can create an HTML fragment using the &lt;a href="https://pyldavis.readthedocs.io/en/latest/modules/API.html#pyLDAvis.prepared_data_to_html"&gt;prepared_data&lt;/a&gt; function. The output is a string of HTML script, style, and div tags. It adds the entire data-set as a javascript object so the more data you have, the longer the string will be.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;div_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pyldavis-in-org-mode"&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyLDAvis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepared_data_to_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prepared_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
				      &lt;span class="n"&gt;template_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"simple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
				      &lt;span class="n"&gt;visid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;div_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8f8a957" class="outline-4"&gt;
&lt;h4 id="org8f8a957"&gt;Export the HTML&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8f8a957"&gt;
&lt;p&gt;
Now I'm going to save the html to a file so we can load it later.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pyldavis-in-org-mode-with-jquery"&lt;/span&gt;
&lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../files/posts/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pyldavis_fragment.html"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So here's where we create the HTML that will be embedded in this post. The &lt;a href="https://api.jquery.com/load/"&gt;JQuery load&lt;/a&gt; function puts the content of our saved file into the div. I added the &lt;a href="https://api.jquery.com/css/"&gt;css&lt;/a&gt; call because I have my site's font-size set to extra-large, since the Goudy Bookstyle looks too small to me otherwise (I think nice fonts look better when they're big), which causes the buttons in the pyLDAvis widget to overflow out of the header. Under normal circumstances you wouldn't need to do this, but if you do want to do any one-off styling, here's an example of how to do it. Otherwise maybe an update to the style-sheet would be better. 
&lt;/p&gt;

&lt;p&gt;
The right-hand box is still messed up, but it's good enough for this example.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'''#+BEGIN_EXPORT html&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;div id="{0}"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;$("#{0}").load("{1}")&lt;/span&gt;
&lt;span class="s1"&gt;$("#{0}-top").css("font-size", "large")&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;#+END_EXPORT'''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div id="pyldavis-in-org-mode"&gt;&lt;/div&gt;
&lt;script&gt;
$("#pyldavis-in-org-mode").load("pyldavis_fragment.html")
$("#pyldavis-in-org-mode-top").css("font-size", "large")
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>nikola</category><category>pyldavis</category><category>visualization</category><guid>https://necromuralist.github.io/posts/pyldavis-in-org-mode-with-jquery/</guid><pubDate>Wed, 19 Dec 2018 19:27:01 GMT</pubDate></item><item><title>Nikola Inter-Site Links</title><link>https://necromuralist.github.io/posts/2-nikola-inter-site-links/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;While creating a bibliography using nikola I found about nikola &lt;a class="reference external" href="https://getnikola.com/path-handlers.html"&gt;path handlers&lt;/a&gt;. It allows you to make reference to other posts without needing the full address (e.g. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://necromuralist.github.io/pages/nikola-inter-site-links&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Instead you can use the special &lt;cite&gt;link://&lt;/cite&gt; protocol and nikola will resolve it for you. It uses the form:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;link://&amp;lt;kind&amp;gt;/&amp;lt;name&amp;gt;/&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is (of course) another form that lets you doc it using the &lt;code class="docutils literal"&gt;:doc:&lt;/code&gt; restructured text directive. This form is more succinct, and is what I'll probably stick with in the future. I originally went with the &lt;code class="docutils literal"&gt;link&lt;/code&gt; version because I thought it would work with other markup languages, but it didn't (or at least not with org-mode).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-paths"&gt;
&lt;h2&gt;Post-Paths&lt;/h2&gt;
&lt;p&gt;In this case I'm trying to link to another post so the link &lt;cite&gt;kind&lt;/cite&gt; is &lt;code class="docutils literal"&gt;post_path&lt;/code&gt;, which will resolve to either posts or pages. Because it can be either one, you need to extend the path to this form:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_47ee0a649bc4494aa6078b07bb07ab19-1"&gt;&lt;/a&gt;link://post_path/posts/&amp;lt;post-slug&amp;gt;/
&lt;/pre&gt;&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You can get the slug in the meta-data in the post itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;When I forgot the last forward-slash (after the slug) nikola couldn't resolve it and returned a 404 error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Here's how to link to another post that I titled &lt;strong&gt;Pruning Large Files From Git with BFG&lt;/strong&gt;, with a slug of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pruning-large-files-from-git-with-bfg&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code rst"&gt;&lt;a name="rest_code_e7d5b8c78bd348b89a3b35a4f7ae39ca-1"&gt;&lt;/a&gt;&lt;span class="s"&gt;`link &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;link://post_path/posts/pruning-large-files-from-git-with-bfg/&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`__&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This creates this &lt;a class="reference external" href="https://necromuralist.github.io/posts/pruning-large-files-from-git-with-bfg/"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="doc-role"&gt;
&lt;h2&gt;Doc Role&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.getnikola.com/handbook.html#doc"&gt;This&lt;/a&gt; is a restructured-text role that nikola supports to make it easier to install links. The previous example using this style would be done like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;:doc:`link&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;pruning-large-files-from-git-with-bfg&amp;gt;`&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which creates this &lt;a class="reference external" href="https://necromuralist.github.io/posts/pruning-large-files-from-git-with-bfg/"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;doc&lt;/code&gt; method  seems much easier for posts, but the &lt;code class="docutils literal"&gt;links&lt;/code&gt; method covers many other cases and might be useful otherwise. It should be noted that both methods work for pages as well (stories), although the link version will need the path changed. In my case, all the pages are under the &lt;code class="docutils literal"&gt;stories&lt;/code&gt; folder so the link would be change to something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;`link &lt;span class="pre"&gt;&amp;lt;link://post_path/stories/story-slug/&amp;gt;`__&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>how-to</category><category>nikola</category><guid>https://necromuralist.github.io/posts/2-nikola-inter-site-links/</guid><pubDate>Sun, 14 Jan 2018 22:56:00 GMT</pubDate></item><item><title>How To Change The Nikola Bootswatch Theme</title><link>https://necromuralist.github.io/posts/how-to-change-the-nikola-bootswatch-theme/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;p&gt;I had my theme for this site set to use &lt;a class="reference external" href="http://nickmccurdy.com/bootswatch/spacelab/"&gt;Spacelab&lt;/a&gt;, which I liked, but the gradients were starting to annoy me so I decided to switch to &lt;a class="reference external" href="http://nickmccurdy.com/bootswatch/journal/"&gt;Journal&lt;/a&gt;, which matches my aesthetic tastes a little better. This took more work than I thought it would (mostly because I don't mess with the &lt;em&gt;nikola&lt;/em&gt; configuration very often). So these are my notes for the next time.&lt;/p&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;a class="reference external" href="https://themes.getnikola.com/#bootstrap3"&gt;bootswatch 3&lt;/a&gt; nikola theme (if you haven't already) (&lt;code class="docutils literal"&gt;nikola install_theme bootstrap3&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;a class="reference external" href="https://bootswatch.com/journal/"&gt;journal bootswatch theme&lt;/a&gt;  (&lt;code class="docutils literal"&gt;nikola bootswatch_theme &lt;span class="pre"&gt;-s&lt;/span&gt; journal&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the base template (&lt;code class="docutils literal"&gt;nikola theme &lt;span class="pre"&gt;-c&lt;/span&gt; base.tmpl&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;code class="docutils literal"&gt;base.tmpl&lt;/code&gt;, change &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;navbar-inverse&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;navbar-default&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the anchor color in &lt;code class="docutils literal"&gt;bootstrap.css&lt;/code&gt; to something less creamsicle (and do whatever other CSS adjustments you need to do).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you need to, minify the CSS (&lt;code class="docutils literal"&gt;cleancss &lt;span class="pre"&gt;-o&lt;/span&gt; bootstrap.min.css bootstrap.css&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build the posts (&lt;code class="docutils literal"&gt;nikola build&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Admire the fruits of your (well, other people's) labor.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-the-theme"&gt;
&lt;h2&gt;Installing the theme&lt;/h2&gt;
&lt;div class="section" id="the-bootswatch-3-theme"&gt;
&lt;h3&gt;The Bootswatch 3 Theme&lt;/h3&gt;
&lt;p&gt;I already had the bootswatch 3 theme installed, since I was using &lt;em&gt;Spacelab&lt;/em&gt;, but if you don't have it installed this is how to set the base theme:&lt;/p&gt;
&lt;pre class="literal-block"&gt;nikola install_theme bootstrap3&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="the-journal-theme"&gt;
&lt;h3&gt;The Journal Theme&lt;/h3&gt;
&lt;p&gt;Since I want to change the theme to &lt;em&gt;Journal&lt;/em&gt; this is the next step (you can also specify a parent theme, but the default is &lt;code class="docutils literal"&gt;bootstrap3&lt;/code&gt;, which is what I wanted anyway):&lt;/p&gt;
&lt;pre class="literal-block"&gt;nikola bootswatch_theme -s journal&lt;/pre&gt;
&lt;p&gt;This will set up the default bootstrap theme, but you need to re-build the HTML to have it show up on the development-server's web-page (something that I didn't realize initially, causing me to think something was broken).&lt;/p&gt;
&lt;pre class="literal-block"&gt;nikola build&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-the-template"&gt;
&lt;h2&gt;Updating the Template&lt;/h2&gt;
&lt;p&gt;On re-loading the page I found that it mostly worked, but for some reason it looked more orange than I expected. It turns out that the &lt;em&gt;nikola&lt;/em&gt; developer decided that &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;navbar-inverse&lt;/span&gt;&lt;/code&gt; should be the default style for the navbar (instead of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;navbar-default&lt;/span&gt;&lt;/code&gt;) and the section headers are hyperlinks, which in the &lt;em&gt;Journal&lt;/em&gt; theme are orange (by orange I really mean something closer to a creamsicle). Following the instructions in this &lt;a class="reference external" href="https://github.com/getnikola/nikola/issues/2552"&gt;bug report&lt;/a&gt; (which says that it isn't a bug, it's a feature) I copied the base template from the &lt;em&gt;nikola&lt;/em&gt; installation (in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/code&gt;) into the site using a built-in &lt;em&gt;nikola&lt;/em&gt; command.&lt;/p&gt;
&lt;pre class="literal-block"&gt;nikola theme -c base.tmpl&lt;/pre&gt;
&lt;p&gt;This command creates a file (&lt;code class="docutils literal"&gt;themes/custom/templates/base.tmpl&lt;/code&gt;) which you can edit to override the built-in base template. I opened it up and changed the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;navbar-inverse&lt;/span&gt;&lt;/code&gt; CSS class to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;navbar-default&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_219cf4508a484404926a50d95b454363-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-default navbar-static-top"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The I re-built the &lt;em&gt;nikola&lt;/em&gt; posts, and reloaded the page and there it was, the white navbar I wanted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-the-css"&gt;
&lt;h2&gt;Updating the CSS&lt;/h2&gt;
&lt;div class="section" id="fixing-the-headline-color"&gt;
&lt;h3&gt;Fixing the Headline Color&lt;/h3&gt;
&lt;p&gt;"Fixing" the headlines was more straight-forward. When you install the &lt;em&gt;journal&lt;/em&gt; theme it creates a file at &lt;code class="docutils literal"&gt;themes/custom/assets/css/bootstrap.css&lt;/code&gt; (along with a mini-fied version) which you can edit. I decided to leave the anchor-hover value the same but changed the plain anchor color to &lt;code class="docutils literal"&gt;#990033&lt;/code&gt; so that it's more of a blood red than a creamsicle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="changing-the-font"&gt;
&lt;h3&gt;Changing the Font&lt;/h3&gt;
&lt;p&gt;Since I was editing the CSS anyway I made some other changes. First, I changed the text-font to &lt;em&gt;Goudy Bookletter&lt;/em&gt;. It's a little old-fashioned looking, but I've always liked Goudy's fonts. To do this I first added a link to the font:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;a name="rest_code_e700fb84cf924b02b34fb047db0234c8-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://fonts.googleapis.com/css?family=Goudy+Bookletter+1911:400,700"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Then I updated the &lt;em&gt;font-family&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;a name="rest_code_3029ac12f009430da35f6504bd26d068-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3029ac12f009430da35f6504bd26d068-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Goudy Bookletter 1911"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"EB Garamond"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;Georgia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Times New Roman"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3029ac12f009430da35f6504bd26d068-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3029ac12f009430da35f6504bd26d068-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.42857143&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3029ac12f009430da35f6504bd26d068-5"&gt;&lt;/a&gt;  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#777777&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3029ac12f009430da35f6504bd26d068-6"&gt;&lt;/a&gt;  &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3029ac12f009430da35f6504bd26d068-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="fixing-the-headline"&gt;
&lt;h3&gt;Fixing the headline&lt;/h3&gt;
&lt;p&gt;For some reason the title of the site has a CSS rule (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;.navbar-brand&lt;/span&gt; &lt;span class="pre"&gt;#blog-title&lt;/span&gt;&lt;/code&gt;) that sets the top padding to 15 px even though the other elements have a padding of 19.5 px so I overrode it to make it align with the other elementes.&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;a name="rest_code_35d4515d98734191bfa64afce5f5c37c-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;navbar-header&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;navbar-brand&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;blog-title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_35d4515d98734191bfa64afce5f5c37c-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;19.5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_35d4515d98734191bfa64afce5f5c37c-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="minifying"&gt;
&lt;h3&gt;Minifying&lt;/h3&gt;
&lt;p&gt;When I wrote this originally, editing the &lt;code class="docutils literal"&gt;bootstrap.css&lt;/code&gt; file worked, but on one of &lt;a class="reference external" href="https://necromuralist.github.io/data_science/"&gt;my other sites&lt;/a&gt; the CSS file that is being created uses the &lt;code class="docutils literal"&gt;bootstrap.mini.css&lt;/code&gt; file instead. While this seems like it would be preferable, anyway, the change came about unexpectedly - I still don't know why Nikola is doing it on that site and not this one (I guess maybe I'll have to read the manual one of these days). So for that case, after editing the &lt;code class="docutils literal"&gt;bootstrap.css&lt;/code&gt; file you have to minify it (or just make a copy called &lt;code class="docutils literal"&gt;bootstrap.min.css&lt;/code&gt;). To minify it I use &lt;a class="reference external" href="https://github.com/jakubpawlowicz/clean-css-cli"&gt;Clean CSS CLI&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_44c62543d1f545059e1d8b591235eabf-1"&gt;&lt;/a&gt;npm install clean-css-cli -g
&lt;a name="rest_code_44c62543d1f545059e1d8b591235eabf-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; themes/custom_theme/assets/css/
&lt;a name="rest_code_44c62543d1f545059e1d8b591235eabf-3"&gt;&lt;/a&gt;cleancss -o bootstrap.min.css bootstrap.css
&lt;/pre&gt;&lt;p&gt;Where the &lt;code class="docutils literal"&gt;themes&lt;/code&gt; folder is in the root of my nikola repository, next to the &lt;code class="docutils literal"&gt;conf.py&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deploy"&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;p&gt;This isn't really to do with theme-changing, but for completeness, I'll mention it anyway.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_dbc1422a0daf4960acebfd78d9944b67-1"&gt;&lt;/a&gt;nikola github_deploy
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Changing the bootswatch theme isn't as hard as it seemed, in retrospect. You just have to know the basic commands (&lt;code class="docutils literal"&gt;nikola install_theme bootstrap3&lt;/code&gt;, &lt;code class="docutils literal"&gt;nikola bootswatch_theme &lt;span class="pre"&gt;-s&lt;/span&gt; journal&lt;/code&gt;), know that the inverse navbar is the default (and how to change it - &lt;code class="docutils literal"&gt;nikola theme &lt;span class="pre"&gt;-c&lt;/span&gt; base.tmpl&lt;/code&gt;), know how to update the CSS to whatever you want (by editing &lt;code class="docutils literal"&gt;bootstrap.css&lt;/code&gt; and minifying it if necessary), and understand that you have to build the site to see the changes on the development server (&lt;code class="docutils literal"&gt;nikola build&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>how-to</category><category>nikola</category><guid>https://necromuralist.github.io/posts/how-to-change-the-nikola-bootswatch-theme/</guid><pubDate>Sun, 13 Aug 2017 22:58:00 GMT</pubDate></item><item><title>Fatal Python Error</title><link>https://necromuralist.github.io/posts/fatal-platform-error/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
I was going to make my first nikola post in a few months but when I tried the &lt;code&gt;nikola new_post&lt;/code&gt; command I got the following error.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Could not find platform independent libraries &amp;lt;prefix&amp;gt;
Could not find platform dependent libraries &amp;lt;exec_prefix&amp;gt;
Consider setting &lt;span class="nv"&gt;$PYTHONHOME&lt;/span&gt; to &amp;lt;prefix&amp;gt;&lt;span class="o"&gt;[&lt;/span&gt;:&amp;lt;exec_prefix&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
Fatal Python error: Py_Initialize: Unable to get the locale encoding
ImportError: No module named &lt;span class="s1"&gt;'encodings'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I had no idea what this meant so I tried searching the web for the error and found people saying different things about what it meant to them when they encountered it, but the one that pointed the way for me was a &lt;a href="https://github.com/pypa/virtualenv/issues/161"&gt;bug report for virtualenv&lt;/a&gt; where a user reported that he got this error because, it turned out, the Windows version didn't work with symlinks if the window was opened as an administrator.
&lt;/p&gt;

&lt;p&gt;
I'm not using Windows, but when I changed into the directory for my nikola virtualenv installation, &lt;code&gt;ls -l&lt;/code&gt; showed that all my symbolic links were broken. I don't know how it happenedâ¦ maybe something got moved, but the point of this post was to make a note for myself if I see this error again - check the sym-links for the virtualenv installation.
&lt;/p&gt;</description><category>nikola</category><category>python errors</category><guid>https://necromuralist.github.io/posts/fatal-platform-error/</guid><pubDate>Sun, 19 Jun 2016 20:53:31 GMT</pubDate></item><item><title>Testing KaTex</title><link>https://necromuralist.github.io/posts/testing-katex/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a test to see if &lt;a class="reference external" href="https://khan.github.io/KaTeX/"&gt;KaTex&lt;/a&gt; is working.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
f(x) = \pi r^2\\
\end{align*}
&lt;/div&gt;
&lt;p&gt;The answer is no, but mathjax does seem to work.&lt;/p&gt;
&lt;div class="section" id="getting-it-working"&gt;
&lt;h2&gt;Getting it Working&lt;/h2&gt;
&lt;p&gt;Edit the &lt;code class="docutils literal"&gt;conf.py&lt;/code&gt; file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Uncomment the second &lt;code class="docutils literal"&gt;MATHJAX_CONFIG&lt;/code&gt; default (the one with actual content instead of an empty string).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code class="docutils literal"&gt;EXTRA_HEAD_DATA&lt;/code&gt; to the mathjax CDN.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d1c4f86e06f6460bbbb1c5c533ec7215-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_d1c4f86e06f6460bbbb1c5c533ec7215-2"&gt;&lt;/a&gt;&lt;span class="s1"&gt;&amp;lt;script type="text/javascript" async&lt;/span&gt;
&lt;a name="rest_code_d1c4f86e06f6460bbbb1c5c533ec7215-3"&gt;&lt;/a&gt;&lt;span class="s1"&gt;  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d1c4f86e06f6460bbbb1c5c533ec7215-4"&gt;&lt;/a&gt;&lt;span class="s1"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d1c4f86e06f6460bbbb1c5c533ec7215-5"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://getnikola.com/handbook.html#math"&gt;documentation&lt;/a&gt; says that you need to add the &lt;code class="docutils literal"&gt;mathjax&lt;/code&gt; tag to the post, but the &lt;code class="docutils literal"&gt;conf.py&lt;/code&gt; has &lt;code class="docutils literal"&gt;HIDDEN_TAGS = ['mathjax']&lt;/code&gt; which I think makes it work anyway. The documentation also makes no mention of the need for the CDN (or installing the javascript) but nikola doesn't seem to come with &lt;cite&gt;mathjax&lt;/cite&gt; otherwise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>katex</category><category>nikola</category><category>testing</category><guid>https://necromuralist.github.io/posts/testing-katex/</guid><pubDate>Wed, 02 Mar 2016 22:43:41 GMT</pubDate></item><item><title>Converting Nikola from a Blog to a Site</title><link>https://necromuralist.github.io/posts/converting-nikola-from-a-blog-to-a-site/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;These are my notes on converting this site to be a web-site first (with a blog on the side). There is an official page on &lt;a class="reference external" href="https://getnikola.com/creating-a-site-not-a-blog-with-nikola.html"&gt;creating a site instead of a blog&lt;/a&gt;, but I had a little bit of a hard time figuring out what was going on so these are the main points in case I need to do it again.&lt;/p&gt;
&lt;p&gt;In a nutshell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Get rid of the sub-folder argument in the &lt;code class="docutils literal"&gt;PAGES&lt;/code&gt; variable in &lt;code class="docutils literal"&gt;conf.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code class="docutils literal"&gt;INDEX_PATH&lt;/code&gt; to point to the &lt;cite&gt;posts&lt;/cite&gt; sub-folder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an index page for the site.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="conf-py"&gt;
&lt;h2&gt;conf.py&lt;/h2&gt;
&lt;p&gt;The main things to do are to edit the &lt;cite&gt;conf.py&lt;/cite&gt; file so that the pages you create get copied over as the root of the &lt;cite&gt;output&lt;/cite&gt; folder (instead of in a sub-folder called &lt;cite&gt;stories&lt;/cite&gt;) and moving the blog-index down into a sub-folder.&lt;/p&gt;
&lt;div class="section" id="making-pages-the-site"&gt;
&lt;h3&gt;Making 'pages' the Site&lt;/h3&gt;
&lt;p&gt;To make the pages you create the root of the site you need to change the &lt;code class="docutils literal"&gt;PAGES&lt;/code&gt; variable to not have a sub-folder as the target (this is the second-entry in the tuple). So if it originally was:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_95323938db8442d9bd7650b888adebb3-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_95323938db8442d9bd7650b888adebb3-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pages/*.rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"pages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"story.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_95323938db8442d9bd7650b888adebb3-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You would change the second value in the tuple to an empty string:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_1f98bf0a7e2f42a1b791212e78574edb-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_1f98bf0a7e2f42a1b791212e78574edb-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pages/*.rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"story.tmpl"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_1f98bf0a7e2f42a1b791212e78574edb-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now when you build the site (&lt;code class="docutils literal"&gt;nikola build&lt;/code&gt;) the &lt;code class="docutils literal"&gt;output&lt;/code&gt; folder will have your 'stories' at the top-level. This means that when you refer to pages (e.g. in the navigation configuration) you don't add 'pages/' as a prefix anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="moving-the-blog-index"&gt;
&lt;h3&gt;Moving the Blog-index&lt;/h3&gt;
&lt;p&gt;Since Nikola assumes that the blog is your main-page you need to tell it to create the index in a sub-folder by setting the &lt;code class="docutils literal"&gt;INDEX_PATH&lt;/code&gt; to the name of the sub-folder. If, for example, the blog-posts are being put into &lt;code class="docutils literal"&gt;posts&lt;/code&gt;, the setting would be:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d44bb4079c974f36a361f85ea251e70e-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;INDEX_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;
&lt;/pre&gt;&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This was commented out by default so uncomment it and make the change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-home-page"&gt;
&lt;h2&gt;Creating the Home Page&lt;/h2&gt;
&lt;p&gt;At this point if you build the site and navigate to it you'll find that your home-page is now a directory of your &lt;code class="docutils literal"&gt;output&lt;/code&gt; folder. You can navigate to a page by going through the folders, but this is probably not the intended way to get around. The easiest way (that I found) to create the home-page is to create a new-page (&lt;code class="docutils literal"&gt;nikola new_page&lt;/code&gt;) and when prompted for a title, call it &lt;code class="docutils literal"&gt;index&lt;/code&gt;. This will create &lt;code class="docutils literal"&gt;pages/index.rst&lt;/code&gt; which you can edit to become your home page (make sure to change the title if you don't want the page headline to be 'index').&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Some other things might need to be re-done in the &lt;code class="docutils literal"&gt;conf.py&lt;/code&gt; as well, since the folder structure has changed. These are only the basic steps to switch. The &lt;code class="docutils literal"&gt;NAVIGATION_LINKS&lt;/code&gt; in particular may need updating.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>how-to</category><category>nikola</category><guid>https://necromuralist.github.io/posts/converting-nikola-from-a-blog-to-a-site/</guid><pubDate>Wed, 02 Mar 2016 20:53:31 GMT</pubDate></item></channel></rss>