<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about docker)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/docker.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 18 May 2023 07:55:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Cuda, Conda, Docker...ugh</title><link>https://necromuralist.github.io/posts/cuda-conda-dockerugh/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org9d35f4c" class="outline-2"&gt;
&lt;h2 id="org9d35f4c"&gt;The Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9d35f4c"&gt;
&lt;p&gt;
I haven't been doing anything with pytorch recently so I decided to restart by setting up a docker container on my machine with a beefier nvidia card than the machine I had been using. I've learned a little bit more about docker since I built my earlier container so I decided to update the image and found it both easier and harder than I remember it being. It went easier because I knew more or less what I had to do so I knew what to look up. Harder because there's some workarounds that you have to work with that weren't there before, and I decided to stick with &lt;code&gt;conda&lt;/code&gt;, which seems to add an extra layer of difficulty compared to pip and virtualenv when you use docker. But, anyway, enough with the whining, here's the stuff.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I'm doing this on Ubuntu 21.10.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5e1af0a" class="outline-2"&gt;
&lt;h2 id="org5e1af0a"&gt;Nvidia-Container-Toolkit and Ubuntu&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5e1af0a"&gt;
&lt;p&gt;
The first thing you should do is install the &lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker"&gt;nvidia-container-toolkit&lt;/a&gt;. The instructions say to add the repository this way:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
   &amp;amp;&amp;amp; curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
   &amp;amp;&amp;amp; curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This introduces two problems for me. The first is that this assumes you use bash, but I'm using fish so the command doesn't work. This is no big deal since I just looking in the &lt;code&gt;/etc/os-release&lt;/code&gt; file to get the &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;VERSION_ID&lt;/code&gt; and wrote it out.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu21.10/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
But then this introduces the second problem - the second curl fails with the message:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Unsupported distribution!
Check https://nvidia.github.io/nvidia-docker
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It turns out there's an &lt;a href="https://github.com/NVIDIA/nvidia-docker/issues/1574"&gt;open bug report&lt;/a&gt; on GitHub, with a comment that only Long-Term-Support versions are supported. The commenter suggested using 18.04 for some reason, but I went with 20.04 and it seemed to work.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu20.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

sudo apt update
sudo apt install nvidia-container-toolkit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6415ea6" class="outline-2"&gt;
&lt;h2 id="org6415ea6"&gt;The Cuda Image&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6415ea6"&gt;
&lt;p&gt;
Now that I was setup to run the container I ran a test.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm --gpus all nvidia/cuda:11.4.2-cudnn8-devel nvidia-smi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gave me an error, something like &lt;code&gt;Error response from daemon&lt;/code&gt; (I don't remember exactly), which turns out to be the result of a pretty major flaw right now (as noted on the &lt;a href="https://github.com/NVIDIA/libnvidia-container/issues/111"&gt;github issue for it&lt;/a&gt;). One of the commenters &lt;a href="https://github.com/NVIDIA/libnvidia-container/issues/111#issuecomment-932742403"&gt;posted a work-around for it&lt;/a&gt; which seems to work.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4c4afbc" class="outline-3"&gt;
&lt;h3 id="org4c4afbc"&gt;Edit /etc/nvidia-container-runtime/config.toml&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4c4afbc"&gt;
&lt;p&gt;
In the file there's a line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#no-cgroups = false
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Uncomment it and set it to true.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;no-cgroups = true
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Okay, easy-peasy. All fixed, then, right? Well, doing this fix means that you now have to pass in more flags when you run the container. First you need to check what you have.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls /dev | grep nvidia
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then when you run the container you need to pass in most of those things as &lt;code&gt;--device&lt;/code&gt; arguments.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm --gpus all --device /dev/nvidia0 --device /dev/nvidiactl --device /dev/nvidia-modeset --device /dev/nvidia-uvm nvidia/cuda:11.4.2-cudnn8-devel nvidia-smi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You might not need to actually look in &lt;code&gt;/dev&lt;/code&gt; first. I had to because the post on github was referring to a &lt;code&gt;/dev/nvidia1&lt;/code&gt; device, but I don't have one. This appears to work, although it's a bit unwieldy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4ce0c40" class="outline-2"&gt;
&lt;h2 id="org4ce0c40"&gt;Now for Conda&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4ce0c40"&gt;
&lt;p&gt;
This next bit probably shouldn't be registered as a problem, but the last time I tried to run pytorch in docker there was some kind of bug when I installed it with &lt;code&gt;pip&lt;/code&gt; that went away when I installed it with &lt;code&gt;conda&lt;/code&gt; so I decided to stick with cuda, but I also wanted to try and set it up the way I do with virtualenv - cached by docker and run non-root. This turns out to be much harder to do than with virtualenv for some reason. I looked through some posts on StackOverflow and elsewhere and didn't really see any good solutions, but &lt;a href="https://towardsdatascience.com/conda-pip-and-docker-ftw-d64fe638dc45"&gt;this one on Toward Data Science&lt;/a&gt; got close enough.
The way that post suggests is to change the shell that docker uses to &lt;code&gt;bash&lt;/code&gt; and moving the &lt;code&gt;miniconda&lt;/code&gt; install path into the home directory of the user that you want to run it.
&lt;/p&gt;

&lt;p&gt;
I won't bother with all of the &lt;code&gt;Dockerfile&lt;/code&gt;, but the basic changes are:
&lt;/p&gt;

&lt;p&gt;
Change the shell.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SHELL [ "/bin/bash", "--login", "-c" ]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Switch to the user (assuming you added the user and home directory earlier in the docker file) and add an environment file to store the directory in (I don't think you need to use &lt;code&gt;ENV&lt;/code&gt; but the post used it. I'll try &lt;code&gt;ARG&lt;/code&gt; later).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;USER ${USER_NAME}
WORKDIR ${USER_HOME}

ENV CONDA_DIR=${USER_HOME}/miniconda3
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then install miniconda.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ARG MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
ARG SHA256SUM="1ea2f885b4dbc3098662845560bc64271eb17085387a70c2ba3f29fff6f8d52f"
ARG CONDA_VERSION=py39_4.10.3
RUN --mount=type=cache,target=/root/.cache \
    wget "${MINICONDA_URL}" --output-document miniconda.sh --quiet --force-directories --directory-prefix ${CONDA_DIR} &amp;amp;&amp;amp; \
    echo "${SHA256SUM} miniconda.sh" &amp;gt; shasum &amp;amp;&amp;amp; \
    sha256sum --check --status shasum &amp;amp;&amp;amp; \
    /bin/bash miniconda.sh -b -p ${CONDA_DIR} &amp;amp;&amp;amp; \
    rm miniconda.sh shasum

ENV PATH=$CONDA_DIR/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Update conda.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RUN echo ". $CONDA_DIR/etc/profile.d/conda.sh" &amp;gt;&amp;gt; ~/.profile &amp;amp;&amp;amp; \
    conda init bash &amp;amp;&amp;amp; \
    conda update -n base -c defaults conda
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Install the packages. This is where I added the caching to try and reduce the re-downloading of files. I don't really know if this helps a lot, to be truthful, but it's nice to have new things.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RUN --mount=type=cache,target=/root/.cache \
    conda install pytorch torchvision torchaudio cudatoolkit --channel pytorch --yes
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>conda</category><category>cuda</category><category>docker</category><category>howto</category><guid>https://necromuralist.github.io/posts/cuda-conda-dockerugh/</guid><pubDate>Tue, 07 Dec 2021 02:04:16 GMT</pubDate></item><item><title>Building a Jupyter Docker Container</title><link>https://necromuralist.github.io/posts/building-a-jupyter-docker-container/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;This is how I built a docker container to run a jupyter server. The reason why I did it was that I wanted to isolate any non-python dependencies I needed to install, but so far I haven't done any, so this could actually be done more easily using &lt;cite&gt;virtualenv&lt;/cite&gt;, but this is a starting point.&lt;/p&gt;
&lt;section id="the-dockerfile"&gt;
&lt;h2&gt;The Dockerfile&lt;/h2&gt;
&lt;p&gt;This is the configuration for building the docker image.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code dockerfile"&gt;&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-1" name="rest_code_541fa9bd62714c0f90d223e59f639e14-1" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;ubuntu:latest&lt;/span&gt;
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-2" name="rest_code_541fa9bd62714c0f90d223e59f639e14-2" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/code&lt;/span&gt;
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-3" name="rest_code_541fa9bd62714c0f90d223e59f639e14-3" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;upgrade
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-4" name="rest_code_541fa9bd62714c0f90d223e59f639e14-4" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;build-essential&lt;span class="w"&gt; &lt;/span&gt;python-dev
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-5" name="rest_code_541fa9bd62714c0f90d223e59f639e14-5" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;python-distribute&lt;span class="w"&gt; &lt;/span&gt;python-pip
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-6" name="rest_code_541fa9bd62714c0f90d223e59f639e14-6" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;--upgrade
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-7" name="rest_code_541fa9bd62714c0f90d223e59f639e14-7" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt&lt;span class="w"&gt; &lt;/span&gt;/code
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-8" name="rest_code_541fa9bd62714c0f90d223e59f639e14-8" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-9" name="rest_code_541fa9bd62714c0f90d223e59f639e14-9" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/notebooks
&lt;a id="rest_code_541fa9bd62714c0f90d223e59f639e14-10" name="rest_code_541fa9bd62714c0f90d223e59f639e14-10" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_541fa9bd62714c0f90d223e59f639e14-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jupyter&lt;span class="w"&gt; &lt;/span&gt;notebook&lt;span class="w"&gt; &lt;/span&gt;--no-browser&lt;span class="w"&gt; &lt;/span&gt;--ip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0&lt;span class="w"&gt; &lt;/span&gt;--port&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8888&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/notebooks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;FROM&lt;/code&gt; line shows that I'm building my container using an ubuntu image (the latest image). The &lt;code class="docutils literal"&gt;WORKDIR&lt;/code&gt; sets the current working directory so commands that are run will look there for files. The next set of &lt;code class="docutils literal"&gt;RUN&lt;/code&gt; lines just say to update &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/code&gt; and install some basic python packages. The &lt;code class="docutils literal"&gt;ADD&lt;/code&gt; line takes the &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; file in the directory where I'm going to run this and put it in &lt;code class="docutils literal"&gt;/CODE&lt;/code&gt; which I pointed to with the &lt;code class="docutils literal"&gt;WORKDIR&lt;/code&gt; line. The next &lt;code class="docutils literal"&gt;RUN&lt;/code&gt; commands install my python dependencies and make a folder called &lt;code class="docutils literal"&gt;/notebooks&lt;/code&gt; to put the jupyter notebooks in. The last line (&lt;code class="docutils literal"&gt;CMD&lt;/code&gt;) is what will be executed when the container is run.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="building-the-image"&gt;
&lt;h2&gt;Building the Image&lt;/h2&gt;
&lt;p&gt;If the docker-file is stored in a file named &lt;code class="docutils literal"&gt;jupyter.dockerfile&lt;/code&gt; next to the &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; file, both of which are in the directory where I run the build command. To build it (and name the image &lt;code class="docutils literal"&gt;jupyter&lt;/code&gt;) I'd run the command:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_f2e0038923d64306a6af048f725655b3-1" name="rest_code_f2e0038923d64306a6af048f725655b3-1" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_f2e0038923d64306a6af048f725655b3-1"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;jupyter.dockerfile&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;jupyter:latest&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="running-the-server"&gt;
&lt;h2&gt;Running the Server&lt;/h2&gt;
&lt;p&gt;To run the server in the same directory where the notebooks should be stored and using the default port of 8888:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_d0a9f5a703b54353bb2f9156681d1eab-1" name="rest_code_d0a9f5a703b54353bb2f9156681d1eab-1" href="https://necromuralist.github.io/posts/building-a-jupyter-docker-container/#rest_code_d0a9f5a703b54353bb2f9156681d1eab-1"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;jupyter&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8888&lt;/span&gt;:8888&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;:/notebooks&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;jupyter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the server should be reachable at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8888&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;</description><category>docker</category><category>how-to</category><category>jupyter</category><guid>https://necromuralist.github.io/posts/building-a-jupyter-docker-container/</guid><pubDate>Mon, 20 Jun 2016 03:48:21 GMT</pubDate></item><item><title>Linking Two Docker Containers</title><link>https://necromuralist.github.io/posts/linking-two-docker-containers/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;I think this is the deprecated to do it, now that they have &lt;cite&gt;docker connect&lt;/cite&gt;, but it works, so I'll keep the notes.&lt;/p&gt;
&lt;p&gt;My goal was to link a container that I'd set up to run a &lt;cite&gt;Jupyter Notebook&lt;/cite&gt; server to a &lt;cite&gt;Mongo DB&lt;/cite&gt; server. I'll leave out the installation notes and just assume that there's a docker image named &lt;code class="docutils literal"&gt;mongo&lt;/code&gt; for &lt;cite&gt;MongoDB&lt;/cite&gt; and one named &lt;code class="docutils literal"&gt;jupyter&lt;/code&gt; for my &lt;cite&gt;Jupyter&lt;/cite&gt; server.&lt;/p&gt;
&lt;p&gt;First I'll run MongoDB. &lt;cite&gt;MongoDB&lt;/cite&gt; is going to use &lt;code class="docutils literal"&gt;/data/db&lt;/code&gt; to store its data-files so I'm going to mount my &lt;cite&gt;data&lt;/cite&gt; directory there.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_95a66e1b2b4248d2b532fd24855b721b-1" name="rest_code_95a66e1b2b4248d2b532fd24855b721b-1" href="https://necromuralist.github.io/posts/linking-two-docker-containers/#rest_code_95a66e1b2b4248d2b532fd24855b721b-1"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;mongo&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;/data:/data/db&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;mongo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next I'll run the &lt;cite&gt;Jupyter&lt;/cite&gt; container, using the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--link&lt;/span&gt;&lt;/code&gt; option to point it to the &lt;code class="docutils literal"&gt;mongo&lt;/code&gt; container. The jupyter notebook is running on port 8888 and looking for notebooks in the &lt;code class="docutils literal"&gt;/notebooks&lt;/code&gt; directory so I'll mount my current working director there.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_2022d26f4c7846189dc12bd443906285-1" name="rest_code_2022d26f4c7846189dc12bd443906285-1" href="https://necromuralist.github.io/posts/linking-two-docker-containers/#rest_code_2022d26f4c7846189dc12bd443906285-1"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;jupyter&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;:/notebooks&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8888&lt;/span&gt;:8888&lt;span class="w"&gt; &lt;/span&gt;--link&lt;span class="w"&gt; &lt;/span&gt;mongo&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;jupyter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, opening a browser at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8888&lt;/span&gt;&lt;/code&gt; should open up the jupyter-server's home.&lt;/p&gt;</description><category>docker</category><category>how-to</category><guid>https://necromuralist.github.io/posts/linking-two-docker-containers/</guid><pubDate>Mon, 20 Jun 2016 03:31:20 GMT</pubDate></item><item><title>Running Redis in Docker</title><link>https://necromuralist.github.io/posts/running-redis-in-docker/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;These are the quick notes.&lt;/p&gt;
&lt;aside class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Redis uses port 6379 as the default, which is where those ports in the command come from.&lt;/p&gt;
&lt;/aside&gt;
&lt;section id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_78a79b1e2085441bb6e59471fb25c94b-1" name="rest_code_78a79b1e2085441bb6e59471fb25c94b-1" href="https://necromuralist.github.io/posts/running-redis-in-docker/#rest_code_78a79b1e2085441bb6e59471fb25c94b-1"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;redis
&lt;a id="rest_code_78a79b1e2085441bb6e59471fb25c94b-2" name="rest_code_78a79b1e2085441bb6e59471fb25c94b-2" href="https://necromuralist.github.io/posts/running-redis-in-docker/#rest_code_78a79b1e2085441bb6e59471fb25c94b-2"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6379&lt;/span&gt;:6379&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;redis&lt;span class="w"&gt; &lt;/span&gt;redis
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="use-it-with-python-redis"&gt;
&lt;h2&gt;Use it with python-redis&lt;/h2&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_c2385a68d9724c4da1c125db9160f63f-1" name="rest_code_c2385a68d9724c4da1c125db9160f63f-1" href="https://necromuralist.github.io/posts/running-redis-in-docker/#rest_code_c2385a68d9724c4da1c125db9160f63f-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;a id="rest_code_c2385a68d9724c4da1c125db9160f63f-2" name="rest_code_c2385a68d9724c4da1c125db9160f63f-2" href="https://necromuralist.github.io/posts/running-redis-in-docker/#rest_code_c2385a68d9724c4da1c125db9160f63f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c2385a68d9724c4da1c125db9160f63f-3" name="rest_code_c2385a68d9724c4da1c125db9160f63f-3" href="https://necromuralist.github.io/posts/running-redis-in-docker/#rest_code_c2385a68d9724c4da1c125db9160f63f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;client.keys()&lt;/code&gt; is a double-check. The &lt;code class="docutils literal"&gt;client&lt;/code&gt; object won't actually try to connect to the server until you call it.&lt;/p&gt;
&lt;/section&gt;</description><category>docker</category><category>how-to</category><category>redis</category><guid>https://necromuralist.github.io/posts/running-redis-in-docker/</guid><pubDate>Mon, 20 Jun 2016 03:25:26 GMT</pubDate></item><item><title>Running MongoDB With Docker</title><link>https://necromuralist.github.io/posts/running-mongodb-with-docker/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;I am working through O'Reilly's &lt;cite&gt;Data Visualization with Python and JavaScript&lt;/cite&gt; and the chapter on reading and writing data uses MongoDB (among other things) as an example. I've wanted to isolate my exploratory/development software installation as much as possible. With python this is fairly easy (thanks to &lt;cite&gt;virtualenv&lt;/cite&gt;), and &lt;cite&gt;npm&lt;/cite&gt; can make isolating javascript installations easier, but I wanted to try and use Docker to isolate any other things I had to install so this is a first step. It's actuall a second step, since I already have a Redis container, but I didnt' take any notes when I installed it so I don't really remember doing it, and I'm going to extend the use of docker to handle all the intallations I make while reading this book so it's a first-step for this reason, at least.&lt;/p&gt;
&lt;p&gt;Anyway, here's what to do.&lt;/p&gt;
&lt;p&gt;First pull the &lt;cite&gt;mongo&lt;/cite&gt; docker image.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_18a1d738c9cb48d383f6b76838f76011-1" name="rest_code_18a1d738c9cb48d383f6b76838f76011-1" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_18a1d738c9cb48d383f6b76838f76011-1"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;mongo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To check that it's there after everything is done you can run &lt;code class="docutils literal"&gt;docker images&lt;/code&gt; and you should see something like this.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-1" name="rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-1" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-1"&gt;&lt;/a&gt;REPOSITORY&lt;span class="w"&gt;          &lt;/span&gt;TAG&lt;span class="w"&gt;                 &lt;/span&gt;IMAGE&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt;            &lt;/span&gt;CREATED&lt;span class="w"&gt;             &lt;/span&gt;SIZE
&lt;a id="rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-2" name="rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-2" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-2"&gt;&lt;/a&gt;mongo&lt;span class="w"&gt;               &lt;/span&gt;latest&lt;span class="w"&gt;              &lt;/span&gt;282fd552add6&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;days&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;336&lt;/span&gt;.1&lt;span class="w"&gt; &lt;/span&gt;MB
&lt;a id="rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-3" name="rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-3" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_6c3f84e6e0684d4bb4054b1e666fac5f-3"&gt;&lt;/a&gt;redis&lt;span class="w"&gt;               &lt;/span&gt;latest&lt;span class="w"&gt;              &lt;/span&gt;be9c5a746699&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;weeks&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;184&lt;/span&gt;.9&lt;span class="w"&gt; &lt;/span&gt;MB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case I want the connection to Mongo DB to be available so I'm going to bind its local port (27017) to my host. I'm also going mount my local data file in the container so it will save its data my local folder.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_be3e8581561f4efebe37222b684d2284-1" name="rest_code_be3e8581561f4efebe37222b684d2284-1" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_be3e8581561f4efebe37222b684d2284-1"&gt;&lt;/a&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;mongo&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;27017&lt;/span&gt;:27017&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;/data:/data/db&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;mongo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--name&lt;/span&gt;&lt;/code&gt; flag gives the name that you'll see if you run &lt;code class="docutils literal"&gt;docker ps&lt;/code&gt; to see the running containers. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; 27017:27017&lt;/code&gt; makes it available to my host machine via &lt;code class="docutils literal"&gt;localhost:27017&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;$PWD/data:/data/db&lt;/span&gt;&lt;/code&gt; mounts the &lt;code class="docutils literal"&gt;data&lt;/code&gt; folder in the directory where I ran the docker command inside the container at &lt;code class="docutils literal"&gt;/data/db&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/code&gt; says to run it as a daemon. Finally the last argument &lt;code class="docutils literal"&gt;mongo&lt;/code&gt; identifies the image for the container.&lt;/p&gt;
&lt;p&gt;At this point MongoDb is accessible from my host machine, so, using &lt;code class="docutils literal"&gt;pymongo&lt;/code&gt; I can connect to it using something like this.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_9e24edb3b55143fab41cbdf2b0804960-1" name="rest_code_9e24edb3b55143fab41cbdf2b0804960-1" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_9e24edb3b55143fab41cbdf2b0804960-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;
&lt;a id="rest_code_9e24edb3b55143fab41cbdf2b0804960-2" name="rest_code_9e24edb3b55143fab41cbdf2b0804960-2" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_9e24edb3b55143fab41cbdf2b0804960-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_9e24edb3b55143fab41cbdf2b0804960-3" name="rest_code_9e24edb3b55143fab41cbdf2b0804960-3" href="https://necromuralist.github.io/posts/running-mongodb-with-docker/#rest_code_9e24edb3b55143fab41cbdf2b0804960-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that's it.&lt;/p&gt;</description><category>docker</category><category>mongodb</category><guid>https://necromuralist.github.io/posts/running-mongodb-with-docker/</guid><pubDate>Mon, 20 Jun 2016 03:01:17 GMT</pubDate></item></channel></rss>