<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about HowTo)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_howto.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Sat, 12 Feb 2022 23:16:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>pip-tools and pipdeptree</title><link>https://necromuralist.github.io/posts/pip-tools-and-pipdeptree/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orge60b9b8" class="outline-2"&gt;
&lt;h2 id="orge60b9b8"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge60b9b8"&gt;
&lt;p&gt;
I was looking for a way to update python dependencies that I'd installed with &lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; when I stumbled upon &lt;a href="https://github.com/jazzband/pip-tools/"&gt;pip-tools&lt;/a&gt;. I'm not particularly good about keeping everything in sync and up-to-date so I'm hoping that this will make it easier to do and thus more likely that I'll do it. It's been a little while since I first used it and I had to look it up, so these are my notes to my future self.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga226de5" class="outline-2"&gt;
&lt;h2 id="orga226de5"&gt;First pipdeptree&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga226de5"&gt;
&lt;p&gt;
&lt;code&gt;pip-tools&lt;/code&gt; installs a command named &lt;code&gt;pip-compile&lt;/code&gt; which will use either the requirements you put in your &lt;code&gt;setup.py&lt;/code&gt; file or a special file named &lt;code&gt;requirements.in&lt;/code&gt; (if you call it this you don't have to pass in the filename, otherwise you have to tell it where to look). Unless there's only a few requirements I prefer to use a separate file, rather than &lt;code&gt;setup.py&lt;/code&gt;, since it makes it clearer and more likely that I'll keep it up to date. The &lt;code&gt;requirements.in&lt;/code&gt; file is a list of your dependencies but unlike the &lt;code&gt;requirements.txt&lt;/code&gt; file, it doesn't have version numbers, the version numbers are added when you call the &lt;code&gt;pip-compile&lt;/code&gt; command. 
&lt;/p&gt;

&lt;p&gt;
So where does the &lt;code&gt;requirements.in&lt;/code&gt; file come from? You have to make it. &lt;i&gt;But if you're editing things by hand, doesn't this kind of make it less likely you'll maintain it?&lt;/i&gt; Yes, which is where &lt;a href="https://github.com/naiquevin/pipdeptree"&gt;&lt;code&gt;pipdeptree&lt;/code&gt;&lt;/a&gt; comes in. &lt;code&gt;pipdeptree&lt;/code&gt; will list all the python dependencies you installed as well as everything those dependencies pulled in as their dependencies. It's usefull to take a look at how a dependency you didn't directly install got into your virtual environment. You can install it from pypi.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pipdeptree
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here's its help output.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree -h
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
usage: pipdeptree [-h] [-v] [-f] [-a] [-l] [-u] [-w [{silence,suppress,fail}]]
                  [-r] [-p PACKAGES] [-j] [--json-tree]
                  [--graph-output OUTPUT_FORMAT]

Dependency tree of the installed python packages

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  -f, --freeze          Print names so as to write freeze files
  -a, --all             list all deps at top level
  -l, --local-only      If in a virtualenv that has global access do not show
                        globally installed packages
  -u, --user-only       Only show installations in the user site dir
  -w [{silence,suppress,fail}], --warn [{silence,suppress,fail}]
                        Warning control. "suppress" will show warnings but
                        return 0 whether or not they are present. "silence"
                        will not show warnings at all and always return 0.
                        "fail" will show warnings and return 1 if any are
                        present. The default is "suppress".
  -r, --reverse         Shows the dependency tree in the reverse fashion ie.
                        the sub-dependencies are listed with the list of
                        packages that need them under them.
  -p PACKAGES, --packages PACKAGES
                        Comma separated list of select packages to show in the
                        output. If set, --all will be ignored.
  -j, --json            Display dependency tree as json. This will yield "raw"
                        output that may be used by external tools. This option
                        overrides all other options.
  --json-tree           Display dependency tree as json which is nested the
                        same way as the plain text output printed by default.
                        This option overrides all other options (except
                        --json).
  --graph-output OUTPUT_FORMAT
                        Print a dependency graph in the specified output
                        format. Available are all formats supported by
                        GraphViz, e.g.: dot, jpeg, pdf, png, svg
&lt;/pre&gt;

&lt;p&gt;
If you look at the options you can see that there's a &lt;code&gt;--freeze&lt;/code&gt; option, that's what we'll be using. Let's look at some of what that looks like.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
So it looks like the output of &lt;code&gt;pip freeze&lt;/code&gt; except it puts the packages you installed flush-left and then uses indentation to indicate what that package installed. In the example above, I installed &lt;a href="https://www.getnikola.com/handbook.html"&gt;Nikola&lt;/a&gt;, then Nikola installed &lt;a href="http://pydoit.org/"&gt;doit&lt;/a&gt;, and doit installed &lt;a href="https://github.com/cloudpipe/cloudpickle"&gt;cloudpickle&lt;/a&gt; and &lt;a href="https://github.com/seb-m/pyinotify"&gt;pyinotify&lt;/a&gt;. I kind of remember needing to install &lt;code&gt;pyinotify&lt;/code&gt; myself, but maybe &lt;code&gt;pydeptree&lt;/code&gt; caught that it was a dependency that &lt;code&gt;doit&lt;/code&gt; is using. Anyway.
&lt;/p&gt;

&lt;p&gt;
For our &lt;code&gt;requirements.in&lt;/code&gt; file we only want the names, and although there might be a reason to keep the entire tree, I think it makes it easier to understand what I'm using if the file only holds the dependencies at the top-level (the ones that I'm using directly, rather than being a dependency of a dependency). So, we'll use a little &lt;a href="https://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt;. First, since I'm a python-programmer I'm going to give it the &lt;code&gt;-P&lt;/code&gt; flag to use perl escape codes. Next, we want to only match the lines that have alpha-numeric characters as the first character in the line.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;grep&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-P&lt;/code&gt;, &lt;code&gt;--perl-regexp&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Use perl regular expression syntax&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match the beggining of a line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match alpha-numeric character and underscores&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match one or more&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
First, let's see how many total dependencies there are.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
: 160
&lt;/pre&gt;

&lt;p&gt;
So there are 160 dependencies total. How many did I install?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --perl-regexp &lt;span class="s2"&gt;"^\w+"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Out of the 160 only 11 were directly installed by me.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;So we're done, right?&lt;/i&gt; Not yet, we need to get rid of the &lt;code&gt;==&lt;/code&gt; and version numbers. I hadn't known that grep had this feature, since I normally use python instead of grep, but grep has an &lt;code&gt;--only-matching&lt;/code&gt; option that will discard the parts of the line that don't match. 
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;--only-matching&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Only show the parts of the line that match&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --only-matching --perl-regexp &lt;span class="s2"&gt;"^\w+"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you look at the first entry you'll notice it says &lt;code&gt;ghp&lt;/code&gt;, but the actual name of the package is &lt;code&gt;ghp-import&lt;/code&gt;, but the hyphen isn't part of the alpha-numeric set, so we'll have to add it.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;grep&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match one or the entries in the brackets&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep -oP &lt;span class="s2"&gt;"^[\w\-]+"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This looks like what we want, but there's a couple of things that we should take care of that would happen if this were for an installed package.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;there's &lt;a href="https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1635463"&gt;a bug in ubuntu&lt;/a&gt; that causes pip to include &lt;code&gt;pkg-resources&lt;/code&gt;, which isn't something you can install.&lt;/li&gt;
&lt;li&gt;it will add an extra entry for your python egg, something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="example"&gt;
-e git+git@github.com:russell-n/iperflexer.git@65f4d3ca72670591f584efa6fa9bfd64c18a925b#egg=iperflexer
&lt;/pre&gt;

&lt;p&gt;
So we should filter those out.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;--invert-match&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Return lines that don't match&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --only-matching --perl-regexp &lt;span class="s2"&gt;"^[\w\-]+"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep --invert-match &lt;span class="s2"&gt;"\-e\|pkg"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
ghp-import2
graphviz
Nikola
notebook
pip-tools
pipdeptree
virtualfish
watchdog
webassets
wheel
ws4py
&lt;/pre&gt;

&lt;p&gt;
There are probaby other exceptions that have to be added for other installations, but this looks like enough for us. Now we can redirect this to a &lt;code&gt;requirements.in&lt;/code&gt; file and we're ready for &lt;code&gt;pip-tools&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
pipdeptree --freeze | grep --only-matching --perl-regexp "^[\w\-]+" | grep --invert-match "\-e\|pkg" &amp;gt; requirements.in
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org690559b" class="outline-2"&gt;
&lt;h2 id="org690559b"&gt;pip-compile&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org690559b"&gt;
&lt;p&gt;
&lt;code&gt;pip-compile&lt;/code&gt; will read in the &lt;code&gt;requirements.in&lt;/code&gt; file and add the version numbers and can create a &lt;code&gt;requirements.txt&lt;/code&gt; file. It will automatically look for the &lt;code&gt;requirements.in&lt;/code&gt; file or you can explicitly pass in the filename.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file requirements.txt requirements.in
#
argh==0.26.2              # via watchdog
backcall==0.1.0           # via ipython
bleach==2.1.3             # via nbconvert
blinker==1.4              # via nikola
&lt;/pre&gt;

&lt;p&gt;
You'll notice it adds in the dependencies of the dependencies and shows what requries them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org38f08b7" class="outline-2"&gt;
&lt;h2 id="org38f08b7"&gt;Well, that was a lot of work just for that.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org38f08b7"&gt;
&lt;p&gt;
If we stopped at this point we'd have:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;a way to check who installed what using &lt;code&gt;pipdeptree&lt;/code&gt; (as well as a way to plot the dependencies as a graph)&lt;/li&gt;
&lt;li&gt;a way to separate out our dependencies into a separate file (&lt;code&gt;requirements.in&lt;/code&gt;) to make it easier to read&lt;/li&gt;
&lt;li&gt;a way to create our &lt;code&gt;requirements.txt&lt;/code&gt; file using our &lt;code&gt;requirements.in&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I think that's kind of nice already, especially if you end up with a lot of dependencies. Try working with &lt;a href="http://www.sphinx-doc.org/en/master/"&gt;sphinx&lt;/a&gt; and &lt;a href="http://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt; and you'll see things start to explode. But of course, there's always more. 
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org42461a6" class="outline-3"&gt;
&lt;h3 id="org42461a6"&gt;Upgrade&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org42461a6"&gt;
&lt;p&gt;
You can run  &lt;code&gt;pip-compile&lt;/code&gt; with the &lt;code&gt;--upgrade&lt;/code&gt; option to try and update dependencies whenever you want to make sure you have the latest of everything (you can do it per-package too, but nah).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile --upgrade &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file requirements.txt requirements.in
#
argh==0.26.2              # via watchdog
backcall==0.1.0           # via ipython
bleach==2.1.3             # via nbconvert
blinker==1.4              # via nikola
&lt;/pre&gt;

&lt;p&gt;
This will upgrade your installation but not update the &lt;code&gt;requirements.txt&lt;/code&gt; file, so you can test it out and see if everything works before updating the &lt;code&gt;requirements.txt&lt;/code&gt;. If things don't work out, you could reinstall from the &lt;code&gt;requirements.txt&lt;/code&gt; file, but see the next section for another way. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge1733a7" class="outline-3"&gt;
&lt;h3 id="orge1733a7"&gt;Sync&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge1733a7"&gt;
&lt;p&gt;
&lt;code&gt;pip-tools&lt;/code&gt; also installed a command called &lt;code&gt;pip-sync&lt;/code&gt; which will keep you in sync with what is in the requirements file, so as long as &lt;code&gt;requirements.txt&lt;/code&gt; is always a working version, you can sync up with it to avoid problems with changes in any of the dependencies. This is different from the &lt;code&gt;--upgrade&lt;/code&gt; option in that it will only install the exact version in the requirements file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-sync
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Collecting backcall==0.1.0
Collecting bleach==2.1.3
  Using cached https://files.pythonhosted.org/packages/30/b6/a8cffbb9ab4b62b557c22703163735210e9cd857d533740c64e1467d228e/bleach-2.1.3-py2.py3-none-any.whl
Collecting certifi==2018.4.16
  Using cached https://files.pythonhosted.org/packages/7c/e6/92ad559b7192d846975fc916b65f667c7b8c3a32bea7372340bfe9a15fa5/certifi-2018.4.16-py2.py3-none-any.whl
Collecting cloudpickle==0.5.3
  Using cached https://files.pythonhosted.org/packages/e7/bf/60ae7ec1e8c6742d2abbb6819c39a48ee796793bcdb7e1d5e41a3e379ddd/cloudpickle-0.5.3-py2.py3-none-any.whl
Successfully installed backcall-0.1.0 bleach-2.1.3 certifi-2018.4.16 cloudpickle-0.5.3 decorator-4.3.0 doit-0.31.1 ipykernel-4.8.2 ipython-6.4.0 jedi-0.12.0 jupyter-client-5.2.3 logbook-1.4.0 lxml-4.2.1 natsort-5.3.2 nikola-7.8.15 notebook-5.5.0 parso-0.2.1 pexpect-4.6.0 pillow-5.1.0 python-dateutil-2.7.3 send2trash-1.5.0 tornado-5.0.2 virtualenv-16.0.0 virtualfish-1.0.6 wheel-0.31.1 ws4py-0.5.1
&lt;/pre&gt;

&lt;p&gt;
Since I upgraded the installation the &lt;code&gt;requirements.txt&lt;/code&gt; file is now behind the latests versions so by syncing I undid the upgrade. This time I'll upgrade again and save the output.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile --upgrade
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So now the file and my installation should be in sync.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-sync
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
: Everything up-to-date
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf63b61" class="outline-2"&gt;
&lt;h2 id="orgbf63b61"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf63b61"&gt;
&lt;p&gt;
So there you have it, how to keep dependencies synced. The &lt;a href="https://pypi.org/project/pip-tools/"&gt;README&lt;/a&gt; for pip-tools is much briefer, but I thought I'd add a little more detail to the part of it that I plan to use the most.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python programs</category><guid>https://necromuralist.github.io/posts/pip-tools-and-pipdeptree/</guid><pubDate>Sat, 09 Jun 2018 19:52:57 GMT</pubDate></item><item><title>Setting Up the RTL 8812AU Realtek USB Adapter on a Raspberry Pi 3</title><link>https://necromuralist.github.io/posts/setting-up-the-rtl-8812au-realtek-usb-adapter-on-a-raspberry-pi-3/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org215bd05" class="outline-2"&gt;
&lt;h2 id="org215bd05"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org215bd05"&gt;
&lt;p&gt;
I'm trying to set-up a wireless packet monitor (it's something I've long thought might be an interesting source of data, and now I need it for work too). My thought was that I'd set up a raspberry pi to experiment with - I don't think it is powerful enough to work, but it should work just to mess with code, and a distributed system might get some interesting results, but anyway - but when I tried to put my raspberry pi's wireless interface into monitor mode I got an error.
&lt;/p&gt;

&lt;pre class="example"&gt;
iwconfig wlan0 mode monitor
Error for wireless request "Set Mode" (8B06) :
    SET failed on device wlan0 ; Operation not supported.
&lt;/pre&gt;

&lt;p&gt;
Looking around on the web I found &lt;a href="https://www.reddit.com/r/raspberry_pi/comments/4ah4oi/psa_the_raspberry_pi_3s_embedded_wifi_card_does/"&gt;this reddit post&lt;/a&gt; as well as some Stack Overflow posts that said that monitor mode isn't supported on the Raspberry Pi. There is a project called &lt;a href="https://github.com/seemoo-lab/nexmon"&gt;nexmon&lt;/a&gt; that apparently lets up add a firmware patch to enable it, which I'll probably try later, but before I tried that I remembered that I have a Realtek 8812AU USB WiFi adapter that I bought a while ago for an old desktop I had that I wasn't using so I decided to try it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5d816d6" class="outline-2"&gt;
&lt;h2 id="org5d816d6"&gt;What I tried&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5d816d6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcf8093d" class="outline-3"&gt;
&lt;h3 id="orgcf8093d"&gt;Plug-and-Pray&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcf8093d"&gt;
&lt;p&gt;
The first thing I did was to see if it would just work. I plugged the Realtek into the USB port and although &lt;code&gt;lsusb&lt;/code&gt; showed it, &lt;code&gt;iwconfig&lt;/code&gt; didn't show it as an interface. Back to the internet. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgae3d454" class="outline-3"&gt;
&lt;h3 id="orgae3d454"&gt;Github&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgae3d454"&gt;
&lt;p&gt;
Next I found &lt;a href="https://github.com/diederikdehaas/rtl8812AU"&gt;a repository on github&lt;/a&gt; that has the driver for the Realtek set up for linux machines. I downloaded it and followed the instructions to build it - the main thing is to set:
&lt;/p&gt;

&lt;pre class="example"&gt;
CONFIG_PLATFORM_I386_PC = n
CONFIG_PLATFORM_ARM_RPI = y
&lt;/pre&gt;

&lt;p&gt;
in the &lt;code&gt;Makefile&lt;/code&gt; - but when I tried to build it I got this error.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo dkms install -m $DRV_NAME -v $DRV_VERSION

'make' KVER=4.4.38-v7+....(bad exit status: 2)
ERROR (dkms apport): binary package for rtl8812AU: 4.3.20 not found
Error! Bad return status for module build on kernel: 4.4.38-v7+ (armv7l)
Consult /var/lib/dkms/rtl8812AU/4.3.20/build/make.log for more information.
&lt;/pre&gt;

&lt;p&gt;
There was also a message in the &lt;code&gt;make.log&lt;/code&gt; file but I didn't remember to copy it. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3fb0fde" class="outline-2"&gt;
&lt;h2 id="org3fb0fde"&gt;What fixed it&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3fb0fde"&gt;
&lt;p&gt;
The solution was in &lt;a href="https://stackoverflow.com/questions/39775844/how-to-make-dkms-pass-the-right-arch-to-make"&gt;this StackOverflow post&lt;/a&gt; - the &lt;code&gt;make&lt;/code&gt; program is being pointed to a folder named &lt;code&gt;arm7l&lt;/code&gt; (thats 'arm seven ell') but it should actually be pointed to one named &lt;code&gt;arm&lt;/code&gt;. The simple solution is to create an alias with the correct name.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo ln -s /usr/src/linux-headers-4.4.38-v7+/arch/arm/ /usr/src/linux-headers-4.4.38-v7+/arch/armv7l
&lt;/pre&gt;

&lt;p&gt;
This turns out to fix the build problem and after a reboot the network interface showed up.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4245a2f" class="outline-2"&gt;
&lt;h2 id="org4245a2f"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4245a2f"&gt;
&lt;p&gt;
The Raspberry Pi 3 doesn't support monitor mode for its wireless interface out of the box, and while there is a firmware patch to enable it, I chose to use a Realtek RTL 8812AU USB WiFi adapter instead. You need a little bit of extra work to get it going, but it does seem to work. One thing I noticed is that &lt;code&gt;iwconfig&lt;/code&gt; will put it in monitor mode but &lt;code&gt;airmon-ng&lt;/code&gt; doesn't (I haven't figured out why yet). It doesn't report an error, it just doesn't seem to work. Also, &lt;code&gt;iw&lt;/code&gt; always reports the interface as managed, even when it isn'tâ¦ maybe I'll try the firmware patch after all.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>how-to</category><category>rapsberry-pi</category><category>wireless</category><guid>https://necromuralist.github.io/posts/setting-up-the-rtl-8812au-realtek-usb-adapter-on-a-raspberry-pi-3/</guid><pubDate>Sun, 03 Jun 2018 22:57:12 GMT</pubDate></item><item><title>Restructured Text Anonymous Links</title><link>https://necromuralist.github.io/posts/restructured-text-anonymous-links/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;section id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I'm creating an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Annotated_bibliography"&gt;annotated bibliography&lt;/a&gt; using nikola, and added links to the PDFs online so I could download them again if needed. I called them all &lt;cite&gt;PDF Link&lt;/cite&gt; but when I built the web-page I found that there were some restructured text errors in it that looked like this.&lt;/p&gt;
&lt;img alt="backlink_rst_error.png" src="https://necromuralist.github.io/posts/restructured-text-anonymous-links/backlink_rst_error.png"&gt;
&lt;p&gt;This &lt;a class="reference external" href="https://stackoverflow.com/questions/5464627/how-to-have-same-text-in-two-links-with-restructured-text"&gt;stack overflow answer&lt;/a&gt; pointed me to anonymous links (which I had never heard of) to fix the problem.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="named-and-anonymous-links"&gt;
&lt;h2&gt;Named and Anonymous Links&lt;/h2&gt;
&lt;p&gt;The form for hyperlinks that I learned used one underscore:&lt;/p&gt;
&lt;pre class="literal-block"&gt;`some link&amp;lt;http://some-target.com&amp;gt;`_&lt;/pre&gt;
&lt;p&gt;This creates both a hyperlink in the document and a target that other hyperlinks can use. In this case, you can create a link back to this hyperlink somewhere else in the document using this syntax:&lt;/p&gt;
&lt;pre class="literal-block"&gt;`some link`_&lt;/pre&gt;
&lt;p&gt;Unfortunately this means that the text used for the link has to be unique. In order to make multiple hyperlinks with the same text in them, use two underscores:&lt;/p&gt;
&lt;pre class="literal-block"&gt;`some link &amp;lt;http://some-target.com&amp;gt;`__&lt;/pre&gt;
&lt;p&gt;This fixed it for me. Of course now the internal targets are gone as well, but they wouldn't have worked anyway.&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#hyperlink-references"&gt;Restructured Text Hyperlink Documentatation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/section&gt;</description><category>restructuredtext</category><guid>https://necromuralist.github.io/posts/restructured-text-anonymous-links/</guid><pubDate>Tue, 09 Jan 2018 02:06:52 GMT</pubDate></item><item><title>Shell Output With Org-Babel Ipython</title><link>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;One of the nice things about ipython is the ability to run shell commands with &lt;code class="docutils literal"&gt;!&lt;/code&gt;. When you use it in an &lt;a class="reference external" href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; block, though, it will dump the output into a popup rather than in the same emacs org-file. One alternative is to use a shell block instead. I wrote earlier that this requires you to put an echo command in the block to prevent the text going to a pop-up.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-1" name="rest_code_f30e985619494240ad68f83fe9e029fb-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-2" name="rest_code_f30e985619494240ad68f83fe9e029fb-2"&gt;&lt;/a&gt;head Future_Connections.csv
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-3" name="rest_code_f30e985619494240ad68f83fe9e029fb-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-4" name="rest_code_f30e985619494240ad68f83fe9e029fb-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-5" name="rest_code_f30e985619494240ad68f83fe9e029fb-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-6" name="rest_code_f30e985619494240ad68f83fe9e029fb-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-7" name="rest_code_f30e985619494240ad68f83fe9e029fb-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;            &lt;span class="p"&gt;|&lt;/span&gt; Future Connection &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-8" name="rest_code_f30e985619494240ad68f83fe9e029fb-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="m"&gt;840&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-9" name="rest_code_f30e985619494240ad68f83fe9e029fb-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;197&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-10" name="rest_code_f30e985619494240ad68f83fe9e029fb-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;, &lt;span class="m"&gt;979&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-11" name="rest_code_f30e985619494240ad68f83fe9e029fb-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;519&lt;/span&gt;, &lt;span class="m"&gt;872&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-12" name="rest_code_f30e985619494240ad68f83fe9e029fb-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;382&lt;/span&gt;, &lt;span class="m"&gt;423&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-13" name="rest_code_f30e985619494240ad68f83fe9e029fb-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;, &lt;span class="m"&gt;226&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;1&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-14" name="rest_code_f30e985619494240ad68f83fe9e029fb-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;349&lt;/span&gt;, &lt;span class="m"&gt;905&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-15" name="rest_code_f30e985619494240ad68f83fe9e029fb-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;429&lt;/span&gt;, &lt;span class="m"&gt;860&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_f30e985619494240ad68f83fe9e029fb-16" name="rest_code_f30e985619494240ad68f83fe9e029fb-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;309&lt;/span&gt;, &lt;span class="m"&gt;989&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It turns out that there's a similar solution to the ob-ipython popup, only since it's in python you have to use a print this time.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-1" name="rest_code_d899f056aa024992a90a0556ebc23055-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC ipython :session futures :results output&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-2" name="rest_code_d899f056aa024992a90a0556ebc23055-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;Future_Connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-3" name="rest_code_d899f056aa024992a90a0556ebc23055-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-4" name="rest_code_d899f056aa024992a90a0556ebc23055-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-5" name="rest_code_d899f056aa024992a90a0556ebc23055-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-6" name="rest_code_d899f056aa024992a90a0556ebc23055-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-7" name="rest_code_d899f056aa024992a90a0556ebc23055-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+begin_example&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-8" name="rest_code_d899f056aa024992a90a0556ebc23055-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-9" name="rest_code_d899f056aa024992a90a0556ebc23055-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(6, 840)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-10" name="rest_code_d899f056aa024992a90a0556ebc23055-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(4, 197)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-11" name="rest_code_d899f056aa024992a90a0556ebc23055-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(620, 979)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-12" name="rest_code_d899f056aa024992a90a0556ebc23055-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(519, 872)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-13" name="rest_code_d899f056aa024992a90a0556ebc23055-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(382, 423)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-14" name="rest_code_d899f056aa024992a90a0556ebc23055-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(97, 226)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-15" name="rest_code_d899f056aa024992a90a0556ebc23055-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(349, 905)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-16" name="rest_code_d899f056aa024992a90a0556ebc23055-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(429, 860)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-17" name="rest_code_d899f056aa024992a90a0556ebc23055-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(309, 989)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-18" name="rest_code_d899f056aa024992a90a0556ebc23055-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_d899f056aa024992a90a0556ebc23055-19" name="rest_code_d899f056aa024992a90a0556ebc23055-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+end_example&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I actually prefer the shell version, and since this is org-babel it makes more sense to use it, but I forgot about it just now and it took me a little while to figure out how to get the ob-ipython block to work so &lt;strong&gt;*note to future self:&lt;/strong&gt; &lt;em&gt;This is how to make it work, but use a shell block instead.&lt;/em&gt;&lt;/p&gt;</description><category>emacs</category><category>orgmode</category><category>python</category><guid>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</guid><pubDate>Wed, 11 Oct 2017 19:49:19 GMT</pubDate></item><item><title>Org To Jupyter Notebook</title><link>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
I've grown to really like &lt;a href="http://orgmode.org"&gt;org-mode&lt;/a&gt;, particularly with &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt;, but there are times when a real Jupyter notebook is better - if you want to render it on github or use the &lt;code&gt;%matplotlib notebook&lt;/code&gt; feature, for instance. I found a blog post the &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;Kitchin Research Group site&lt;/a&gt; announcing the creation of an exporter and this is some documentation about how to set it up.
&lt;/p&gt;

&lt;div id="outline-container-orgf3cbdff" class="outline-2"&gt;
&lt;h2 id="orgf3cbdff"&gt;Download&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf3cbdff"&gt;
&lt;p&gt;
When I originally set this up it was only available from a link on the blog-post, but it has since been added to a much larger github repository called &lt;a href="https://github.com/jkitchin/scimax"&gt;scimax&lt;/a&gt;. I'm assuming this is where the latest version will be kept. Unfortunately there's no license so I don't think you can fork the repository, even more importantly, I can't get it to work, so skip it for now and grab the old one.
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/.emacs.d
mkdir lisp
wget http://kitchingroup.cheme.cmu.edu/media/ox-ipynb.el
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d250ca" class="outline-2"&gt;
&lt;h2 id="org2d250ca"&gt;Install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2d250ca"&gt;
&lt;p&gt;
Make sure that the lisp folder is in the emacs path by putting this line in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'load-path&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/lisp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Also make sure that it's loaded by putting this in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ox-ipynb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb418548" class="outline-2"&gt;
&lt;h2 id="orgb418548"&gt;Use&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb418548"&gt;
&lt;p&gt;
In your org-mode file use the &lt;code&gt;export-ipython&lt;/code&gt; function to export it to an &lt;code&gt;ipynb&lt;/code&gt; file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;export-ipynb-buffer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that this will only work if you have &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; installed and at least one ipython code block in the org-file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session
print("a")
#+END_SRC
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>orgmode</category><guid>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</guid><pubDate>Fri, 14 Apr 2017 03:00:28 GMT</pubDate></item><item><title>Ubuntu 16.04 and the Brother HL-2140 Printer</title><link>https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org1560936" class="outline-2"&gt;
&lt;h2 id="org1560936"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1560936"&gt;
&lt;p&gt;
I (relatively) recently bought a &lt;a href="https://zareason.com/Limbo-560.html"&gt;ZaReason Limbo Desktop PC&lt;/a&gt; which comes with Ubuntu 16.04. I'm debating whether to update it to 16.10, given that updating broke the USB WiFi adapter I had on my older computer (the USB is recognized but not the WiFi adapter), but, in any case, I wanted to print something using my new computer today and ran into the same problem that I had when I updated my old computer to Ubuntu 14.10 - the default printer driver printed out a bunch of blank pages rather than the page I wanted to print. The last time I solved it by choosing a different model (the &lt;i&gt;HL-2142&lt;/i&gt;) but this time out I found a &lt;a href="http://ubuntuforums.org/showthread.php?t=2231405"&gt;stack overflow post&lt;/a&gt; that suggested using the &lt;b&gt;Brother HL-2140 Foomatic/hl1250 [en]&lt;/b&gt; driver instead. I tried it and it worked for me, so here goes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge188b04" class="outline-2"&gt;
&lt;h2 id="orge188b04"&gt;How To Choose the Correct Printer Driver&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge188b04"&gt;
&lt;p&gt;
First, open &lt;i&gt;Dash&lt;/i&gt; (the windows-key launches it on my keyboard), type in &lt;i&gt;Printers&lt;/i&gt; and click on the icon.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/dash.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
This brings up the &lt;i&gt;printers&lt;/i&gt; dialog. 
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/printers.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Double-click on the &lt;i&gt;HL-2140-series&lt;/i&gt; icon to bring up the &lt;i&gt;Printer Properties&lt;/i&gt; dialog.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/printer_properties.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Click on the &lt;i&gt;Make and Model&lt;/i&gt; "Change" button (the fourth row). Let the program find the drivers and it will bring up the &lt;i&gt;Choose Driver&lt;/i&gt; dialog.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/choose_driver.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Use the &lt;i&gt;Brother (recommended)&lt;/i&gt; option (it should already be selected) and click on the "Forward" button. This brings up the &lt;i&gt;Change Driver&lt;/i&gt; dialog with the &lt;i&gt;postscript&lt;/i&gt; driver chosen (which is the one that does not work for me).
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/change_driver.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Select the &lt;i&gt;hl1250&lt;/i&gt; driver (by clicking on it) and click on the "Forward" button.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/select_driver.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
This will bring up the &lt;i&gt;Existing Settings&lt;/i&gt; dialog. I've tried different options and haven't noticed a difference so I just leave it at whatever the default option is and click "Apply".
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/existing_settings.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
At this point your driver should be updated so click on the "OK" button.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/click_okay.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
If your experience is the same as mine, you will be able to print your documents at this point.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdf94667" class="outline-2"&gt;
&lt;h2 id="orgdf94667"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdf94667"&gt;
&lt;p&gt;
The basic method to get the &lt;i&gt;Brother HL-2140&lt;/i&gt; to print in Ubuntu 16.04 is to select the &lt;i&gt;hl1250&lt;/i&gt; driver instead of the default. Since I only do this when I need to set up a new computer, I alway have to do some googling to remember what to do, so hopefully this will help me save some searching if I ever have to do this again.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>printer</category><category>ubuntu</category><guid>https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/</guid><pubDate>Sat, 25 Feb 2017 23:55:37 GMT</pubDate></item><item><title>Python with Org-Babel</title><link>https://necromuralist.github.io/posts/python-with-org-babel/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org5e9d2d3" class="outline-2"&gt;
&lt;h2 id="org5e9d2d3"&gt;What is this about?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5e9d2d3"&gt;
&lt;p&gt;
This is an initial look at how to use org-babel to create a literate-programming document. In the past I have used jupyter notebooks and pweave to do similar things, with each having a separate role - jupyter notebooks are good for interactive exploration but somewhat less amenable to working with sphinx (which I did with pweave). The hope here is that the org-babel system will provide something more amenable to both. Since you still have to convert the org-files to restructured text files (with pandoc or ox-nikola) it's still not everything I wanted, but hopefully this will make things a little easier
&lt;/p&gt;

&lt;p&gt;
Most of this is stolen from &lt;a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html"&gt;this page&lt;/a&gt; - I'm fairly new to org-babel in general so I'm just walking in other people's footsteps for now.
&lt;/p&gt;

&lt;p&gt;
Also, the inclusion of the org-babel code turned out to be both tedious and aesthetically unsatisfying so I didn't do it as much as I thought I would. The original org-file is &lt;a href="https://raw.githubusercontent.com/necromuralist/necromuralist.github.io/master/posts/python-with-org-babel/index.org"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org052f879" class="outline-2"&gt;
&lt;h2 id="org052f879"&gt;High-Level Module Structure&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org052f879"&gt;
&lt;p&gt;
One nice thing about the org-babel/noweb system is that it has a system that makes it easy to create a template (in this case based on the the module structure from &lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#module-structure"&gt;Code Like A Pythonista&lt;/a&gt;) with parts that we're updating inserted using the noweb syntax. To actually see this I had to include the python code as an org-mode snippet so the syntax highlighting isn't there. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  #+begin_src python :noweb yes :tangle literate_python/literate.py
    """A docstring for the literate.py module"""

    # imports
    import sys
    &amp;lt;&amp;lt;literate-main-imports&amp;gt;&amp;gt;

    # constants

    # exception classes

    # interface funchtions

    # classes


    &amp;lt;&amp;lt;LiterateClass-definition&amp;gt;&amp;gt;

    # internal functions &amp;amp; classes

    &amp;lt;&amp;lt;literate-main&amp;gt;&amp;gt;


    if __name__ == "__main__":
	status = main()
	sys.exit(status)
  #+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is what the final file looks like once the no-web substitutions happen.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="sd"&gt;"""A docstring for the literate.py module"""&lt;/span&gt;

  &lt;span class="c1"&gt;# imports&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;

  &lt;span class="c1"&gt;# constants&lt;/span&gt;

  &lt;span class="c1"&gt;# exception classes&lt;/span&gt;

  &lt;span class="c1"&gt;# interface funchtions&lt;/span&gt;

  &lt;span class="c1"&gt;# classes&lt;/span&gt;


  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="sd"&gt;"""A class to be substituted above&lt;/span&gt;

&lt;span class="sd"&gt;      Parameters&lt;/span&gt;
&lt;span class="sd"&gt;      ----------&lt;/span&gt;

&lt;span class="sd"&gt;      String who: name of user&lt;/span&gt;
&lt;span class="sd"&gt;      """&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Who: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="c1"&gt;# internal functions &amp;amp; classes&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"literate caller"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--who"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			  &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"me"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"who are you?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;
      &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To create the `literate.py` file (and all the other code-files) you see above execute &lt;code&gt;M-x org-babel-tangle&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6c8e24a" class="outline-2"&gt;
&lt;h2 id="org6c8e24a"&gt;LiterateClass&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6c8e24a"&gt;
&lt;p&gt;
This is the class definition that get substituted above. The code block for the definition is named &lt;code&gt;LiterateClass-definition&lt;/code&gt; so the main template will substitute its contents for &lt;code&gt;&amp;lt;&amp;lt;LiterateClass-definition&amp;gt;&amp;gt;&lt;/code&gt; when it gets tangled.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/python-with-org-babel/literate_python/literateclass.png" alt="nil"&gt;
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""A class to be substituted above&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;

&lt;span class="sd"&gt;    String who: name of user&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Who: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d3b98e" class="outline-2"&gt;
&lt;h2 id="org0d3b98e"&gt;Main functions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0d3b98e"&gt;
&lt;p&gt;
The &lt;b&gt;Code Like a Pythonista&lt;/b&gt; template expects that you are creating a command-line executable with a &lt;b&gt;main&lt;/b&gt; entry-point. This section implements that case as an example.
&lt;/p&gt;

&lt;p&gt;
First the &lt;code&gt;&amp;lt;&amp;lt;literate-main-imports&amp;gt;&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now the &lt;code&gt;&amp;lt;&amp;lt;literate-main&amp;gt;&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"literate caller"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--who"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"me"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"who are you?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;
    &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As a quick check we can run the code at the command line to see that it's working (the main block has to be tangled for this to work).
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python literate_python/literate.py --who &lt;span class="s2"&gt;"Not Me"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Who: Not Me
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org06da827" class="outline-2"&gt;
&lt;h2 id="org06da827"&gt;Testing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org06da827"&gt;
&lt;p&gt;
One nice thing about the org-babel infrastructure is that the tests and source can be put in the same org-file, then exported to separate files to be run.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org03d5d68" class="outline-3"&gt;
&lt;h3 id="org03d5d68"&gt;Doctest&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org03d5d68"&gt;
&lt;p&gt;
For the stdout output, doctesting can be a convenient way to check that things are behaving as expected while also providing an explicit example of how to run the command-line interface.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb6752e6" class="outline-4"&gt;
&lt;h4 id="orgb6752e6"&gt;Setting up the cases&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb6752e6"&gt;
&lt;p&gt;
The output of a successful doctest is nothing, which is good for automated tests but less interesting here so I'll make a doctest that passes and one that should fail.
&lt;/p&gt;

&lt;p&gt;
This next section (named &lt;code&gt;literate-doctest&lt;/code&gt;) creates a code snippet that will pass. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;literate_python.literate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Gorgeous George"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;Who&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Gorgeous&lt;/span&gt; &lt;span class="n"&gt;George&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And now here's a test (named &lt;code&gt;literate-bad-doctest&lt;/code&gt;) that will fail.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bad_thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Gorilla Glue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bad_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;Who&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Magilla&lt;/span&gt; &lt;span class="n"&gt;Gorilla&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This next section will include the two doctests and export them to a file so they can be tested. Note that you need an empty line between the tests for both of them to run. Warning - since this file is going to be exported, if you are using &lt;code&gt;nikola&lt;/code&gt; or some other system that assumes all files with a certain file-extension are blog-posts you have to use an extension that won't get picked up (in my case both &lt;code&gt;rst&lt;/code&gt; and &lt;code&gt;txt&lt;/code&gt; were interpreted as blog-posts).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src text :noweb yes :tangle literate_python/test_literate_output.doctest :exports none
&amp;lt;&amp;lt;literate-doctest&amp;gt;&amp;gt;

&amp;lt;&amp;lt;literate-bad-doctest&amp;gt;&amp;gt;
#+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gets tangled into this. Note that the doctests aren't valid python so you can tangle this but not execute it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;literate_python.literate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Gorgeous George"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;Who&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Gorgeous&lt;/span&gt; &lt;span class="n"&gt;George&lt;/span&gt;

&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bad_thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Gorilla Glue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bad_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;Who&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Magilla&lt;/span&gt; &lt;span class="n"&gt;Gorilla&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd8beb92" class="outline-4"&gt;
&lt;h4 id="orgd8beb92"&gt;Running the doctests&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd8beb92"&gt;
&lt;p&gt;
Now we can actually run them with python to see what happens.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m doctest literate_python/test_literate_output.doctest
&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
**********************************************************************
File "literate_python/test_literate_output.doctest", line 9, in test_literate_output.doctest
Failed example:
    bad_thing()
Expected:
    Who: Magilla Gorilla
Got:
    Who: Gorilla Glue
**********************************************************************
1 items had failures:
   1 of   5 in test_literate_output.doctest
***Test Failed*** 1 failures.
&lt;/pre&gt;

&lt;p&gt;
Note that since this returned a non-zero exit code (I think) you need to put &lt;code&gt;true&lt;/code&gt; in the code block or there would be no output.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org66d1185" class="outline-3"&gt;
&lt;h3 id="org66d1185"&gt;PyTest BDD&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org66d1185"&gt;
&lt;p&gt;
While doctests are neat I prefer unit-testing, in particular using Behavior Driven Development (BDD) facilitated in this case by &lt;code&gt;py.test&lt;/code&gt; and &lt;code&gt;pytest_bdd&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org522dae2" class="outline-4"&gt;
&lt;h4 id="org522dae2"&gt;The feature file&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org522dae2"&gt;
&lt;p&gt;
Identifying the code-block with &lt;code&gt;#+begin_src feature&lt;/code&gt; adds some syntax highlighting (if you have feature-mode installed and set-up). This works both when you are in the external editor and in the main org-babel document as well.
&lt;/p&gt;

&lt;p&gt;
To make sure that org-babel recognizes feature mode add this to the &lt;code&gt;init.el&lt;/code&gt; file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'org-src-lang-modes&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"feature"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"feature"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is what is going in the feature file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Feature: Literate Class
Scenario: Creating a literate object
  Given a name
  When a Literate object is created with the name
  Then the literate object has the name
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1f471bf" class="outline-4"&gt;
&lt;h4 id="org1f471bf"&gt;The test file&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1f471bf"&gt;
&lt;p&gt;
This is another file that gets tangled out. In this case it is so that we can run &lt;code&gt;py.test&lt;/code&gt; on it.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;expects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;expects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;equal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytest_bdd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytest_bdd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;scenario&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytest_bdd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytest_bdd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt;

&lt;span class="c1"&gt;# this code&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;literate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;

&lt;span class="n"&gt;FEATURE_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"literate.feature"&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""context object"""&lt;/span&gt;


&lt;span class="nd"&gt;@fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@scenario&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FEATURE_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Creating a literate object"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_constructor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a Literate object is created with the name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiterateClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"the literate object has the name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_object_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org76638a0" class="outline-4"&gt;
&lt;h4 id="org76638a0"&gt;Running the test&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org76638a0"&gt;
&lt;p&gt;
One important thing to note is that this will put an error message in a separate buffer if something goes wrong (like you don't have py.test installed), which in at least some cases makes it look like it failed silently. Unlike with the doctests, no output means something in the setup needs to be fixed, so you should tangle the file and then run it at the command-line to debug what happened.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py.test -v literate_python/testliterate.py
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
============================= test session starts ==============================
platform linux -- Python 3.5.1+, pytest-3.0.5, py-1.4.32, pluggy-0.4.0 -- /home/cronos/.virtualenvs/nikola/bin/python3
cachedir: .cache
rootdir: /home/cronos/projects/nikola/posts, iniimg-url: 
plugins: faker-2.0.0, bdd-2.18.1
collecting ... collected 1 items

literate_python/testliterate.py::test_constructor PASSED

=========================== 1 passed in 0.04 seconds ===========================
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org003b900" class="outline-2"&gt;
&lt;h2 id="org003b900"&gt;Getting This Into Nikola&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org003b900"&gt;
&lt;p&gt;
I tried three ways to get this document into nikola:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;converting to rst with pandoc&lt;/li&gt;
&lt;li&gt;exporting it with &lt;a href="https://github.com/masayuko/ox-nikola"&gt;ox-nikola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using the &lt;a href="https://plugins.getnikola.com/#orgmode"&gt;orgmode&lt;/a&gt; plugin for nikola&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;ox-nikola&lt;/b&gt; worked (as did pandoc), but at the moment I'm trying to use the &lt;b&gt;orgmode&lt;/b&gt; plugin so that I can keep editing this document without having to convert back and forth. This is turning out to be about the same amount of work as using jupyter (and with a steeper learning curve). But I like the folding and navigation that org-mode offers, so I'll stick with it for a bit. I'm just using the default set-up right now. It seems to work. 
&lt;/p&gt;

&lt;p&gt;
The main problem I had initially was the same one I had with jupyter - I'm starting with a file that wasn't generated by the &lt;code&gt;nikola new_post&lt;/code&gt; sub-command so it didn't have the header that &lt;b&gt;nikola&lt;/b&gt; expected but the only error &lt;code&gt;nikola build&lt;/code&gt; reported was an invalid date format. 
&lt;/p&gt;

&lt;p&gt;
This is what needs to be at the top of the org-file for nikola to work with it (or something like it).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; #+BEGIN_COMMENT
.. title: Python with Org-Babel
.. slug: python-with-org-babel
.. date: 2016-12-28 14:12:41 UTC-08:00
.. tags: howto python babel literateprogramming
.. category: how_to
.. link: 
.. description: 
.. type: text
#+END_COMMENT
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The other thing is that the org-mode plugin doesn't seem to copy over the png-files correctly (or at all) so I had to create a &lt;code&gt;files/posts/python-with-org-babel/literate_python&lt;/code&gt; folder and move the UML diagram over there by hand. Lastly, it didn't color the feature file and since there's no intermediate rst-file I don't really know how to fix this. Either I'm going to have to learn a lot more about org-mode than I might want to, or for cases where I want more control over things I'll use &lt;b&gt;ox-nikola&lt;/b&gt; to convert it to rst first and edit it. That kind of wrecks the one-document idea, but I guess it would also give me a reason to re-work and polish things instead of improvising everything.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>babel</category><category>how-to</category><category>literate programming</category><category>python</category><guid>https://necromuralist.github.io/posts/python-with-org-babel/</guid><pubDate>Wed, 28 Dec 2016 22:12:41 GMT</pubDate></item></channel></rss>