<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about Cheat Sheet)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_cheat-sheet.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 13 Feb 2018 20:52:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Org-Babel Cheat Sheet</title><link>https://necromuralist.github.io/posts/org-babel-cheat-sheet/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orgca2f6ff" class="outline-2"&gt;
&lt;h2 id="orgca2f6ff"&gt;Keyboard Shortcuts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgca2f6ff"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb3ce3eb" class="outline-3"&gt;
&lt;h3 id="orgb3ce3eb"&gt;Code Block Shortcuts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb3ce3eb"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Keys&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Command&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C-c C-c&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;org-babel-execute-src-block&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Execute the code in the current block.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C-c&lt;/code&gt; '&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;Open/close edit-buffer with mode set to match the code-block language.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C-c C-v C-z&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;org-babel-switch-to-session&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Open a python/ipython console (only works with &lt;code&gt;:session&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d98a33" class="outline-3"&gt;
&lt;h3 id="org7d98a33"&gt;Buffer-wide Shortcuts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7d98a33"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Keys&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Command&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;&amp;lt;s&lt;/code&gt; Tab&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;Create a code block.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C-c C-v C-b&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;org-babel-execute-buffer&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Execute all code blocks in buffer.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C-c C-v C-f&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;org-babel-tangle-file&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Tangle all blocks marked to &lt;code&gt;:tangle&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;C-c C-v C-t&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;org-babel-tangle&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Seems like an alias for tangle file…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb719b88" class="outline-2"&gt;
&lt;h2 id="orgb719b88"&gt;Code Block Headers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb719b88"&gt;
&lt;p&gt;
This is the subset of headers/header values that I'm interested in right now.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org034d11a" class="outline-3"&gt;
&lt;h3 id="org034d11a"&gt;Code to tangle&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org034d11a"&gt;
&lt;p&gt;
The pattern I use to tangle (create an external code file) is:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;python&lt;/code&gt; as the language (since I'm not using it with an interactive session, no need for ipython)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:noweb tangle&lt;/code&gt; is turned on from &lt;code&gt;init.el&lt;/code&gt; so that I can substitute code defined elsewhere into the block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:tangle &amp;lt;path to file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  #+begin_src python :tangle literate_python/literate.py
    """A docstring for the literate.py module"""

    # imports
    import sys
    &amp;lt;&amp;lt;literate-main-imports&amp;gt;&amp;gt;

    # constants

    # exception classes

    # interface functions

    # classes


    &amp;lt;&amp;lt;LiterateClass-definition&amp;gt;&amp;gt;

    # internal functions &amp;amp; classes

    &amp;lt;&amp;lt;literate-main&amp;gt;&amp;gt;


    if __name__ == "__main__":
	status = main()
	sys.exit(status)
  #+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Since I have &lt;code&gt;:noweb tangle&lt;/code&gt; set, the substitions (e.g. &lt;code&gt;&amp;lt;&amp;lt;literate-main-imports&amp;gt;&amp;gt;&lt;/code&gt;) don't get expanded in HTML/Latex output (although they do when you create the python file). 
&lt;/p&gt;
/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="sd"&gt;"""A docstring for the literate.py module"""&lt;/span&gt;

  &lt;span class="c1"&gt;# imports&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;literate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you want to show the substitutions when exporting use &lt;code&gt;:noweb yes&lt;/code&gt; in the header.
&lt;/p&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="sd"&gt;"""A docstring for the literate.py module"""&lt;/span&gt;

  &lt;span class="c1"&gt;# imports&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org516ff58" class="outline-3"&gt;
&lt;h3 id="org516ff58"&gt;A named section&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org516ff58"&gt;
&lt;p&gt;
The &lt;code&gt;noweb&lt;/code&gt; substitution above (&lt;code&gt;&amp;lt;&amp;lt;literate-main-imports&amp;gt;&amp;gt;&lt;/code&gt;) worked because there was a named-section (defined here) that it could use:
&lt;/p&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  #+name: literate-main-imports
  #+begin_src python
    from argparse import ArgumentParser
  #+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6e8c45f" class="outline-4"&gt;
&lt;h4 id="org6e8c45f"&gt;Update&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6e8c45f"&gt;
&lt;p&gt;
I now prefer to use &lt;code&gt;:noweb-ref&lt;/code&gt; in the header instead of the separate &lt;code&gt;#+name:&lt;/code&gt; block.
&lt;/p&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  #+begin_src python :noweb-ref literate-main-imports
    from argparse import ArgumentParser
  #+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcd6c8da" class="outline-3"&gt;
&lt;h3 id="orgcd6c8da"&gt;Results&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcd6c8da"&gt;
&lt;p&gt;
The &lt;code&gt;:results&lt;/code&gt; header argument declares how to handle what's returned from executing a code block. There are three classes of arguments and you can use up to one of each in the header.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org28adc07" class="outline-4"&gt;
&lt;h4 id="org28adc07"&gt;Result Classes&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org28adc07"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Class&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;collection&lt;/td&gt;
&lt;td class="org-left"&gt;How the results should be collected if there's multiple outputs.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;type&lt;/td&gt;
&lt;td class="org-left"&gt;Declare what type of result the code block will return.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;handling&lt;/td&gt;
&lt;td class="org-left"&gt;How should results be handled.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org24164c0" class="outline-4"&gt;
&lt;h4 id="org24164c0"&gt;Collection Class&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org24164c0"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Option&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;value&lt;/td&gt;
&lt;td class="org-left"&gt;(Default) Uses the value of the last statement in the block (python requires a return statement)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;output&lt;/td&gt;
&lt;td class="org-left"&gt;(&lt;code&gt;:results output&lt;/code&gt;) Collects everything sent to stdout in the block.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc032868" class="outline-4"&gt;
&lt;h4 id="orgc032868"&gt;Type Class&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc032868"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Option&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Example&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;table&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value table&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Return an org-mode table (vector)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;scalar&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value scalar&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Return exactly the value returned (string)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;file&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value file&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Return an org-mode link to a file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;raw&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value raw&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Return as org-mode command&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;html&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value html&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Expect contents for &lt;code&gt;#+begin_html&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;latex&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value latex&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Expect contents for &lt;code&gt;#+begin_latex&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;code&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value code&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Expect contents for &lt;code&gt;#+begin_src&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;pp&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results value pp&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Expect code and pretty-print it&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf9e0809" class="outline-4"&gt;
&lt;h4 id="orgf9e0809"&gt;Handling Class&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf9e0809"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Option&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Example&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;silent&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results output silent&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Don't output in org-mode buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;replace&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results output replace&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;(Default) Overwrite any previous result&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;append&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results output append&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Append output after any previous output&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;prepend&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:results output prepend&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Put output above any previous output&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf841506" class="outline-3"&gt;
&lt;h3 id="orgf841506"&gt;Exports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf841506"&gt;
&lt;p&gt;
This argument tells org-babel what to put in any exported HTML or Latex files.
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Option&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Example&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;code&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:exports code&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;(default) The code in the block will be included in the export.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;results&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:exports results&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;The result of evaluating the code will be included.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;both&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:exports both&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Include &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;results&lt;/code&gt; in the file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;none&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;:exports none&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Don't include anything in the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge9c1e66" class="outline-2"&gt;
&lt;h2 id="orge9c1e66"&gt;Running Tests&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge9c1e66"&gt;
&lt;p&gt;
Say there was another section in the document that tangled a test-file (named &lt;code&gt;testliterate.py&lt;/code&gt;) to test our main source file. Once both are tangled you can run it in the document using &lt;code&gt;sh&lt;/code&gt; as the language. The org-mode documentation shows a more complex version of this which builds a pass-fail table, but that's beyond me right now.
&lt;/p&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   #+name: shell-run-pytest
   #+begin_src sh :results output :exports both
   py.test -v literate_python/testliterate.py
   #+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
============================= test session starts ==============================
platform linux -- Python 3.5.1+, pytest-3.0.5, py-1.4.32, pluggy-0.4.0 -- /home/cronos/.virtualenvs/nikola/bin/python3
cachedir: .cache
rootdir: /home/cronos/projects/nikola/posts, inifile: 
plugins: faker-2.0.0, bdd-2.18.1
collecting ... collected 1 items

literate_python/testliterate.py::test_constructor PASSED

=========================== 1 passed in 0.06 seconds ===========================
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4eb2cbc" class="outline-2"&gt;
&lt;h2 id="org4eb2cbc"&gt;Specific Block Cases&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4eb2cbc"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4c7d388" class="outline-3"&gt;
&lt;h3 id="org4c7d388"&gt;Plant UML&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4c7d388"&gt;
&lt;p&gt;
Besides setting the language to &lt;code&gt;plantuml&lt;/code&gt; you need to specify and output-file path and set &lt;code&gt;:exports results&lt;/code&gt; so that the actual plantuml code won't be in the exported document but the diagram will.
&lt;/p&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src plantuml :file literate_python/literateclass.png :exports results
skinparam monochrome true

LiterateClass : String who
LiterateClass : String ()
#+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5463915" class="outline-3"&gt;
&lt;h3 id="org5463915"&gt;ob-ipython&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5463915"&gt;
&lt;p&gt;
The main thing to remember for ob-ipython is that you need to run it as a &lt;code&gt;:session&lt;/code&gt;. I didn't do it for most of the examples, but I've found since I first wrote this that using named sessions makes it a lot easier to work. Otherwise you might have more than one buffer with an org-babel document and they will be sharing the same &lt;i&gt;ipython&lt;/i&gt; process, which can cause mysterious errors.
&lt;/p&gt;
/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src ipython :session session1
  # python standard library
  import os
#+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
When using &lt;code&gt;pandas&lt;/code&gt; most of the methods produce values, but the &lt;code&gt;info&lt;/code&gt; method instead prints to &lt;code&gt;stdout&lt;/code&gt; so you have to specify this as the &lt;code&gt;:results&lt;/code&gt; or it will popup a separate buffer with the output.
&lt;/p&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+begin_src ipython :session session1 :results output
housing.info()
#+end_src
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
When you create figures, besides making sure that you use the &lt;code&gt;%matplotlib inline&lt;/code&gt; magic, you also need to specify a file path where &lt;i&gt;matplotlib&lt;/i&gt; can save the image.
&lt;/p&gt;

/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session session1 :file "images/ocean_proximity_count.png"
figure = seaborn.countplot(x="ocean_proximity", data=housing)
#+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgad6b9fd" class="outline-2"&gt;
&lt;h2 id="orgad6b9fd"&gt;Set Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgad6b9fd"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7b6ee1f" class="outline-3"&gt;
&lt;h3 id="org7b6ee1f"&gt;Dependencies&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7b6ee1f"&gt;
&lt;p&gt;
I'm using &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; to use jupyter/ipython with org-babel so you have to install it (I used MELPA). In addition you need to install the python dependencies, the main ones being &lt;i&gt;ipython&lt;/i&gt; and &lt;i&gt;jupyter&lt;/i&gt;. Additionally, I use &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;elpy&lt;/a&gt; (also from MELPA) which has its own dependencies. I think the easiest way to check and see what &lt;i&gt;elpy&lt;/i&gt; dependencies you need is to install &lt;i&gt;elpy&lt;/i&gt; (there's two components, an emacs one you install from &lt;i&gt;melpa&lt;/i&gt; and a python component you install from &lt;i&gt;pip&lt;/i&gt;) then run &lt;code&gt;M-x elpy-config&lt;/code&gt; to see what's missing.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org96b5b89" class="outline-3"&gt;
&lt;h3 id="org96b5b89"&gt;init.el&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org96b5b89"&gt;
&lt;p&gt;
Since I mentioned &lt;i&gt;ob-ipython&lt;/i&gt; and &lt;i&gt;elpy&lt;/i&gt; I'll list what I have in my &lt;i&gt;init.el&lt;/i&gt; file for &lt;i&gt;elpy&lt;/i&gt; and &lt;i&gt;org-babel&lt;/i&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org18710f0" class="outline-4"&gt;
&lt;h4 id="org18710f0"&gt;Elpy&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org18710f0"&gt;
/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; elpy&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elpy-enable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;elpy-rpc-backend&lt;/span&gt; &lt;span class="s"&gt;"jedi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eval-after-load&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;python-mode-map&lt;/span&gt; &lt;span class="s"&gt;"\C-cx"&lt;/span&gt; &lt;span class="ss"&gt;'jedi-direx:pop-to-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;elpy-use-ipython&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org42ecb13" class="outline-4"&gt;
&lt;h4 id="org42ecb13"&gt;org-babel&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org42ecb13"&gt;
/home/dogen/.virtualenvs/necromuralist.github.io/bin/python: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; org-babel&lt;/span&gt;
&lt;span class="c1"&gt;;;; syntax-highlighting/editing&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'org-src-lang-modes&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rst"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"rst"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'org-src-lang-modes&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"feature"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"feature"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;;; languages to execute/edit&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-babel-do-load-languages&lt;/span&gt;
 &lt;span class="ss"&gt;'org-babel-load-languages&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;ipython&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;plantuml&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;;; other languages..&lt;/span&gt;
   &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;;; noweb expansion only when you tangle&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-babel-default-header-args&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;:noweb&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"tangle"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assq-delete-all&lt;/span&gt; &lt;span class="nv"&gt;:noweb&lt;/span&gt; &lt;span class="nv"&gt;org-babel-default-header-args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;;; Plant UML diagrams&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-plantuml-jar-path&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"/usr/share/plantuml/plantuml.jar"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;;; execute block evaluation without confirmation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-confirm-babel-evaluate&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

&lt;span class="c1"&gt;;;; display/update images in the buffer after evaluation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-babel-after-execute-hook&lt;/span&gt; &lt;span class="ss"&gt;'org-display-inline-images&lt;/span&gt; &lt;span class="ss"&gt;'append&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge13bf40" class="outline-2"&gt;
&lt;h2 id="orge13bf40"&gt;Integrating with Nikola/Sphinx&lt;/h2&gt;
&lt;/div&gt;</description><category>orgBabel cheatSheet</category><guid>https://necromuralist.github.io/posts/org-babel-cheat-sheet/</guid><pubDate>Thu, 29 Dec 2016 20:30:23 GMT</pubDate></item></channel></rss>