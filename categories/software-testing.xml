<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about Software Testing)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/software-testing.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 14 Jan 2018 22:28:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Function Coverage</title><link>https://necromuralist.github.io/posts/201209function-coverage/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="function-coverage"&gt;&lt;div class="section" id="what-s-the-idea"&gt;&lt;h4&gt;What's the Idea?&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Partition the input domain automatically based on features of the source code.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="how-do-you-measure-success"&gt;&lt;h4&gt;How do you measure success?&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;&lt;cite&gt;Function Coverage&lt;/cite&gt; is successful if every Function in SUT is executed during testing.&lt;/li&gt;&lt;li&gt;&lt;span class="math"&gt;\[Test Coverage Metric \gets \frac{functions covered}{total number of functions}\]&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="what-if-you-get-less-than-100-coverage"&gt;&lt;h4&gt;What if you get less than 100% coverage?&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Re-factor old and create new tests to cover the missing functions&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="what-if-you-can-t-get-100-coverage"&gt;&lt;h4&gt;What if you can't get 100% coverage?&lt;/h4&gt;Two possibilities:&lt;br&gt;&lt;ul class="simple"&gt;&lt;li&gt;The code is dead (never used)&lt;/li&gt;&lt;li&gt;You don't understand the system well enough&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="what-are-the-drawbacks-to-this-method"&gt;&lt;h4&gt;What are the drawbacks to this method?&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Tests are based on code, not requirements -- they can't tell you if you're missing something&lt;/li&gt;&lt;li&gt;100% has a clear meaning, anything less is up to judgement -- &lt;em&gt;what's good enough?&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Most systems are too complex to get 100% Coverage&lt;/li&gt;&lt;li&gt;Just because you've tested a function doesn't mean that you've tested all the code inside of it completely&lt;/li&gt;&lt;/ul&gt;From Udacity's Software Testing Unit 2&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201209function-coverage/</guid><pubDate>Wed, 05 Sep 2012 05:56:00 GMT</pubDate></item><item><title>Mock a File</title><link>https://necromuralist.github.io/posts/201208mock-file/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="mock-a-file"&gt;&lt;div class="section" id="creating-the-readable-mock"&gt;&lt;h4&gt;Creating The Readable Mock&lt;/h4&gt;To mock a file you can use &lt;cite&gt;StringIO&lt;/cite&gt; and an input string. Since the &lt;cite&gt;StringIO&lt;/cite&gt; will only traverse once (like a regular file) it might be convenient to make a mock builder.  &lt;br&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mock_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class="n"&gt;mock_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class="n"&gt;mock_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mock_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="section" id="using-the-mock"&gt;&lt;h4&gt;Using the Mock&lt;/h4&gt;To use the mock you patch the built-in &lt;cite&gt;open&lt;/cite&gt; function.&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;opened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_file()&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__builtin__.open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class="n"&gt;run_tests_here&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="section" id="checking-the-mock"&gt;&lt;h4&gt;Checking the Mock&lt;/h4&gt;To see if the file was opened correctly:&lt;br&gt;&lt;pre class="code python literal-block"&gt;&lt;span class="n"&gt;opened&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r_or_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;To check write calls look at &lt;cite&gt;opened.write.mock_calls&lt;/cite&gt;.&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>Software Testing</category><guid>https://necromuralist.github.io/posts/201208mock-file/</guid><pubDate>Thu, 16 Aug 2012 07:27:00 GMT</pubDate></item><item><title>Types of Testing</title><link>https://necromuralist.github.io/posts/201208types-of-testing/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="types-of-testing"&gt;&lt;div class="section" id="white-box-black-box"&gt;&lt;h4&gt;White-Box, Black-Box&lt;/h4&gt;&lt;strong&gt;White-Box&lt;/strong&gt;: The tester knows details about how the system works. &lt;strong&gt;Black-Box&lt;/strong&gt;: Testing is done purely by knowing the expected inputs and outputs.&lt;/div&gt;&lt;div class="section" id="unit-testing"&gt;&lt;h4&gt;Unit Testing&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Small modules of code are tested in isolation&lt;/li&gt;&lt;li&gt;The goal is to find defects in the internal logic of the code as soon as possible&lt;/li&gt;&lt;li&gt;No pre-conceived patterns of use are assumed (test all possible inputs)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="integration-testing"&gt;&lt;h4&gt;Integration Testing&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Take modules that have already been unit-tested and test them together&lt;/li&gt;&lt;li&gt;The goal is to test the interfaces between modules&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="system-testing"&gt;&lt;h4&gt;System Testing&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Usually Black-Box Testing&lt;/li&gt;&lt;li&gt;Tests if the system as a whole works&lt;/li&gt;&lt;li&gt;Focuses on how it will be used in the most important use-cases&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="differential-testing"&gt;&lt;h4&gt;Differential Testing&lt;/h4&gt;&lt;ol class="arabic simple"&gt;&lt;li&gt;create some input&lt;/li&gt;&lt;li&gt;test 2 different implementations using the same input&lt;/li&gt;&lt;li&gt;Test the outputs of both implementations for differences&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div class="section" id="stress-testing"&gt;&lt;h4&gt;Stress Testing&lt;/h4&gt;The System is tested at or beyond the limits of normal use.&lt;/div&gt;&lt;div class="section" id="random-testing"&gt;&lt;h4&gt;Random Testing&lt;/h4&gt;Inputs are generated at random and fed to the System (e.g. &lt;cite&gt;CrashMe&lt;/cite&gt;).&lt;/div&gt;&lt;div class="section" id="regression-testing"&gt;&lt;h4&gt;Regression Testing&lt;/h4&gt;Inputs that previosly caused the system to fail are tested on the new version.&lt;br&gt;From &lt;a class="reference external" href="http://www.udacity.com/"&gt;Udacity's&lt;/a&gt; &lt;em&gt;Software Testing&lt;/em&gt; course unit 1.&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208types-of-testing/</guid><pubDate>Thu, 09 Aug 2012 04:53:00 GMT</pubDate></item><item><title>Crashme</title><link>https://necromuralist.github.io/posts/201208crashme/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="crashme"&gt;&lt;div class="section" id="problem"&gt;&lt;h4&gt;Problem&lt;/h4&gt;Operating Systems have to handle an open-ended number of bad system-calls without crashing.&lt;/div&gt;&lt;div class="section" id="solution"&gt;&lt;h4&gt;Solution&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Generate random bytes&lt;/li&gt;&lt;li&gt;Turn off system-level exception handling&lt;/li&gt;&lt;li&gt;Run the system using the random bytes as input to system calls&lt;/li&gt;&lt;li&gt;If it crashes, harden the code to handle it&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="trust-boundaries"&gt;&lt;h4&gt;Trust Boundaries&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;These are the interfaces where the user of the code enters input and you have to trust them to enter valid input.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Trust Boundaries&lt;/em&gt; have to be tested with as many inputs outside the domain as possible&lt;/li&gt;&lt;/ul&gt;From &lt;a class="reference external" href="http://www.udacity.com/"&gt;Udacity's&lt;/a&gt; &lt;em&gt;Software Testing&lt;/em&gt; course Unit 1.&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208crashme/</guid><pubDate>Thu, 09 Aug 2012 03:19:00 GMT</pubDate></item><item><title>Non-Functional Inputs</title><link>https://necromuralist.github.io/posts/201208non-functional-inputs/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="non-functional-inputs"&gt;&lt;div class="section" id="problem"&gt;&lt;h4&gt;Problem&lt;/h4&gt;Some things that affect the software are not under the control of your code or any of the libraries you are using.&lt;/div&gt;&lt;div class="section" id="examples"&gt;&lt;h4&gt;Examples&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Context switching between threads&lt;/li&gt;&lt;li&gt;Network errors&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="solution"&gt;&lt;h4&gt;Solution&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Minimize the use of code that relies on these inputs.&lt;/li&gt;&lt;li&gt;If possible, put something between you and the external system and inject faults to test the SUT.&lt;/li&gt;&lt;/ul&gt;From &lt;a class="reference external" href="http://www.udacity.com/"&gt;Udacity's&lt;/a&gt; &lt;em&gt;Software Testing&lt;/em&gt; course Unit I.&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208non-functional-inputs/</guid><pubDate>Thu, 09 Aug 2012 02:15:00 GMT</pubDate></item><item><title>Time-Dependent Problems</title><link>https://necromuralist.github.io/posts/201208time-dependent-problems/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="time-dependent-problems"&gt;&lt;div class="section" id="problem"&gt;&lt;h4&gt;Problem&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;Sometimes the time between events has significance (the SUT behaves differently depending on the timing)&lt;/li&gt;&lt;li&gt;Sometimes race conditions can cause unpredictable behavior&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="symptoms"&gt;&lt;h4&gt;Symptoms&lt;/h4&gt;Look in the code for:&lt;br&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;timeouts&lt;/li&gt;&lt;li&gt;timed sleeps&lt;/li&gt;&lt;li&gt;values or computations that depend on the time&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div class="section" id="how-to-test"&gt;&lt;h4&gt;How To Test&lt;/h4&gt;Generate inputs that are varied in time (i.e. some close together, some not close together).&lt;br&gt;From &lt;a class="reference external" href="http://www.udacity.com/"&gt;Udacity's&lt;/a&gt; &lt;em&gt;Software Testing&lt;/em&gt; Unit 1.&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208time-dependent-problems/</guid><pubDate>Thu, 09 Aug 2012 01:06:00 GMT</pubDate></item><item><title>Fault Injection</title><link>https://necromuralist.github.io/posts/201208fault-injection/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="fault-injection"&gt;&lt;div class="section" id="problem"&gt;&lt;h4&gt;Problem&lt;/h4&gt;You don't have control over external libraries but you need to test how your software handles errors from them.&lt;/div&gt;&lt;div class="section" id="solution"&gt;&lt;h4&gt;Solution&lt;/h4&gt;Create duck-typed substitutes that call the external libraries but sometimes introduce errors. The percentage of errors should be low so that it doesn't interfere with other operations.&lt;br&gt;From &lt;a class="reference external" href="http://www.udacity.com/"&gt;Udacity's&lt;/a&gt; &lt;em&gt;Software Testing&lt;/em&gt; course.&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208fault-injection/</guid><pubDate>Thu, 09 Aug 2012 00:15:00 GMT</pubDate></item><item><title>Specifications and Testing</title><link>https://necromuralist.github.io/posts/201208specifications-and-testing/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="specifications-and-testing"&gt;&lt;div class="section" id="goal"&gt;&lt;h4&gt;Goal&lt;/h4&gt;To treat the software under test as a black box by testing to the Application Programming Interface (API).&lt;/div&gt;&lt;div class="section" id="what-role-does-testing-play-in-the-specification-of-software"&gt;&lt;h4&gt;What role does testing play in the specification of software?&lt;/h4&gt;Part of the job of testing is to help refine the specification by figuring out what acceptable inputs and outputs are.&lt;/div&gt;&lt;div class="section" id="what-are-domains-and-ranges"&gt;&lt;h4&gt;What are Domains and Ranges?&lt;/h4&gt;&lt;strong&gt;Domain&lt;/strong&gt;: the set of possible inputs &lt;strong&gt;Range&lt;/strong&gt;: the set of possible outputs&lt;/div&gt;&lt;div class="section" id="what-are-software-domains-and-ranges"&gt;&lt;h4&gt;What are Software Domains and Ranges?&lt;/h4&gt;Software uses a super-set of the mathematical domains and ranges.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Domain&lt;/strong&gt;: All inputs of the right type (or all inputs) &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Range&lt;/strong&gt;: Union of valid range with a set of exceptions&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="should-you-use-defensive-coding"&gt;&lt;h4&gt;Should You Use Defensive Coding?&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;&lt;i&gt;Defensive Coding&lt;/i&gt; means to validate the input that users give you before proceeding.&lt;/li&gt;&lt;li&gt;Implementing checks for valid input makes the code slow and hard to read&lt;/li&gt;&lt;li&gt;Better to clearly specify the Domain in the documentation and raise an exception if an invalid output is produced.&lt;/li&gt;&lt;/ul&gt;From Udacity's &lt;em&gt;Software Testing&lt;/em&gt; &lt;a class="reference external" href="http://www.udacity.com/wiki/CS258%20Unit%201?course=cs258#specifications&amp;gt;"&gt;Unit&lt;/a&gt; 1.&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208specifications-and-testing/</guid><pubDate>Wed, 08 Aug 2012 05:35:00 GMT</pubDate></item><item><title>More On Assertions</title><link>https://necromuralist.github.io/posts/201208more-on-assertions/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="more-on-assertions"&gt;&lt;div class="section" id="why-use-assertions"&gt;&lt;h4&gt;Why Use Assertions?&lt;/h4&gt;&lt;ol class="arabic simple"&gt;&lt;li&gt;The code becomes self-checking.&lt;/li&gt;&lt;li&gt;The code fails at a location closer to the bug.&lt;/li&gt;&lt;li&gt;If you put assertions near the interfaces between modules, it makes it easier to assign blame.&lt;/li&gt;&lt;li&gt;It creates executable documentation about:&lt;ul&gt;&lt;li&gt;preconditions&lt;/li&gt;&lt;li&gt;invariants&lt;/li&gt;&lt;li&gt;postconditions&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div class="section" id="assertions-in-production-code"&gt;&lt;h4&gt;Assertions In Production Code&lt;/h4&gt;&lt;table border="1" cellspacing="0" class="docutils"&gt;&lt;caption&gt;Production Compilers&lt;/caption&gt;&lt;colgroup&gt;&lt;col width="50%"&gt;&lt;col width="50%"&gt;&lt;/colgroup&gt;&lt;thead valign="bottom"&gt;&lt;tr&gt;&lt;th class="head"&gt;Compiler&lt;/th&gt;&lt;th class="head"&gt;Assertion Count&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td&gt;GCC&lt;/td&gt;&lt;td&gt;~9000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LLVM&lt;/td&gt;&lt;td&gt;~13000&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Total lines of code for LLVM: ~1,400,000. Ratio for LLVM of Assertions to Code:&lt;br&gt;1/110 &lt;/div&gt;&lt;div class="section" id="disabling-assertions"&gt;&lt;h4&gt;Disabling Assertions&lt;/h4&gt;&lt;div class="section" id="advantages"&gt;&lt;h5&gt;Advantages&lt;/h5&gt;&lt;ul class="simple"&gt;&lt;li&gt;Runs faster&lt;/li&gt;&lt;li&gt;Doesn't abort execution on error&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="disadvantages"&gt;&lt;h5&gt;Disadvantages&lt;/h5&gt;&lt;ul class="simple"&gt;&lt;li&gt;If the Assertion accidentally had side-effects, disabling it will change the behavior&lt;/li&gt;&lt;li&gt;Often better to fail early rather than operate incorrectly&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="section" id="conclusion"&gt;&lt;h5&gt;Conclusion&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;&lt;div class="first"&gt;It depends on what you want:&lt;/div&gt;&lt;blockquote&gt;&lt;ul class="simple"&gt;&lt;li&gt;fail early and alert user to problem&lt;/li&gt;&lt;li&gt;keep going and accept risk of incorrect output&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="section" id="when-to-use-assertions"&gt;&lt;h4&gt;When To Use Assertions&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;If you're doing something as critical as the final stages of a rocket landing where aborting could destroy something, it's okay to turn them off.&lt;/li&gt;&lt;li&gt;Otherwise don't&lt;/li&gt;&lt;/ul&gt;From &lt;em&gt;Udacity's Software Testing&lt;/em&gt; &lt;a class="reference external" href="http://www.udacity.com/wiki/CS258%20Unit%201?course=cs258#why-assertions"&gt;Unit 1&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208more-on-assertions/</guid><pubDate>Wed, 08 Aug 2012 03:47:00 GMT</pubDate></item><item><title>A Tester for the Check Rep</title><link>https://necromuralist.github.io/posts/201208a-tester-for-check-rep/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="a-tester-for-the-check-rep"&gt;&lt;pre class="code python literal-block"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;br&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;raises&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;softwaretesting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fixedsizequeue&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="n"&gt;MAXINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxint&lt;/span&gt;&lt;br&gt;&lt;span class="n"&gt;MININT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxint&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestFixedCheckRep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MININT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixedsizequeue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FixedsizeQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class="sd"&gt;"""&lt;br&gt;        Checks if the check_rep fails then resets the q&lt;br&gt;        """&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Testing: {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_representation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Passed: {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_okay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class="sd"&gt;"""&lt;br&gt;        The enqueue takes a single integer and returns True if added.&lt;br&gt;        """&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_representation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class="nd"&gt;@raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_enqueue_wraparound_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class="sd"&gt;"""&lt;br&gt;        The tail should wrap around when it fills&lt;br&gt;        """&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_representation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class="nd"&gt;@raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_dequeue_wraparound_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class="sd"&gt;"""&lt;br&gt;        After emptying the queue, the head should be 0&lt;br&gt;        """&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_representation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_negative_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class="sd"&gt;"""&lt;br&gt;        The properties of the queue should never become negative.&lt;br&gt;        """&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_representation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_negative_offset_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_representation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="n"&gt;value&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_fail_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br&gt;&lt;span class="c"&gt;# end class TestCheckRep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208a-tester-for-check-rep/</guid><pubDate>Tue, 07 Aug 2012 09:05:00 GMT</pubDate></item></channel></rss>