#+BEGIN_COMMENT
.. title: Remote jupyter Sessions With ob-ipython
.. slug: remote-jupyter-sessions-with-ob-ipython
.. date: 2018-11-23 12:24:49 UTC-08:00
.. tags: org-mode,jupyter,programming,python,emacs
.. category: org-mode
.. link: 
.. description: Working with a remote jupyter session in org-mode.
.. type: text
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 1
* Introduction
  These are my notes about trying to use a remote jupyter session in org-mode (with ob-ipython). My main source was [[https://vxlabs.com/2017/11/30/run-code-on-remote-ipython-kernels-with-emacs-and-orgmode/][this blog post]] from vxlabs, and also the [[https://github.com/ipython/ipython/wiki/Cookbook:-Connecting-to-a-remote-kernel-via-ssh][ipython]] instructions for setting up a remote-session. I also referred to the [[https://github.com/gregsexton/ob-ipython#working-with-a-remote-session][ob-ipython notes]] on setting up a remote session, although I didn't really understand everything it said until after I had done it once.
* The Layout
  Both this post and the jupyter server are running on my desktop (Hades) while I'm editing them in emacs on my laptop.

* Setting up the Session
  The steps are:
  - Find out where the JSON file you will need is going to be put on the server
  - Start the server
  - Copy the json file that was created to your client
  - Start an ipython session to connect to the remote session
** Find Out Where the JSON File Will Be
   While ssh'd into the server (and with the appropriate virtual environment running if you need it), enter the command to show the folder where the JSON file will be.

#+BEGIN_SRC bash
jupyter --runtime-dir
#+END_SRC

In my case this is what came out.

#+BEGIN_EXAMPLE
/run/user/1000/jupyter
#+END_EXAMPLE
** Start the Server
   Change into the directory where you want the jupyter server to run and start the ipython kernel.

#+BEGIN_SRC bash
ipython kernel
#+END_SRC

This is what came out for me.

#+BEGIN_EXAMPLE
NOTE: When using the `ipython kernel` entry point, Ctrl-C will not work.

To exit, you will have to explicitly quit this process, by either sending
"quit" from a client, or using Ctrl-\ in UNIX-like environments.

To read more about this, see https://github.com/ipython/ipython/issues/2049


To connect another client to this kernel, use:
    --existing kernel-10181.json

#+END_EXAMPLE
That last line refers to the JSON file that we're going to need on the client side (=kernel-10181.json=).
** Copy the File From the Server To the Client
   Go back to your client (my laptop in this case) and check where your jupyter installation is.

#+BEGIN_SRC bash
jupyter --runtime-dir
#+END_SRC

#+BEGIN_EXAMPLE
/run/user/1000/jupyter
#+END_EXAMPLE

Both my laptop and desktop had the same location, so it's probably the default. Now change into that directory on the client and copy the file from the server.

#+BEGIN_SRC bash
cd /run/user/1000/jupyter
scp Hades:/run/user/1000/jupyter/kernel-10181.json .
#+END_SRC
** Start the Client
   You can run this next command anywhere on the client where you can run jupyter.
#+BEGIN_SRC bash
jupyter console --existing kernel-10181.json --ssh Hades
#+END_SRC

Where =kernel-10181.json= is the files copied from the server and =Hades= is the ssh alias for my server (so it would be =hades@erebus= without the alias).

When you run this command it will open up an ipython prompt that will be connected to the server. This turns out to be more useful than I thought it would be because the prompt that ob-ipython normally opens seems to be broken when I'm connected to the remote client. Maybe there's something else to configure. Anyway, whatever you add to your emacs ob-ipython namespace will be accessible to you in the ipython prompt so you can fiddle with things live in there.

Once you open this it will add another file (=kernel-10181-ssh.json= in this case) that you can use to connect if you want to open up more than ipython prompt for some reason:

#+BEGIN_SRC bash
jupyter console --existing kernel-10181-ssh.json
#+END_SRC

You don't pass in the =--ssh= flag this time. Note that you're still sharing the same jupyter session so all the variables and stuff will show up in the second console as well.

But, more importantly, this second json file is how we can connect while in emacs.
** Use The Session
   To make use of the session you need to pass in the name of the ssh kernel file as the name of the ipython session.

#+BEGIN_SRC org
,#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none

,#+END_SRC
#+END_SRC

Anything you do in a block with that session ID will send the commands to the remote server to be interpreted.

* A Plot
 I'm going to use this example from the [[https://seaborn.pydata.org/examples/structured_heatmap.html][seaborn gallery]] to test out the setup. It might not be obvious from the post itself but the web-server for this post is also on my remote machine so I can tell if it worked by checking the page in a browser (because if it was using an ipython session on my laptop the page wouldn't get the image).

** Imports From PyPi
#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none
import pandas
import seaborn
#+END_SRC

** Plotting Setup
#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none
%matplotlib inline
seaborn.set(style="whitegrid",
            rc={"axes.grid": False,
                "font.family": ["sans-serif"],
                "font.sans-serif": ["Latin Modern Sans", "Lato"],
                "figure.figsize": (13, 13)},
            font_scale=1)
#+END_SRC

Load the brain networks example dataset

#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none
data = seaborn.load_dataset("brain_networks", header=[0, 1, 2], index_col=0)
#+END_SRC

Select a subset of the networks.

#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none
used_networks = [1, 5, 6, 7, 8, 12, 13, 17]
used_columns = (data.columns.get_level_values("network")
                .astype(int)
                .isin(used_networks))
data = data.loc[:, used_columns]
#+END_SRC

Create a categorical palette to identify the networks.

#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none
network_palette = seaborn.husl_palette(8, s=.45)
# I have no idea what the network_lut is.
network_lut = dict(zip(map(str, used_networks), network_palette))
#+END_SRC

Convert the palette to vectors that will be drawn on the side of the matrix.

#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none
networks = data.columns.get_level_values("network")
network_colors = pandas.Series(networks, index=data.columns).map(network_lut)
#+END_SRC

Plot.

#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results raw drawer :ipyfile ../../files/posts/programming/remote-jupyter-sessions-with-ob-ipython/cluster_map.png
cluster = seaborn.clustermap(data.corr(), center=0, cmap="vlag",
                             row_colors=network_colors,
                             col_colors=network_colors,
                             linewidths=.75)
title = cluster.fig.suptitle("Brain Networks")
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[23]:
[[file:../../files/posts/programming/remote-jupyter-sessions-with-ob-ipython/cluster_map.png]]
:END:

[[file:cluster_map.png]]

Besides the ipython shell not working in emacs I also couldn't get it to render images directly in emacs, but they did render on the remote side so I could see the plot in my web-browser.
* One More Thing
  I stumbled over this a couple of times so I thought I should mention that the virtualenv you activate in emacs has to be on your remote machine, so to make it easier you should set it before opening the remote document via tramp. If you try to activate the virtualenv while in tramp it will attempt to use the remote machine's virtualenv. You can see that it's the case in the mini-buffer, but I think being prompted like that made me pick the wrong side. Use the virtualenv on the machine you're working on.
