<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about Python)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Sat, 22 Sep 2018 17:48:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Shell Output With Org-Babel Ipython</title><link>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the nice things about ipython is the ability to run shell commands with &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;. When you use it in an &lt;a class="reference external" href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; block, though, it will dump the output into a popup rather than in the same emacs org-file. One alternative is to use a shell block instead. I wrote earlier that this requires you to put an echo command in the block to prevent the text going to a pop-up.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-2"&gt;&lt;/a&gt;head Future_Connections.csv
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;            &lt;span class="p"&gt;|&lt;/span&gt; Future Connection &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="m"&gt;840&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;197&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;, &lt;span class="m"&gt;979&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;519&lt;/span&gt;, &lt;span class="m"&gt;872&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;382&lt;/span&gt;, &lt;span class="m"&gt;423&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;, &lt;span class="m"&gt;226&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;1&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;349&lt;/span&gt;, &lt;span class="m"&gt;905&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;429&lt;/span&gt;, &lt;span class="m"&gt;860&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_d8f0b8a494584e99bcb7b2bb1c198220-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;309&lt;/span&gt;, &lt;span class="m"&gt;989&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It turns out that there's a similar solution to the ob-ipython popup, only since it's in python you have to use a print this time.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC ipython :session futures :results output&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;Future_Connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+begin_example&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(6, 840)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(4, 197)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(620, 979)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(519, 872)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(382, 423)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(97, 226)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(349, 905)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(429, 860)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(309, 989)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_0c08bf795a344faca20432616f8c9302-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+end_example&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I actually prefer the shell version, and since this is org-babel it makes more sense to use it, but I forgot about it just now and it took me a little while to figure out how to get the ob-ipython block to work so &lt;strong&gt;*note to future self:&lt;/strong&gt; &lt;em&gt;This is how to make it work, but use a shell block instead.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>orgmode</category><category>Python</category><guid>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</guid><pubDate>Wed, 11 Oct 2017 19:49:19 GMT</pubDate></item><item><title>Mock a File</title><link>https://necromuralist.github.io/posts/201208mock-file/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="mock-a-file"&gt;&lt;div class="section" id="creating-the-readable-mock"&gt;&lt;h4&gt;Creating The Readable Mock&lt;/h4&gt;To mock a file you can use &lt;cite&gt;StringIO&lt;/cite&gt; and an input string. Since the &lt;cite&gt;StringIO&lt;/cite&gt; will only traverse once (like a regular file) it might be convenient to make a mock builder.  &lt;br&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mock_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class="n"&gt;mock_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class="n"&gt;mock_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mock_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="section" id="using-the-mock"&gt;&lt;h4&gt;Using the Mock&lt;/h4&gt;To use the mock you patch the built-in &lt;cite&gt;open&lt;/cite&gt; function.&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;opened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_file()&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__builtin__.open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br&gt;    &lt;span class="n"&gt;run_tests_here&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="section" id="checking-the-mock"&gt;&lt;h4&gt;Checking the Mock&lt;/h4&gt;To see if the file was opened correctly:&lt;br&gt;&lt;pre class="code python literal-block"&gt;&lt;span class="n"&gt;opened&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r_or_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;To check write calls look at &lt;cite&gt;opened.write.mock_calls&lt;/cite&gt;.&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>Software Testing</category><guid>https://necromuralist.github.io/posts/201208mock-file/</guid><pubDate>Thu, 16 Aug 2012 07:27:00 GMT</pubDate></item><item><title>A Python Implementation Of the CheckRep</title><link>https://necromuralist.github.io/posts/201208a-python-implementation-of-checkrep/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="document" id="a-python-implementation-of-the-checkrep"&gt;The method was implementated as:&lt;br&gt;&lt;pre class="literal-block"&gt;def check_representation(self):&lt;br&gt;    """&lt;br&gt;    Checks that the internal representation is correct.&lt;br&gt;&lt;br&gt;    :raise: AssertionError if an error is found.&lt;br&gt;    """&lt;br&gt;    for attribute in (self.max, self.head, self.size):&lt;br&gt;        assert attribute &amp;gt;= 0, "{0} shouldn't be negative. ({1})".format(attribute, str(self))&lt;br&gt;    assert ((self.head + self.size) % self.max == self.tail), str(self)&lt;br&gt;    return&lt;br&gt;&lt;/pre&gt;&lt;div class="section" id="notes"&gt;&lt;h4&gt;Notes&lt;/h4&gt;&lt;ul class="simple"&gt;&lt;li&gt;This is for the fixed-size queue used in udacity's &lt;em&gt;Software Testing&lt;/em&gt; class&lt;/li&gt;&lt;li&gt;Since the second assertion checks an equation where the tail can never be negative if all the left-hand terms are positive, the tail isn't checked to see if it's positive&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>Software Testing</category><category>Udacity</category><guid>https://necromuralist.github.io/posts/201208a-python-implementation-of-checkrep/</guid><pubDate>Tue, 07 Aug 2012 09:00:00 GMT</pubDate></item></channel></rss>