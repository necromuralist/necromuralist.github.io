<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about algorithms)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/algorithms.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 04 May 2023 00:33:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Coding Comics: Recursion</title><link>https://necromuralist.github.io/posts/coding-comics-recursion/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#orgd5c10d0"&gt;What Is This?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#orge11fd33"&gt;The Comic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#org927db71"&gt;In English-Ish&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#orgabf12be"&gt;Forward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#org808e623"&gt;Base Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#orge401825"&gt;Backwards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#orgbb2acd1"&gt;The Code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#org1d7e059"&gt;A Person&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#orgc2c1c9f"&gt;The Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-comics-recursion/#org3db6e68"&gt;Check If It Works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd5c10d0" class="outline-2"&gt;
&lt;h2 id="orgd5c10d0"&gt;What Is This?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd5c10d0"&gt;
&lt;p&gt;
This is a re-working of the &lt;a href="https://necromuralist.github.io/posts/coding-strip/"&gt;Coding Strip&lt;/a&gt; Recursion example. Not because I can do it better, but because I've never done one before so stealing their idea seems like an easier way to start. In the original they had a comic showing a character who wants to buy a ticket but there's a long line so she asks the person in front of her how many people are in front of him, and he asks the person in front of him, and so on. They then followed up the comics with some code that translated the comic to a concrete function.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge11fd33" class="outline-2"&gt;
&lt;h2 id="orge11fd33"&gt;The Comic&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge11fd33"&gt;
&lt;p&gt;
(Coming Soon)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org927db71" class="outline-2"&gt;
&lt;h2 id="org927db71"&gt;In English-Ish&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org927db71"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgabf12be" class="outline-3"&gt;
&lt;h3 id="orgabf12be"&gt;Forward&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgabf12be"&gt;
&lt;p&gt;
To find the length of the line, each person asks the person in front how many people are in front of them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org808e623" class="outline-3"&gt;
&lt;h3 id="org808e623"&gt;Base Case&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org808e623"&gt;
&lt;p&gt;
When the person at the front of the line is reached, he reports that there's no one in front of him (zero).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge401825" class="outline-3"&gt;
&lt;h3 id="orge401825"&gt;Backwards&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge401825"&gt;
&lt;p&gt;
Once the front of the line is reached, each person then relays back how many people the person in front reports and adds one to include the person who reported the count until the back of the line is reached.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbb2acd1" class="outline-2"&gt;
&lt;h2 id="orgbb2acd1"&gt;The Code&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbb2acd1"&gt;
&lt;p&gt;
Here's some code to illustrate the idea of asking the person in front of you how many people are in front of them and having that question propagate forward and then have the answer propagate back.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1d7e059" class="outline-3"&gt;
&lt;h3 id="org1d7e059"&gt;A Person&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1d7e059"&gt;
&lt;p&gt;
I originally thought of using a list, but then you'd have to criple the length method… so I'm making a linked list of a sorts, where each person knows the person in front of them.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc2c1c9f" class="outline-3"&gt;
&lt;h3 id="orgc2c1c9f"&gt;The Recursion&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc2c1c9f"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3db6e68" class="outline-3"&gt;
&lt;h3 id="org3db6e68"&gt;Check If It Works&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3db6e68"&gt;
&lt;p&gt;
Now I'll create a line of unknown length so we can check it.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
So at this point we have a line of people of unknown length. Each person only knows the existence of the person in front of them so there's no way to get the length of the line directly, but we can use the recursive function to find out how many people there are.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
Expected: 539, Actual: 539
&lt;/pre&gt;


&lt;p&gt;
Seems to be working.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>algorithms</category><category>coding comics</category><category>comics</category><category>work in progress</category><guid>https://necromuralist.github.io/posts/coding-comics-recursion/</guid><pubDate>Wed, 27 Jan 2021 23:59:39 GMT</pubDate></item><item><title>Memoization and the Fibonacci Sequence</title><link>https://necromuralist.github.io/posts/memoization-and-the-fibonacci-sequence/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/memoization-and-the-fibonacci-sequence/#orgdec8707"&gt;What It Is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/memoization-and-the-fibonacci-sequence/#org2207676"&gt;Recurse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/memoization-and-the-fibonacci-sequence/#org1a50c0d"&gt;Memoize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/memoization-and-the-fibonacci-sequence/#orgf3926bf"&gt;Once Again With Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdec8707" class="outline-2"&gt;
&lt;h2 id="orgdec8707"&gt;What It Is&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdec8707"&gt;
&lt;p&gt;
This is a note on using memoization with recursion - specifically with the generation of a &lt;a href="https://www.wikiwand.com/en/Fibonacci_number"&gt;Fibonacci Number&lt;/a&gt;. The fibonacci numbers form a sequence where
&lt;/p&gt;

&lt;p&gt;
\[
F_0 = 0, F_1 = 1
\]
&lt;/p&gt;

&lt;p&gt;
and then for the rest of the numbers greater than 1
&lt;/p&gt;

&lt;p&gt;
\[
F_n = F_{n-1} + F_{n-2}
\]
&lt;/p&gt;

&lt;p&gt;
So, starting from 0 you get &lt;i&gt;0, 1, 1, 2, 3, 5, 8,&lt;/i&gt; etc.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2207676" class="outline-2"&gt;
&lt;h2 id="org2207676"&gt;Recurse&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2207676"&gt;
&lt;p&gt;
Calculating the sequence is often done with recursion because you can pretty much take the definition and convert it to a function with little translation.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
55
&lt;/pre&gt;


&lt;p&gt;
Remember that &lt;i&gt;n&lt;/i&gt; is the index for number, not the count (the second number in the sequence has index 1).
&lt;/p&gt;

&lt;p&gt;
The problem here is that recursion like this has memory limits and takes a long time.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
2020-11-09 21:11:05,852 graeae.timers.timer start: Started: 2020-11-09 21:11:05.852071
2020-11-09 21:11:50,249 graeae.timers.timer end: Ended: 2020-11-09 21:11:50.249808
2020-11-09 21:11:50,251 graeae.timers.timer end: Elapsed: 0:00:44.397737
40
&lt;/pre&gt;


&lt;p&gt;
Less than a minute might not seem like a big deal, but even pushing it up to 45 makes the wait too long (I gave up and killed the process so I don't know how long it ran). So what's the solution? Let's try &lt;a href="https://www.wikiwand.com/en/Memoization"&gt;memoization&lt;/a&gt;.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1a50c0d" class="outline-2"&gt;
&lt;h2 id="org1a50c0d"&gt;Memoize&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1a50c0d"&gt;
&lt;p&gt;
So, what's memoization? Is it what Elmer Fudd does when he memorizes? No, memoization comes from the latin word &lt;i&gt;memorandum&lt;/i&gt;  which means "to be remembered". What we're going to do is create a cache dictionary that will match arguments to our function call to their outputs. Then if a function call comes in that uses arguments that were used before, we can just grab it from the cache instead of re-doing the calculations.
&lt;/p&gt;

&lt;p&gt;
We're going to use a python decorator from &lt;a href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt; named &lt;code&gt;wraps&lt;/code&gt; that allows you to build a decorator that looks like the original function. It isn't necessary for the decorator to work, but it makes it look more like the original functior passed to the decorator so it's a good practice to use it.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Although it works as a decorator, since we already defined the &lt;code&gt;fibonacci&lt;/code&gt; function we can just pass it to &lt;code&gt;memoize&lt;/code&gt; to add the cache.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Now let's see what happens. 
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
2020-11-10 15:45:08,117 graeae.timers.timer start: Started: 2020-11-10 15:45:08.117332
2020-11-10 15:45:08,118 graeae.timers.timer end: Ended: 2020-11-10 15:45:08.118691
2020-11-10 15:45:08,120 graeae.timers.timer end: Elapsed: 0:00:00.001359
354224848179261915075
&lt;/pre&gt;



&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I originally tried renaming the memoized function, but since the recursive calls go to the original function name, this doesn't produce and improved function. You have to use the same name as you did when you defined the function.
&lt;/p&gt;

&lt;p&gt;
So memoization really helps, even more than you might expect. The reason why is that the first recursion term (&lt;code&gt;fibonacci(n - 1)&lt;/code&gt;) gets evaluated first, so each recursive call goes backwards by one until it hits the base-case where &lt;code&gt;n &amp;lt; 2&lt;/code&gt; and then all the rest of the calls are evaluated, but after one run through the indexes you've already hit all the cases you need for these other calls so rather than making more recursive calls, everything gets pulled from the cache.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf3926bf" class="outline-2"&gt;
&lt;h2 id="orgf3926bf"&gt;Once Again With Python&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf3926bf"&gt;
&lt;p&gt;
As is often the case, when you implement something useful in python you'll find that it's already been implemented, in this case as part of the python standard library.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; in python 3.9 there is a &lt;code&gt;cache&lt;/code&gt; decorator that is the same thing as the &lt;code&gt;lru_cache&lt;/code&gt; with &lt;code&gt;maxsize=None&lt;/code&gt; but I'm running this on python 3.8 right now so I can't use it.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
2020-11-09 21:53:19,405 graeae.timers.timer start: Started: 2020-11-09 21:53:19.405955
2020-11-09 21:53:19,407 graeae.timers.timer end: Ended: 2020-11-09 21:53:19.407891
2020-11-09 21:53:19,409 graeae.timers.timer end: Elapsed: 0:00:00.001936
139423224561697880139724382870407283950070256587697307264108962948325571622863290691557658876222521294125
&lt;/pre&gt;


&lt;p&gt;
Okay, so, I think it works, although I'm not checking the values, the speed seems to be an improvement.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>algorithms</category><category>recursion</category><guid>https://necromuralist.github.io/posts/memoization-and-the-fibonacci-sequence/</guid><pubDate>Tue, 10 Nov 2020 02:32:31 GMT</pubDate></item><item><title>Brute Force Longest Non-Decreasing Sub-Sequence</title><link>https://necromuralist.github.io/posts/brute-force-longest-non-decreasing-sub-sequence/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/brute-force-longest-non-decreasing-sub-sequence/#org6c65160"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/brute-force-longest-non-decreasing-sub-sequence/#org415c72e"&gt;Brute Force&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/brute-force-longest-non-decreasing-sub-sequence/#org54dd81d"&gt;Example One&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/brute-force-longest-non-decreasing-sub-sequence/#org34e8bc3"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6c65160" class="outline-2"&gt;
&lt;h2 id="org6c65160"&gt;The Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6c65160"&gt;
&lt;p&gt;
The problem at hand is that we're given a sequence and we want to find the longest combination we can find in it that is non-decreasing (each element after the first is greater than or equal to the previous element).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org415c72e" class="outline-2"&gt;
&lt;h2 id="org415c72e"&gt;Brute Force&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org415c72e"&gt;
&lt;p&gt;
This will be a brute-force solution using nested for-loops. This will use the &lt;a href="https://necromuralist.github.io/posts/python-itertools-combinations/"&gt;itertools.combinations&lt;/a&gt; function to generate the candidate solutions.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Here's what it's doing.
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;The outer loop counts down from the length of the sequence to zero.&lt;/li&gt;
&lt;li&gt;The inner loop generates combinations of the current length in the outer loop&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;sub_sequence&lt;/code&gt; is in sorted (non-decreasing) order then it is as long or longer than any other non-decreasing sub-sequence so choose it as the longest sub-sequence.&lt;/li&gt;
&lt;/ol&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;

&lt;div id="outline-container-org54dd81d" class="outline-3"&gt;
&lt;h3 id="org54dd81d"&gt;Example One&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org54dd81d"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
(1, 2, 4)
18
&lt;/pre&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org34e8bc3" class="outline-2"&gt;
&lt;h2 id="org34e8bc3"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org34e8bc3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;From &lt;a href="https://necromuralist.github.io/posts/python-algorithms/"&gt;Python Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>algorithms</category><category>python</category><guid>https://necromuralist.github.io/posts/brute-force-longest-non-decreasing-sub-sequence/</guid><pubDate>Tue, 10 Nov 2020 01:32:26 GMT</pubDate></item><item><title>Python Algorithms</title><link>https://necromuralist.github.io/posts/python-algorithms/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org8893416" class="outline-2"&gt;
&lt;h2 id="org8893416"&gt;Citation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8893416"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Hetland ML. Python Algorithms: mastering basic algorithms in the python language. New York, N.Y: Apress; 2010. 316 p. (Expert’s voice in open source).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org725445d" class="outline-2"&gt;
&lt;h2 id="org725445d"&gt;Notes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org725445d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/apress/python-algorithms-14"&gt;GitHub Repository&lt;/a&gt; for code in the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>algorithms</category><category>bibliography</category><category>python</category><guid>https://necromuralist.github.io/posts/python-algorithms/</guid><pubDate>Mon, 09 Nov 2020 23:13:36 GMT</pubDate></item></channel></rss>