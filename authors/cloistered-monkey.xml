<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts by Cloistered Monkey)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/authors/cloistered-monkey.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Mon, 03 Aug 2020 21:14:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Linear Regression and Binary Data</title><link>https://necromuralist.github.io/posts/linear-regression-and-binary-data/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#orgef033e1"&gt;Beginning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#orga15a01c"&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#org84a7073"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#org17df850"&gt;The Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#org8dcd8eb"&gt;Encode the Gender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#orgbfd88e8"&gt;Fit the Regression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#orgce12e79"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/linear-regression-and-binary-data/#orgace7323"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgef033e1" class="outline-2"&gt;
&lt;h2 id="orgef033e1"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgef033e1"&gt;
&lt;p&gt;
I'm going to look at binary classification (two classes) and linear regression. In particular I'm going to use the &lt;a href="https://necromuralist.github.io/posts/bibliography/isl-credit-data-set/"&gt;Credit Card Balance&lt;/a&gt; data set &lt;a href="https://necromuralist.github.io/posts/bibliography/an-introduction-to-statistical-learning/"&gt;(James et al., 2013)&lt;/a&gt; to look at how to interpret the linear model once we encode gender.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga15a01c" class="outline-3"&gt;
&lt;h3 id="orga15a01c"&gt;Set Up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga15a01c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd5eace5" class="outline-4"&gt;
&lt;h4 id="orgd5eace5"&gt;Imports&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd5eace5"&gt;
&lt;p&gt;
First, some importing.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;expects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;be_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hvplot.pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.api&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;statsmodels&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.formula.api&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;statsmodels_formula&lt;/span&gt;

&lt;span class="c1"&gt;# my stuff&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;graeae&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EmbedHoloviews&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CountPercentage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5332e1f" class="outline-4"&gt;
&lt;h4 id="org5332e1f"&gt;The Environment&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5332e1f"&gt;
&lt;p&gt;
This loads the path to files.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".env"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgebf0501" class="outline-4"&gt;
&lt;h4 id="orgebf0501"&gt;Plotting&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgebf0501"&gt;
&lt;p&gt;
This just sets up some convenience values for plotting.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SLUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"linear-regression-and-binary-data"&lt;/span&gt;
&lt;span class="n"&gt;Embed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EmbedHoloviews&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		&lt;span class="n"&gt;folder_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"files/posts/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SLUG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"PLOT_CONSTANTS"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1b1a088" class="outline-4"&gt;
&lt;h4 id="org1b1a088"&gt;The Data&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1b1a088"&gt;
&lt;p&gt;
I downloaded the data from the &lt;a href="https://faculty.marshall.usc.edu/gareth-james/ISL/data.html"&gt;ISL Data Set page&lt;/a&gt; previously so I'll load it here.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"CREDIT"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I passed in the &lt;code&gt;index_col&lt;/code&gt; argument because the first column is a index column with no header, so it just looks goofy if you don't. There are several columns but I only want &lt;code&gt;Gender&lt;/code&gt; and &lt;code&gt;Balance&lt;/code&gt; (the credit card balance).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"Gender"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Balance"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org84a7073" class="outline-2"&gt;
&lt;h2 id="org84a7073"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org84a7073"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org17df850" class="outline-3"&gt;
&lt;h3 id="org17df850"&gt;The Data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org17df850"&gt;
&lt;p&gt;
Now that we have the data we can take a quick look at what's there.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountPercentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Gender"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Gender&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Count&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Percent (%)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Female&lt;/td&gt;
&lt;td class="org-right"&gt;207&lt;/td&gt;
&lt;td class="org-right"&gt;51.75&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Male&lt;/td&gt;
&lt;td class="org-right"&gt;193&lt;/td&gt;
&lt;td class="org-right"&gt;48.25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Our two classes are "Female" and "Male" and they are roughly, but not quite, equal in number. Now I'll look at the balance.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Balance"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Gender"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color_cycle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fontscale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font_scale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Credit Card Balance Distribution by Gender"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"balance_distributions"&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;object type="text/html" data="https://necromuralist.github.io/posts/linear-regression-and-binary-data/balance_distributions.html" style="width:100%" height="800"&gt;
  &lt;p&gt;Figure Missing&lt;/p&gt;
&lt;/object&gt;

&lt;p&gt;
It looks like there are two populations for each gender. The larger one for both genders is centered near 0 and then both genders have a secondary population that carries a balance.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8dcd8eb" class="outline-3"&gt;
&lt;h3 id="org8dcd8eb"&gt;Encode the Gender&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8dcd8eb"&gt;
&lt;p&gt;
Since the &lt;code&gt;Gender&lt;/code&gt; data is categorical we need to create a &lt;i&gt;dummy variable&lt;/i&gt; to encode it. So what I'm going to do is encode males as 0 and females as 1 (because of the nature of binary encoding, we could swap the numbers and it would still work).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Male&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Female&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
1    207
0    193
Name: gender, dtype: int64
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbfd88e8" class="outline-3"&gt;
&lt;h3 id="orgbfd88e8"&gt;Fit the Regression&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbfd88e8"&gt;
&lt;p&gt;
Now I'll fit the model with &lt;a href="https://www.statsmodels.org/stable/index.html"&gt;statsmodels&lt;/a&gt;, which uses r-style arguments (I think it supports regular python arguments too).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;statsmodels_formula&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Balance ~ gender"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
                            OLS Regression Results                            
==============================================================================
Dep. Variable:                Balance   R-squared:                       0.000
Model:                            OLS   Adj. R-squared:                 -0.002
Method:                 Least Squares   F-statistic:                    0.1836
Date:                Sun, 02 Aug 2020   Prob (F-statistic):              0.669
Time:                        16:55:01   Log-Likelihood:                -3019.3
No. Observations:                 400   AIC:                             6043.
Df Residuals:                     398   BIC:                             6051.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P&amp;gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept    509.8031     33.128     15.389      0.000     444.675     574.931
gender        19.7331     46.051      0.429      0.669     -70.801     110.267
==============================================================================
Omnibus:                       28.438   Durbin-Watson:                   1.940
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               27.346
Skew:                           0.583   Prob(JB):                     1.15e-06
Kurtosis:                       2.471   Cond. No.                         2.66
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
&lt;/pre&gt;

&lt;p&gt;
The model is something like this:
&lt;/p&gt;

&lt;p&gt;
\[
 balance = \beta_0 + \beta_1 \times gender
\]
&lt;/p&gt;

&lt;p&gt;
Since we encoded Male as 0 and Female as 1, when the gender is Male the second term drops out and all you have is \(\beta_0\), while for females you have have the full equation. How do you interpret the \(\beta\)s? 
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;\(\beta_0\) is the average balance that males carry&lt;/li&gt;
&lt;li&gt;\(\beta_0 + \beta_1\) is the average balance that females carry&lt;/li&gt;
&lt;li&gt;\(\beta_1\) is the difference between the average balances&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We can check this by comparing the &lt;code&gt;coef&lt;/code&gt; entry in the summary table that I printed. The &lt;code&gt;Intercept&lt;/code&gt; is \(\beta_0\) and &lt;code&gt;gender&lt;/code&gt; is \(\beta_1\)
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;male_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"Male"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Balance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;female_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"Female"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Balance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Average Male Balance: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;male_mean&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.7&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Average Female Balance: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;female_mean&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;0.7&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Average difference: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;female_mean&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;male_mean&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;0.7&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;male_mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intercept&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;be_true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;female_mean&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;male_mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;be_true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Average Male Balance: 509.8031
Average Female Balance: 529.5362
Average difference: 19.73312
&lt;/pre&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Balance"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"prediction"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Balance"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"prediction"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Gender"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			       &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color_cycle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Gender Model"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fontscale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font_scale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Gender Model"&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;object type="text/html" data="https://necromuralist.github.io/posts/linear-regression-and-binary-data/Gender Model.html" style="width:100%" height="800"&gt;
  &lt;p&gt;Figure Missing&lt;/p&gt;
&lt;/object&gt;

&lt;p&gt;
I didn't set up a hypothesis test, but if you look at the p-value (the &lt;code&gt;P&amp;gt;|t|&lt;/code&gt; column in the summary) for &lt;code&gt;gender&lt;/code&gt; you can see that it's much larger than 0.05 or whatever level you would normally choose, so it's probable that &lt;code&gt;gender&lt;/code&gt; isn't significant, so the average balance for both genders is really the same, given the deviation, but this is just about interpreting the coefficients, not deciding the validity of this particular model.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgce12e79" class="outline-2"&gt;
&lt;h2 id="orgce12e79"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgce12e79"&gt;
&lt;p&gt;
So there you have it. If you have the specialized case of binary categorical data you can convert the category to &lt;i&gt;dummy variables&lt;/i&gt; and then fit a linear regression to it. If you encode the values as &lt;i&gt;0&lt;/i&gt; and &lt;i&gt;1&lt;/i&gt; then the &lt;i&gt;y-intercept&lt;/i&gt; will give you the average output value for the category set to 0 and the &lt;i&gt;slope&lt;/i&gt; will give you the difference between the average outputs for the categories. If you use different dummy variables the meanings will change slightly, although you will still be inferring things about the averages. Why is this interesting - predicting the mean for each category?
&lt;/p&gt;

&lt;p&gt;
Logistic regression also relies on dummy variables for categorical encodings and this shows a preliminary step that helps us:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;encode the dummy variables&lt;/li&gt;
&lt;li&gt;build a linear model using statsmodels&lt;/li&gt;
&lt;li&gt;view summary information about the model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I didn't emphasize it, but the p-value for the f-statistic might be valuable when deciding whether the categorical data is different enough to use as a feature.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgace7323" class="outline-2"&gt;
&lt;h2 id="orgace7323"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgace7323"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/an-introduction-to-statistical-learning/"&gt;An Introduction To Statistical Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/isl-credit-data-set/"&gt;ISL Credit Data Set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>categorical data</category><category>data</category><category>dummy variables</category><category>linear regression</category><category>slipnote</category><guid>https://necromuralist.github.io/posts/linear-regression-and-binary-data/</guid><pubDate>Sun, 02 Aug 2020 00:31:46 GMT</pubDate></item><item><title>Step One: Get the Behavior</title><link>https://necromuralist.github.io/posts/step-one-get-the-behavior/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org7eba804" class="outline-2"&gt;
&lt;h2 id="org7eba804"&gt;Note&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7eba804"&gt;
&lt;p&gt;
The first step of Clicker Training is "Get your rabbit to do what you want it to do", which seems a little ambiguous when you see it on the list, but it breaks down into four basic categories.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb89c143" class="outline-3"&gt;
&lt;h3 id="orgb89c143"&gt;Capture Something She Does on Her Own&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb89c143"&gt;
&lt;p&gt;
If you see your rabbit do something that she naturally does, like sit up or come to you at certain times, then click and reward it so you can build it up as something she'll do on cue.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org42c476d" class="outline-3"&gt;
&lt;h3 id="org42c476d"&gt;Lure With Food&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org42c476d"&gt;
&lt;p&gt;
If your rabbit will take food from your hand you can teach her to go places by having her follow your hand with food in it, although the next category - &lt;i&gt;Follow a Target&lt;/i&gt; - is a preferable way to do this.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org21741b6" class="outline-3"&gt;
&lt;h3 id="org21741b6"&gt;Follow a Target&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org21741b6"&gt;
&lt;p&gt;
Create a target (like a ping-pong ball on the end of a stick) and teach your rabbit to follow it.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Start by putting it near her and clicking when she touches it with her nose or mouth&lt;/li&gt;
&lt;li&gt;Extend it slowly by moving it away from her and rewarding her when she follows it&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgff19626" class="outline-3"&gt;
&lt;h3 id="orgff19626"&gt;Shaping&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgff19626"&gt;
&lt;p&gt;
The target training follows the &lt;i&gt;shaping&lt;/i&gt; pattern, wherein you start by rewarding anything that sort of looks like what you want her to do - like just looking at the target when you show it to her, then progressively extending the behavior needed until it's the one that you want. For example:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;look at the target&lt;/li&gt;
&lt;li&gt;touch the target&lt;/li&gt;
&lt;li&gt;follow the target a little&lt;/li&gt;
&lt;li&gt;follow the target further&lt;/li&gt;
&lt;li&gt;follow the target into her carrier&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6ab23d1" class="outline-2"&gt;
&lt;h2 id="org6ab23d1"&gt;Source&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6ab23d1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/clicking-with-your-rabbit/"&gt;Clicking With Your Rabbit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>clicker training</category><category>rabbit</category><category>slipnote</category><guid>https://necromuralist.github.io/posts/step-one-get-the-behavior/</guid><pubDate>Fri, 31 Jul 2020 22:41:00 GMT</pubDate></item><item><title>Twitter Sentiment Classification Using Distant Supervison</title><link>https://necromuralist.github.io/posts/twitter-sentiment-classification-using-distant-supervison/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
This was a project report that looked at using emoticons to create a labeled data set for tweets.
&lt;/p&gt;

&lt;div id="outline-container-orge595eb1" class="outline-2"&gt;
&lt;h2 id="orge595eb1"&gt;About the Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge595eb1"&gt;
&lt;p&gt;
The authors noted that tweets are different from many other sources used for sentiment analysis - things like movie reviews - in that:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;they are character limited (140 characters at the time of the paper, it has since doubled)&lt;/li&gt;
&lt;li&gt;there is a huge amount of data to pull - and it is continuously being generated&lt;/li&gt;
&lt;li&gt;there is an unusual amount of slang and non-normal spelling&lt;/li&gt;
&lt;li&gt;it isn't subject specific - you can filter using the API, but twitter itself isn't a single-subject service&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7653134" class="outline-2"&gt;
&lt;h2 id="org7653134"&gt;Using Emoticons as Labels&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7653134"&gt;
&lt;p&gt;
The use of emoticons to decide if a tweet is positive, or negative has the benefit of automatically creating a labled dataset, but since they are used as the labels they have to remove them from the training set, removing one of the more useful ways of identifying the tweet sentiment.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org646b59e" class="outline-2"&gt;
&lt;h2 id="org646b59e"&gt;Getting and Cleaning the Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org646b59e"&gt;
&lt;p&gt;
The pulled 100 tweets form the API every 2 minutes until they had 800,000 positive and 800,000 negative tweets (after removing some tweets in pre-processing). The API lets you query by emoticon so the used ":)" to grab positive tweets (the API matches any known equivalent emoticon) and ":(" for negative tweets. They removed re-tweets and duplicates as well as any tweet that had both positive and negative emoticons in them. They then replaced usernames with the token &lt;code&gt;USERNAME&lt;/code&gt; and URLs with &lt;code&gt;URL&lt;/code&gt; and limited the number of consecutively repeated characters to 2.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>nlp</category><category>paper</category><category>sentiment analysis</category><category>slipnote</category><category>twitter</category><guid>https://necromuralist.github.io/posts/twitter-sentiment-classification-using-distant-supervison/</guid><pubDate>Fri, 31 Jul 2020 22:16:27 GMT</pubDate></item><item><title>Opinion Mining and Sentiment Analysis</title><link>https://necromuralist.github.io/posts/opinion-mining-and-sentiment-analysis/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org7312ab7" class="outline-2"&gt;
&lt;h2 id="org7312ab7"&gt;Note&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7312ab7"&gt;
&lt;p&gt;
An &lt;i&gt;opinion&lt;/i&gt; is a subjective statement about what a &lt;b&gt;&lt;b&gt;person&lt;/b&gt;&lt;/b&gt; thinks or believes about &lt;b&gt;&lt;b&gt;something&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
There are three basic parts needed to understand an opinion:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;The opinion holder (&lt;b&gt;&lt;b&gt;person&lt;/b&gt;&lt;/b&gt;)&lt;/li&gt;
&lt;li&gt;The opinion target (&lt;b&gt;&lt;b&gt;something&lt;/b&gt;&lt;/b&gt;)&lt;/li&gt;
&lt;li&gt;The opinion content&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
In addition, to make it meaningful, you can add:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The Context of the opinion&lt;/li&gt;
&lt;li&gt;The Sentiment of the opinion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;a href="https://necromuralist.github.io/posts/bibliography/text-data-management-and-analysis/"&gt;(Zhai &amp;amp; Massung, 2016)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Sentiment Analysis is a part of Natural Language Processing that looks to transform freeform text into structured data. Opinion is an expression of belief, while sentiment is an expression of feeling. What is sometimes called Sentiment Analysis - the measurement of positive or negative sentiment of a text is really Polarity Classification, a subset of Sentiment Analysis. &lt;a href="https://necromuralist.github.io/posts/bibliography/sentiment-analysis-in-social-networks/"&gt;(Pozzi, Fersini, et al., 2017)&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>nlp</category><category>sentiment analysis</category><category>slipnote</category><guid>https://necromuralist.github.io/posts/opinion-mining-and-sentiment-analysis/</guid><pubDate>Thu, 30 Jul 2020 20:12:55 GMT</pubDate></item><item><title>Memorizing Binaries</title><link>https://necromuralist.github.io/posts/memorizing-binaries/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
This is one way that you can memorize binary states - not just binary number, since you can encode the binary states as binary numbers.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Encode as bits (e.g. &lt;i&gt;white=0&lt;/i&gt;, &lt;i&gt;black=1&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Arrange the bits into 3x3 grids - 3 bits per row, 3 rows per grid
&lt;/p&gt;

&lt;p&gt;
\[
  000\\
  110\\
  101\\
  \]
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Convert each row to decimal numbers.
&lt;/p&gt;

&lt;p&gt;
\[
  000 = 0\\
  110 = 6\\
  101 = 5\\
  \]
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;Convert the decimal to a word-image using a system. In the case of the Major System you might get &lt;i&gt;065 = sgl = seagull&lt;/i&gt;.&lt;/li&gt;

&lt;li&gt;Repeat until you have all the bits covered&lt;/li&gt;

&lt;li&gt;Put the images into a Memory Palace, two images per location.&lt;/li&gt;
&lt;/ol&gt;

&lt;div id="outline-container-orgf2fb684" class="outline-2"&gt;
&lt;h2 id="orgf2fb684"&gt;Bibliography&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf2fb684"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/mnemonic-alphabet-systems/"&gt;Mnemonic Alphabet Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>memory</category><category>slipnote</category><guid>https://necromuralist.github.io/posts/memorizing-binaries/</guid><pubDate>Thu, 30 Jul 2020 06:41:28 GMT</pubDate></item><item><title>Basics Steps of Clicker Training</title><link>https://necromuralist.github.io/posts/basics-steps-of-clicker-training/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
These are the basic steps of clicker training.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Get your rabbit to do what you want it to do&lt;/li&gt;
&lt;li&gt;Click the instant she does it&lt;/li&gt;
&lt;li&gt;Reward your rabbit with a treat&lt;/li&gt;
&lt;li&gt;Add a cue once she's learned to do it so she knows the name of what she's doing&lt;/li&gt;
&lt;li&gt;Gradually fade out the clicks and treats&lt;/li&gt;
&lt;/ol&gt;

&lt;div id="outline-container-orgf4157d4" class="outline-2"&gt;
&lt;h2 id="orgf4157d4"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf4157d4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/clicking-basics/"&gt;Clicking Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgccaa37a" class="outline-2"&gt;
&lt;h2 id="orgccaa37a"&gt;Source&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgccaa37a"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/clicking-with-your-rabbit/"&gt;Clicking With Your Rabbit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>clicker training</category><category>rabbit</category><category>slipnote</category><guid>https://necromuralist.github.io/posts/basics-steps-of-clicker-training/</guid><pubDate>Thu, 30 Jul 2020 06:33:37 GMT</pubDate></item><item><title>Clicking Basics</title><link>https://necromuralist.github.io/posts/clicking-basics/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
The basics ideas of clicker training are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Click at the moment that some desired behavior has happened&lt;/li&gt;
&lt;li&gt;Follow every click with a reward&lt;/li&gt;
&lt;li&gt;Ignore any behavior you don't want or don't care about&lt;/li&gt;
&lt;/ul&gt;

&lt;div id="outline-container-orgf4fe8cb" class="outline-2"&gt;
&lt;h2 id="orgf4fe8cb"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf4fe8cb"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/clicking-with-your-rabbit/"&gt;Clicking With Your Rabbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/clicker-training-wikipedia-article/"&gt;Wikipedia article on Clicker Training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>clicker training</category><category>rabbit</category><category>slip note</category><guid>https://necromuralist.github.io/posts/clicking-basics/</guid><pubDate>Thu, 30 Jul 2020 06:28:21 GMT</pubDate></item><item><title>Why Is Ham Radio Called Ham Radio?</title><link>https://necromuralist.github.io/posts/why-is-ham-radio-called-ham-radio/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
So, why is &lt;a href="https://www.wikiwand.com/en/Amateur_radio"&gt;Amateur Radio called&lt;/a&gt; &lt;i&gt;ham&lt;/i&gt; radio? It appears that the term originated with Telegraph Operators who referred to unskilled operators as "hams", presumably because they were considered "ham-fisted" (or "ham-handed"). When radio first became available to the general population many of the first radio ("wireless telegraph") operators were former telegraph operators and it became the norm for both amateurs and professionals to refer to amateur operators who accidentally interfered with other broadcasts as "hams" and eventually the term was adopted by the amateur radio community as the term for "amateur" radio.
&lt;/p&gt;

&lt;div id="outline-container-orgbd47385" class="outline-2"&gt;
&lt;h2 id="orgbd47385"&gt;Citations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbd47385"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/arrl-ham-radio-license-manual/"&gt;ARRL Ham Radio License Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>etymology</category><category>ham radio</category><category>slipnote</category><guid>https://necromuralist.github.io/posts/why-is-ham-radio-called-ham-radio/</guid><pubDate>Thu, 30 Jul 2020 03:21:08 GMT</pubDate></item><item><title>The Alphabet Peg</title><link>https://necromuralist.github.io/posts/the-alphabet-peg/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
This is a type of Mnemonic Peg System that helps you memorize lists using a pre-built Peg List based on the alphabet. It doesn't have to be the alphabet, it can be any ordered list of words that you already have memorized.
&lt;/p&gt;

&lt;p&gt;
First you created a list of words wherein the first letter of each word matches the letters of the alphabet - &lt;i&gt;Ape, Bat, Crane&lt;/i&gt;, etc. Now whenever you need to memorize a list you associate each item on the list with a word in the alphabet list in order. So if you need to memorize &lt;i&gt;a loaf of bread, a container of milk, and a stick of butter&lt;/i&gt; you would do something like this:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Abecadarium&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;List&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Ape&lt;/td&gt;
&lt;td class="org-left"&gt;Loaf of Bread&lt;/td&gt;
&lt;td class="org-left"&gt;King Kong climbing the Empire State Building holding a loaf of bread&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bat&lt;/td&gt;
&lt;td class="org-left"&gt;Container of Milk&lt;/td&gt;
&lt;td class="org-left"&gt;Supermarket milk jug with a bat in it&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Crane&lt;/td&gt;
&lt;td class="org-left"&gt;Stick of Butter&lt;/td&gt;
&lt;td class="org-left"&gt;A crane choking on a giant stick of butter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Once you've made the associations you can remember the list by starting with Ape and working through the alphabet.
&lt;/p&gt;

&lt;div id="outline-container-org6d3c4b9" class="outline-2"&gt;
&lt;h2 id="org6d3c4b9"&gt;Bibliography&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6d3c4b9"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/bibliography/mnemonic-alphabet-systems/"&gt;Mnemonic Alphabet Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>memory</category><category>mnemonic peg system</category><category>slipnote</category><guid>https://necromuralist.github.io/posts/the-alphabet-peg/</guid><pubDate>Thu, 30 Jul 2020 02:54:16 GMT</pubDate></item><item><title>Updating a Nikola Shortcode Plugin</title><link>https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org59e907c"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgdc4bd67"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org4794d34"&gt;The Plugin File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgf6ac894"&gt;The Plugin Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org12b7323"&gt;Stealing From the &lt;code&gt;doc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org3f4e8a2"&gt;The Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org67bb7ec"&gt;Checking It Out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org1d9e375"&gt;Does it work like the original doc?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgb1e7168"&gt;Does it accept a title?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org5bffbf4"&gt;What if the slug doesn't exist?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#orgc4c5f79"&gt;One More Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/#org9a8b786"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/lancelot_link.jpg" alt="lancelot_link.jpg"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Source: &lt;a href="https://www.flickr.com/photos/myprontopup/264413649/in/photostream/"&gt;Brian&lt;/a&gt; (&lt;a href="https://creativecommons.org/licenses/by-nc/2.0/"&gt;CC License&lt;/a&gt;)/Unmodified
&lt;/p&gt;
&lt;div id="outline-container-org59e907c" class="outline-2"&gt;
&lt;h2 id="org59e907c"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59e907c"&gt;
&lt;p&gt;
These are some notes to help me remember what I did to alter a &lt;a href="https://www.getnikola.com/"&gt;Nikola&lt;/a&gt; &lt;a href="https://www.getnikola.com/handbook.html#shortcodes"&gt;shortcode&lt;/a&gt; plugin. A while back I looked into using their &lt;a href="https://www.getnikola.com/handbook.html#doc"&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/a&gt; &lt;a href="https://www.getnikola.com/handbook.html#restructuredtext-extensions"&gt;reStructured Text extension&lt;/a&gt; ("role"?) which automatically creates links to other posts by looking up the &lt;a href="https://www.wikiwand.com/en/Clean_URL#/Slug"&gt;slug&lt;/a&gt; or title that you pass to it, but since I switched to using org-mode instead of restructured text I couldn't use it. Then I found out the other day that they built a &lt;a href="https://www.getnikola.com/handbook.html#shortcodes"&gt;shortcode&lt;/a&gt; that allows you to use it in other formats and when I tried it it worked - mostly.
&lt;/p&gt;

&lt;p&gt;
A tag that looks like this:
&lt;/p&gt;

&lt;p&gt;

{{% doc %}}2-nikola-inter-site-links{{% /doc %}}

&lt;/p&gt;

&lt;p&gt;
Gets turned into this: &lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;Nikola Inter-Site Links&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The problem is that, while the &lt;code&gt;doc&lt;/code&gt; shortcode supports giving the link an alternate title, it expects restructured-text formatting. e.g. &lt;code&gt;`alternate title&amp;lt;some-slug&amp;gt;`&lt;/code&gt;. Why is this a problem? Well, I didn't look into where it's happening, but when the text within the {{% doc %}} tags gets sent to the shortcode code (meaning the python plugin code) for processing it converts the angle brackets (&lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;) to &lt;a href="https://www.w3schools.com/html/html_entities.asp"&gt;HTML character entities&lt;/a&gt; (e.g. the &lt;code&gt;&amp;lt;&lt;/code&gt; becomes &lt;code&gt;&amp;amp;lt&lt;/code&gt;) but the regular expression in the code that extracts the alternate title is looking for the braces (presumably the role is processed differently from the shortcode) anyway, I was trying to figure out some workarounds but then I looked at the code and it looked fairly easy to customize so I decided I would so that I could learn how to do it (and have a way to use alternative titles in org-mode). So, here it goes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdc4bd67" class="outline-2"&gt;
&lt;h2 id="orgdc4bd67"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdc4bd67"&gt;
&lt;p&gt;
I'm going to call my shortcode &lt;code&gt;lancelot&lt;/code&gt;. I was going to call it link, but that seems like it might clash with something else, either now or in the future, so I decided to name it after &lt;a href="https://www.wikiwand.com/en/Lancelot_Link,_Secret_Chimp"&gt;Lancelot Link, Secret Chimp&lt;/a&gt; instead. Hopefully that won't end up conflicting with anything.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4794d34" class="outline-3"&gt;
&lt;h3 id="org4794d34"&gt;The Plugin File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4794d34"&gt;
&lt;p&gt;
The first thing I did was poke around in the nikola folders for something I could copy. I decided to use the existing &lt;code&gt;gist&lt;/code&gt; shortcode to start with. Why not use &lt;code&gt;doc&lt;/code&gt;? because it's in a different folder and inherits from the &lt;code&gt;RestExtension&lt;/code&gt; which didn't seem like what I wanted, although maybe that's what makes the angle brackets work, but anyway, the &lt;code&gt;gist&lt;/code&gt; seemed like a good place to start. They appear to be using &lt;a href="https://yapsy.readthedocs.io/en/latest/"&gt;yapsy&lt;/a&gt; for the plugin system, which requires two files for your plugin, a python file where you define the plugin and a plugin-info file (which looks like an ini file). So to start I copied &lt;code&gt;nikola/plugins/shortcode/gist.plugin&lt;/code&gt; and renamed it &lt;code&gt;lancelot.plugin&lt;/code&gt; then edited it to look like this.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Core]
name = lancelot
module = lancelot

[Nikola]
PluginCategory = Shortcode

[Documentation]
author = The Cloistered Monkey
version = 0.1
website = https://necromuralist.github.io/
description = Variant of the doc shortcode that allows alternate titles for non-restructured text formats.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Seems easy enough. Now to the plugin code.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf6ac894" class="outline-3"&gt;
&lt;h3 id="orgf6ac894"&gt;The Plugin Code&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf6ac894"&gt;
&lt;p&gt;
According to the documentation on &lt;a href="https://getnikola.com/extending.html#shortcodes"&gt;creating a shortcode&lt;/a&gt;, the requirements are that you create a plugin that inherits from the &lt;code&gt;ShortcodePlugin&lt;/code&gt; (you'll find it in the &lt;code&gt;nikola/plugin_categories.py&lt;/code&gt; file if you want to check it out) and define the &lt;code&gt;handler&lt;/code&gt; method that handles the shortcode and returns a tuple of &lt;code&gt;(output, dependencies)&lt;/code&gt;. The &lt;code&gt;output&lt;/code&gt; is the text that will replace the shortcode in the document and the &lt;code&gt;dependencies&lt;/code&gt; is a list of files that nikola will use to check if something is out of date (I don't use it here).
&lt;/p&gt;

&lt;p&gt;
There are three required named arguments for the &lt;code&gt;handler&lt;/code&gt; method:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;site&lt;/code&gt;: an object that you can use to check the state of the site&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: The text between the shortcode tags (if it uses both opening and closing tags)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lang&lt;/code&gt;: the current language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In addition, any attributes added within the shortcode tag will be passed into the &lt;code&gt;handler&lt;/code&gt; method by position or keyword. Anyway, since I copied the &lt;code&gt;doc&lt;/code&gt; code I didn't actually read this until just now, but maybe it's good to know. Onward.
&lt;/p&gt;

&lt;p&gt;
The next thing to do was to create &lt;code&gt;lancelot.py&lt;/code&gt; in the same folder as the &lt;code&gt;lancelot.plugin&lt;/code&gt; file. The basic definition of class (and the start of the file) looks more-or-less the same for all the plugins.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# This file is public domain according to its author, the Cloistered Monkey&lt;/span&gt;

&lt;span class="sd"&gt;"""Shortcode for non-restructured text inter-site links."""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nikola.plugin_categories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Plugin for non-rst inter-site links."""&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lancelot"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
So, other than some doc-strings all you have to do is set the name and then the handler, which we'll do next.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org12b7323" class="outline-3"&gt;
&lt;h3 id="org12b7323"&gt;Stealing From the &lt;code&gt;doc&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org12b7323"&gt;
&lt;p&gt;
The file that I stole most of the code from is located in &lt;code&gt;nikola/plugins/compile/rest/doc.py&lt;/code&gt;. The &lt;code&gt;Plugin&lt;/code&gt; class in that file is handling both the restructured text role and the shortcode so we don't need all of it. According to the documentation I linked to above, the &lt;code&gt;set_site&lt;/code&gt; method is used to tell nikola to use something other than the &lt;code&gt;handler&lt;/code&gt; method, and in this case the author used it to register the functions for the two things it's handling.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Set Nikola site."""&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;
    &lt;span class="n"&gt;roles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_canonical_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'doc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_shortcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'doc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_shortcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doc_role&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you look at the line &lt;code&gt;self.site.register_shortcode('doc', doc_shortcode)&lt;/code&gt; you can figure out that we need to steal from a function named - wait for itâ¦ &lt;code&gt;doc_shortcode&lt;/code&gt;. Here's what's in that function:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doc_shortcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Implement the doc shortcode."""&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_doc_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
		&lt;span class="s1"&gt;'More than one post with the same slug. Using "&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;" for doc shortcode'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;a href="&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/a&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	    &lt;span class="s1"&gt;'"&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;" slug doesn&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t exist.'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;span class="error text-error" style="color: red;"&amp;gt;Invalid link: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It looks pretty straight-forward except it's using two things not defined within it - &lt;code&gt;LOGGER&lt;/code&gt; and &lt;code&gt;_doc_link&lt;/code&gt;. The &lt;code&gt;LOGGER&lt;/code&gt; is just an import so we can just change the start of our file to grab it. The &lt;code&gt;doc_link&lt;/code&gt; is a function in the same file as &lt;code&gt;doc_shortcode&lt;/code&gt;. My first thought for the &lt;code&gt;_doc_link&lt;/code&gt; was that since it's a standalone function I could just import it and call it. That turned out to have a small problem though - right in the middle of &lt;code&gt;_doc_link&lt;/code&gt; is this for loop:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc_role&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'slug'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;twin_slugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
	    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
What you'll notice is that the &lt;code&gt;doc_role&lt;/code&gt; function has an attribute &lt;code&gt;site&lt;/code&gt;. Well, it doesn't really, until it's set in that &lt;code&gt;set_site&lt;/code&gt; method above. So, okay, maybe I could figure out some way to set itâ¦ or maybe not, I don't know but even if I could it seems like it'd get kind of convoluted, and who knows what changes the original author might make in the future, it just seemed like it'd make more sense to re-implement it myself.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3f4e8a2" class="outline-3"&gt;
&lt;h3 id="org3f4e8a2"&gt;The Plugin&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3f4e8a2"&gt;
&lt;p&gt;
So, first a different start to our file, this time with the &lt;code&gt;LOGGER&lt;/code&gt; and &lt;code&gt;slugify&lt;/code&gt; imported (the &lt;code&gt;slugify&lt;/code&gt; was in &lt;code&gt;_doc_link&lt;/code&gt; which I'm re-defining later).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# This file is public domain according to its author, the Cloisted Monkey&lt;/span&gt;

&lt;span class="sd"&gt;"""Shortcode for non-restructured text inter-site links.&lt;/span&gt;
&lt;span class="sd"&gt;Re-write of the ``doc`` plugin to allow alternative titles outside of RST"""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nikola.plugin_categories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nikola.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ShortcodePlugin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Plugin for non-rst inter-site links."""&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lancelot"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9a30d9d" class="outline-4"&gt;
&lt;h4 id="org9a30d9d"&gt;&lt;code&gt;lancelot_link&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9a30d9d"&gt;
&lt;p&gt;
To replace the &lt;code&gt;_doc_link&lt;/code&gt; I made a new function called &lt;code&gt;lancelot_link&lt;/code&gt; which I'll be looking at in parts. First up is the function declaration.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lancelot_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""process the slug, check if it exists or is duplicated&lt;/span&gt;

&lt;span class="sd"&gt;    if `title` is None this will grab the post-title&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;     site: the Nikola object&lt;/span&gt;
&lt;span class="sd"&gt;     slug: the text between the shortcode tags&lt;/span&gt;
&lt;span class="sd"&gt;     title: the title passed in by the user (if any)&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;     tuple (success, has duplicate slugs, title, permalink, slug)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The interface wants the objects that nikola passes into the &lt;code&gt;handler&lt;/code&gt; method - the &lt;code&gt;site&lt;/code&gt; object , the &lt;code&gt;data&lt;/code&gt; (renamed &lt;code&gt;slug&lt;/code&gt;) and the &lt;code&gt;title&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I'm not indenting the rest of the code in the post but imagine it's indented four spaces.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga596e77"&gt;&lt;/a&gt;Slugification&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga596e77"&gt;
&lt;p&gt;
The first thing the function does is split out any fragments that might have been attached and "slugifies" the slug (makes sure it's ASCII and has only alphanumeric characters).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org3ef0557"&gt;&lt;/a&gt;Find the Post&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3ef0557"&gt;
&lt;p&gt;
Next it checks to see if the slug refers to an actual page on the site and if there are duplicate slugs. If the page doesn't exist, then it short-circuits the function so the &lt;code&gt;handler&lt;/code&gt; can return some error text instead of a link. If it does exist it saves the &lt;code&gt;post&lt;/code&gt; object for the next step (using the first post in the timeline if there were duplicates).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;twin_slugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'slug'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;twin_slugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
	    &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org0003e69"&gt;&lt;/a&gt;The Title&lt;br&gt;
&lt;div class="outline-text-5" id="text-org0003e69"&gt;
&lt;p&gt;
If the user didn't pass in an alternative title this grabs the title that was given to the post we're linking to.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; The &lt;code&gt;doc&lt;/code&gt; shortcode raises then catches a &lt;code&gt;ValueError&lt;/code&gt; exception if there's no matching post. I had thought that this was for logging, but that doesn't appear to be the case so I took it out. But since I don't know what it was doing in the first place I might be breaking something. Not that I can tell, though.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org33b83ce"&gt;&lt;/a&gt;The Permalink&lt;br&gt;
&lt;div class="outline-text-5" id="text-org33b83ce"&gt;
&lt;p&gt;
Now we grab the permalink.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;permalink&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orge0ae8fd"&gt;&lt;/a&gt;The Return&lt;br&gt;
&lt;div class="outline-text-5" id="text-orge0ae8fd"&gt;
&lt;p&gt;
And finally we do the return dance to answer some questions for the &lt;code&gt;handler&lt;/code&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;Did we find the post?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Were there duplicate posts with the same slug?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;What's the text to display for the link?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;What's the address for the anchor tag?&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;What's the correct slug?&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The &lt;code&gt;slug&lt;/code&gt; is only for the logging messages.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0468789" class="outline-4"&gt;
&lt;h4 id="org0468789"&gt;The handler&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0468789"&gt;
&lt;p&gt;
Now I'll define the &lt;code&gt;handler&lt;/code&gt; that's called by nikola. This is a method of the Plugin class that I started above, but I'm showing it after the &lt;code&gt;lancelot_link&lt;/code&gt; function since it mostly just calls &lt;code&gt;lancelot_link&lt;/code&gt; and creates the output from what it returned. I originally had it all in the same method (and maybe I'll put it back at some point). But I thought it was a little easier to read this way, especially as I referred back to the original &lt;code&gt;doc&lt;/code&gt; plugin to see what's going on.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Create an inter-site link&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;     title: optional argument to specify a different title from the post&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;     output HTML to replace the shortcode&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lancelot_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;twin_slugs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
		&lt;span class="s1"&gt;'More than one post with the same slug. '&lt;/span&gt;
		&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Using "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;" for lancelot shortcode'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;a href="&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;permalink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/a&amp;gt;'&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
	    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;" slug doesn&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t exist.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;span class="error text-error" style="color: red;"&amp;gt;'&lt;/span&gt;
		  &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Invalid link: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
One thing to note here is that the original &lt;code&gt;doc&lt;/code&gt; plugin only returns the output, not an empty list, even though the documentation says you should. It works either way, but I noticed the &lt;code&gt;gist&lt;/code&gt; plugin returned an empty list with the output so I followed, like a lemming to the sea.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org67bb7ec" class="outline-3"&gt;
&lt;h3 id="org67bb7ec"&gt;Checking It Out&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org67bb7ec"&gt;
&lt;p&gt;
Now let's give it a dry run.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1d9e375" class="outline-3"&gt;
&lt;h3 id="org1d9e375"&gt;Does it work like the original doc?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1d9e375"&gt;
&lt;p&gt;
   If we put this in the post:

{{% lancelot %}}2-nikola-inter-site-links{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
We get this:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;Nikola Inter-Site Links&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb1e7168" class="outline-3"&gt;
&lt;h3 id="orgb1e7168"&gt;Does it accept a title?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb1e7168"&gt;
&lt;p&gt;
Now, what this was all about.
&lt;/p&gt;

&lt;p&gt;

{{% lancelot title="An old post about linking to another post." %}}2-nikola-inter-site-links{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
Gives us:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;An old post about linking to another post.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
And if you forget the name of the parameter, you can just pass in the alternate title instead.
&lt;/p&gt;

&lt;p&gt;

{{% lancelot "Without the 'title=' part" %}}2-nikola-inter-site-links{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
Gives this:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://necromuralist.github.io/posts/2-nikola-inter-site-links/"&gt;Without the 'title=' part&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5bffbf4" class="outline-3"&gt;
&lt;h3 id="org5bffbf4"&gt;What if the slug doesn't exist?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5bffbf4"&gt;
&lt;p&gt;

{{% lancelot title="Oops." %}}this-error-is-on-purpose-ignore-it{{% /lancelot %}}

&lt;/p&gt;

&lt;p&gt;
Gives us:
&lt;/p&gt;

&lt;p&gt;
&lt;span class="error text-error" style="color: red;"&gt;Invalid link: this-error-is-on-purpose-ignore-it&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
Note that adding this error to this post means it shows up in the logging every time I re-build. I hope I don't forget and try and hunt it down later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc4c5f79" class="outline-3"&gt;
&lt;h3 id="orgc4c5f79"&gt;One More Thing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc4c5f79"&gt;
&lt;p&gt;
When I originally was trying to figure this out I put the &lt;code&gt;lancelot&lt;/code&gt; files in the &lt;code&gt;shortcodes&lt;/code&gt; folder next to the &lt;code&gt;gist&lt;/code&gt; files (in the virtualenv, so I knew it was a bad idea, even as I did it) but while I was re-writing them for this post I wanted a place to stash the files so I put them in the &lt;code&gt;plugins&lt;/code&gt; folder that sits in the site repository next to the &lt;code&gt;conf.py&lt;/code&gt; file - which already existed because that's where nikola put the &lt;a href="https://plugins.getnikola.com/v7/orgmode/"&gt;org-mode plugin&lt;/a&gt; - and when I first re-built the site with the code only partially written, it raised an &lt;code&gt;Exception&lt;/code&gt; because it turns out that the place to put plugins, including shortcode plugins, for nikola/yapsy to find them is in the &lt;code&gt;plugins&lt;/code&gt; folder. Imagine that.
&lt;/p&gt;

&lt;p&gt;
Also, to use an interactive debugger (like my favorite one, &lt;a href="https://pypi.org/project/pudb/"&gt;pudb&lt;/a&gt;) you need to change the verbosity when you build the site to 2.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola build -v 2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Otherwise it captures the stdout and you won't see the debugger (it will just look like it hung-up). The other thing is if you see an error something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2020-07-28 20:53:44] ERROR: Nikola: Shortcode error: Syntax error in shortcode 'lancelot' at line 426, column 27: expecting whitespace!
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It more than likely mean that the error is actually in the tag - no space after the first &lt;code&gt;%&lt;/code&gt; or before the second one or one time I chopped off the end of a tag when copying and pasting and it gave the same error - it seems to be a generic error that means "check the tag". 
&lt;/p&gt;

&lt;p&gt;
I guess that's actually three more things.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9a8b786" class="outline-2"&gt;
&lt;h2 id="org9a8b786"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9a8b786"&gt;
&lt;p&gt;
So, that's my first foray into making a nikola plugin. I've been using nikola for a while now, but I never really looked at the code before. It's nice to see that the plugin system is so easy to use.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>nikola</category><guid>https://necromuralist.github.io/posts/2c-updating-a-nikola-shortcode-plugin/</guid><pubDate>Tue, 28 Jul 2020 23:33:43 GMT</pubDate></item></channel></rss>