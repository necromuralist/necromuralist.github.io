<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about babel)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/babel.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 04 May 2023 00:33:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python with Org-Babel</title><link>https://necromuralist.github.io/posts/python-with-org-babel/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orge34138c" class="outline-2"&gt;
&lt;h2 id="orge34138c"&gt;What is this about?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge34138c"&gt;
&lt;p&gt;
This is an initial look at how to use org-babel to create a literate-programming document. In the past I have used jupyter notebooks and pweave to do similar things, with each having a separate role - jupyter notebooks are good for interactive exploration but somewhat less amenable to working with sphinx (which I did with pweave). The hope here is that the org-babel system will provide something more amenable to both. Since you still have to convert the org-files to restructured text files (with pandoc or ox-nikola) it's still not everything I wanted, but hopefully this will make things a little easier
&lt;/p&gt;

&lt;p&gt;
Most of this is stolen from &lt;a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html"&gt;this page&lt;/a&gt; - I'm fairly new to org-babel in general so I'm just walking in other people's footsteps for now.
&lt;/p&gt;

&lt;p&gt;
Also, the inclusion of the org-babel code turned out to be both tedious and aesthetically unsatisfying so I didn't do it as much as I thought I would. The original org-file is &lt;a href="https://raw.githubusercontent.com/necromuralist/necromuralist.github.io/master/posts/python-with-org-babel/index.org"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org41397ba" class="outline-2"&gt;
&lt;h2 id="org41397ba"&gt;High-Level Module Structure&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org41397ba"&gt;
&lt;p&gt;
One nice thing about the org-babel/noweb system is that it has a system that makes it easy to create a template (in this case based on the the module structure from &lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#module-structure"&gt;Code Like A Pythonista&lt;/a&gt;) with parts that we're updating inserted using the noweb syntax. To actually see this I had to include the python code as an org-mode snippet so the syntax highlighting isn't there. 
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
This is what the final file looks like once the no-web substitutions happen.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
To create the `literate.py` file (and all the other code-files) you see above execute &lt;code&gt;M-x org-babel-tangle&lt;/code&gt;.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2080ad0" class="outline-2"&gt;
&lt;h2 id="org2080ad0"&gt;LiterateClass&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2080ad0"&gt;
&lt;p&gt;
This is the class definition that get substituted above. The code block for the definition is named &lt;code&gt;LiterateClass-definition&lt;/code&gt; so the main template will substitute its contents for &lt;code&gt;&amp;lt;&amp;lt;LiterateClass-definition&amp;gt;&amp;gt;&lt;/code&gt; when it gets tangled.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/python-with-org-babel/literate_python/literateclass.png" alt="nil"&gt;
&lt;/p&gt;


Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgeb26cf6" class="outline-2"&gt;
&lt;h2 id="orgeb26cf6"&gt;Main functions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeb26cf6"&gt;
&lt;p&gt;
The &lt;b&gt;Code Like a Pythonista&lt;/b&gt; template expects that you are creating a command-line executable with a &lt;b&gt;main&lt;/b&gt; entry-point. This section implements that case as an example.
&lt;/p&gt;

&lt;p&gt;
First the &lt;code&gt;&amp;lt;&amp;lt;literate-main-imports&amp;gt;&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Now the &lt;code&gt;&amp;lt;&amp;lt;literate-main&amp;gt;&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
As a quick check we can run the code at the command line to see that it's working (the main block has to be tangled for this to work).
&lt;/p&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
Who: Not Me
&lt;/pre&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org12efaa5" class="outline-2"&gt;
&lt;h2 id="org12efaa5"&gt;Testing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org12efaa5"&gt;
&lt;p&gt;
One nice thing about the org-babel infrastructure is that the tests and source can be put in the same org-file, then exported to separate files to be run.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4854be2" class="outline-3"&gt;
&lt;h3 id="org4854be2"&gt;Doctest&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4854be2"&gt;
&lt;p&gt;
For the stdout output, doctesting can be a convenient way to check that things are behaving as expected while also providing an explicit example of how to run the command-line interface.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org796f9bb" class="outline-4"&gt;
&lt;h4 id="org796f9bb"&gt;Setting up the cases&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org796f9bb"&gt;
&lt;p&gt;
The output of a successful doctest is nothing, which is good for automated tests but less interesting here so I'll make a doctest that passes and one that should fail.
&lt;/p&gt;

&lt;p&gt;
This next section (named &lt;code&gt;literate-doctest&lt;/code&gt;) creates a code snippet that will pass. 
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
And now here's a test (named &lt;code&gt;literate-bad-doctest&lt;/code&gt;) that will fail.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
This next section will include the two doctests and export them to a file so they can be tested. Note that you need an empty line between the tests for both of them to run. Warning - since this file is going to be exported, if you are using &lt;code&gt;nikola&lt;/code&gt; or some other system that assumes all files with a certain file-extension are blog-posts you have to use an extension that won't get picked up (in my case both &lt;code&gt;rst&lt;/code&gt; and &lt;code&gt;txt&lt;/code&gt; were interpreted as blog-posts).
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Which gets tangled into this. Note that the doctests aren't valid python so you can tangle this but not execute it.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org559b82e" class="outline-4"&gt;
&lt;h4 id="org559b82e"&gt;Running the doctests&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org559b82e"&gt;
&lt;p&gt;
Now we can actually run them with python to see what happens.
&lt;/p&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example" id="org8c8efbd"&gt;
**********************************************************************
File "literate_python/test_literate_output.doctest", line 9, in test_literate_output.doctest
Failed example:
    bad_thing()
Expected:
    Who: Magilla Gorilla
Got:
    Who: Gorilla Glue
**********************************************************************
1 items had failures:
   1 of   5 in test_literate_output.doctest
***Test Failed*** 1 failures.
&lt;/pre&gt;

&lt;p&gt;
Note that since this returned a non-zero exit code (I think) you need to put &lt;code&gt;true&lt;/code&gt; in the code block or there would be no output.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc3c6da7" class="outline-3"&gt;
&lt;h3 id="orgc3c6da7"&gt;PyTest BDD&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc3c6da7"&gt;
&lt;p&gt;
While doctests are neat I prefer unit-testing, in particular using Behavior Driven Development (BDD) facilitated in this case by &lt;code&gt;py.test&lt;/code&gt; and &lt;code&gt;pytest_bdd&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcbac528" class="outline-4"&gt;
&lt;h4 id="orgcbac528"&gt;The feature file&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcbac528"&gt;
&lt;p&gt;
Identifying the code-block with &lt;code&gt;#+begin_src feature&lt;/code&gt; adds some syntax highlighting (if you have feature-mode installed and set-up). This works both when you are in the external editor and in the main org-babel document as well.
&lt;/p&gt;

&lt;p&gt;
To make sure that org-babel recognizes feature mode add this to the &lt;code&gt;init.el&lt;/code&gt; file.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
This is what is going in the feature file.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9f385fb" class="outline-4"&gt;
&lt;h4 id="org9f385fb"&gt;The test file&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9f385fb"&gt;
&lt;p&gt;
This is another file that gets tangled out. In this case it is so that we can run &lt;code&gt;py.test&lt;/code&gt; on it.
&lt;/p&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd9e7a26" class="outline-4"&gt;
&lt;h4 id="orgd9e7a26"&gt;Running the test&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd9e7a26"&gt;
&lt;p&gt;
One important thing to note is that this will put an error message in a separate buffer if something goes wrong (like you don't have py.test installed), which in at least some cases makes it look like it failed silently. Unlike with the doctests, no output means something in the setup needs to be fixed, so you should tangle the file and then run it at the command-line to debug what happened.
&lt;/p&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example" id="org7a9eb40"&gt;
============================= test session starts ==============================
platform linux -- Python 3.5.1+, pytest-3.0.5, py-1.4.32, pluggy-0.4.0 -- /home/cronos/.virtualenvs/nikola/bin/python3
cachedir: .cache
rootdir: /home/cronos/projects/nikola/posts, iniimg-url: 
plugins: faker-2.0.0, bdd-2.18.1
collecting ... collected 1 items

literate_python/testliterate.py::test_constructor PASSED

=========================== 1 passed in 0.04 seconds ===========================
&lt;/pre&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org47ca252" class="outline-2"&gt;
&lt;h2 id="org47ca252"&gt;Getting This Into Nikola&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org47ca252"&gt;
&lt;p&gt;
I tried three ways to get this document into nikola:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;converting to rst with pandoc&lt;/li&gt;
&lt;li&gt;exporting it with &lt;a href="https://github.com/masayuko/ox-nikola"&gt;ox-nikola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using the &lt;a href="https://plugins.getnikola.com/#orgmode"&gt;orgmode&lt;/a&gt; plugin for nikola&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;ox-nikola&lt;/b&gt; worked (as did pandoc), but at the moment I'm trying to use the &lt;b&gt;orgmode&lt;/b&gt; plugin so that I can keep editing this document without having to convert back and forth. This is turning out to be about the same amount of work as using jupyter (and with a steeper learning curve). But I like the folding and navigation that org-mode offers, so I'll stick with it for a bit. I'm just using the default set-up right now. It seems to work. 
&lt;/p&gt;

&lt;p&gt;
The main problem I had initially was the same one I had with jupyter - I'm starting with a file that wasn't generated by the &lt;code&gt;nikola new_post&lt;/code&gt; sub-command so it didn't have the header that &lt;b&gt;nikola&lt;/b&gt; expected but the only error &lt;code&gt;nikola build&lt;/code&gt; reported was an invalid date format. 
&lt;/p&gt;

&lt;p&gt;
This is what needs to be at the top of the org-file for nikola to work with it (or something like it).
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
The other thing is that the org-mode plugin doesn't seem to copy over the png-files correctly (or at all) so I had to create a &lt;code&gt;files/posts/python-with-org-babel/literate_python&lt;/code&gt; folder and move the UML diagram over there by hand. Lastly, it didn't color the feature file and since there's no intermediate rst-file I don't really know how to fix this. Either I'm going to have to learn a lot more about org-mode than I might want to, or for cases where I want more control over things I'll use &lt;b&gt;ox-nikola&lt;/b&gt; to convert it to rst first and edit it. That kind of wrecks the one-document idea, but I guess it would also give me a reason to re-work and polish things instead of improvising everything.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>babel</category><category>how-to</category><category>literate programming</category><category>python</category><guid>https://necromuralist.github.io/posts/python-with-org-babel/</guid><pubDate>Wed, 28 Dec 2016 22:12:41 GMT</pubDate></item></channel></rss>