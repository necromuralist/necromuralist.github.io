<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about org-mode)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/org-mode.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 04 May 2023 00:33:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Tangling Multiple Org Files</title><link>https://necromuralist.github.io/posts/tangling-multiple-org-files/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org43cdb5d"&gt;The Steps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#orgcfd243c"&gt;Create one.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org9a0c791"&gt;Create two.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org7e5fa72"&gt;Export one.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#orgb3ff75b"&gt;Tangle one.org.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/tangling-multiple-org-files/#org54dba4a"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
I've been looking off and on for ways to combine separate code-blocks in org-mode into a single tangled file. I wanted to use it because I tangle code that I want to re-use out of posts but then if I want to break the posts up I need to create a separate file (tangle) for each post. I'm hopeful that this method will allow me to break up a tangle across multiple posts. I've only tried it on toy files but I want to get some initial documentation for it in place.
&lt;/p&gt;
&lt;div id="outline-container-org43cdb5d" class="outline-2"&gt;
&lt;h2 id="org43cdb5d"&gt;The Steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org43cdb5d"&gt;
&lt;p&gt;
Let's say that there are two source org-files:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;one.org&lt;/code&gt;: contains the tangle block and a source block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;two.org&lt;/code&gt;: contains another block that we want to tangle with the one in &lt;code&gt;one.org&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The steps are:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Put an &lt;code&gt;#+INCLUDE&lt;/code&gt; directive to include &lt;code&gt;two.org&lt;/code&gt; into &lt;code&gt;one.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Export &lt;code&gt;one.org&lt;/code&gt; to an &lt;code&gt;org&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Open the exported org file (&lt;code&gt;one.org.org&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Tangle it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcfd243c" class="outline-3"&gt;
&lt;h3 id="orgcfd243c"&gt;Create one.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcfd243c"&gt;
&lt;p&gt;
The file &lt;code&gt;one.org&lt;/code&gt; is going to have the tangle and the first source-block:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
We also need to include what's in the second file (&lt;code&gt;two.org&lt;/code&gt;). The code we want to include is in a section called &lt;code&gt;Two&lt;/code&gt; so we can include just that section by adding a search term at the end.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9a0c791" class="outline-3"&gt;
&lt;h3 id="org9a0c791"&gt;Create two.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9a0c791"&gt;
&lt;p&gt;
In the other file add the section header to match the &lt;code&gt;INCLUDE&lt;/code&gt; search term (&lt;code&gt;*Two&lt;/code&gt;) and put a code block with a reference named &lt;code&gt;block-two&lt;/code&gt; to match what's in the tangle block above.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7e5fa72" class="outline-3"&gt;
&lt;h3 id="org7e5fa72"&gt;Export one.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7e5fa72"&gt;
&lt;p&gt;
Tangling unfortunately ignores the &lt;code&gt;INCLUDE&lt;/code&gt; directive so we have to export it first to another org-file in order to get the text from &lt;code&gt;org.two&lt;/code&gt; into our source file. By default, exporting to &lt;code&gt;org&lt;/code&gt; is disabled so you need to enable it (e.g. starting with &lt;code&gt;M-x customize&lt;/code&gt; &lt;code&gt;org-export-backends&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Once it's enabled you can export &lt;code&gt;one.org&lt;/code&gt; to an org-mode file using &lt;code&gt;C-c C-e O v&lt;/code&gt; (the default name will be &lt;code&gt;one.org.org&lt;/code&gt;). 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb3ff75b" class="outline-3"&gt;
&lt;h3 id="orgb3ff75b"&gt;Tangle one.org.org&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb3ff75b"&gt;
&lt;p&gt;
The last choice when we exported the file in the previous step (&lt;code&gt;v&lt;/code&gt;) will save it to a file and open it up in an emacs buffer. When the buffer is open you can then tangle it (&lt;code&gt;C-c C-v C-t&lt;/code&gt;) and the output (&lt;code&gt;/test.py&lt;/code&gt; from our tangle block) should contain both of our functions.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54dba4a" class="outline-2"&gt;
&lt;h2 id="org54dba4a"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org54dba4a"&gt;
&lt;p&gt;
This is where I got the information on breaking up the files. It includes some emacs-lisp to run the steps automatically (although I didn't try it):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Multi-File Org-Babel Tangles with Include Directives [Internet]. DEV Community. [cited 2022 Mar 21]. Available from: &lt;a href="https://dev.to/jfhbrook/multi-file-org-babel-tangles-with-include-directives-5522"&gt;https://dev.to/jfhbrook/multi-file-org-babel-tangles-with-include-directives-5522&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is the post that mentions that exporting org-files to org-format needs to be enabled (and how to do it):
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;exporting - Org mode export subtree to new org file - option missing? [Internet]. Emacs Stack Exchange. [cited 2022 Mar 21]. Available from: &lt;a href="https://emacs.stackexchange.com/a/70453"&gt;https://emacs.stackexchange.com/a/70453&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is the manual page explaining the search syntax (which is what the &lt;code&gt;#+INCLUDE&lt;/code&gt; format uses).
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Search Options (The Org Manual) [Internet]. [cited 2022 Mar 21]. Available from: &lt;a href="https://orgmode.org/manual/Search-Options.html"&gt;https://orgmode.org/manual/Search-Options.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This explains the &lt;code&gt;#+INCLUDE&lt;/code&gt; directive options:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Include Files (The Org Manual) [Internet]. [cited 2022 Mar 21]. Available from: &lt;a href="https://orgmode.org/manual/Include-Files.html"&gt;https://orgmode.org/manual/Include-Files.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>literate programming</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/tangling-multiple-org-files/</guid><pubDate>Tue, 22 Mar 2022 00:30:14 GMT</pubDate></item><item><title>Javascript in Org-Babel</title><link>https://necromuralist.github.io/posts/javascript-in-org-babel/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org7851296"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org7999f34"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#orged828c1"&gt;Prerequites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#orgb4ecbc2"&gt;init.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org89bfaf6"&gt;Try It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org813a088"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7851296" class="outline-2"&gt;
&lt;h2 id="org7851296"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7851296"&gt;
&lt;p&gt;
This is a test of running javascript in org-babel blocks. For some reason I couldn't find any documentation about setting it up so this is also a place for me to collect what to do.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I actually did use &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.html"&gt;this org-babel page&lt;/a&gt; for some of it, but it wasn't enough for me to really figure out what was going on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7999f34" class="outline-2"&gt;
&lt;h2 id="org7999f34"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7999f34"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orged828c1" class="outline-3"&gt;
&lt;h3 id="orged828c1"&gt;Prerequites&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orged828c1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4c46b08" class="outline-4"&gt;
&lt;h4 id="org4c46b08"&gt;Node&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4c46b08"&gt;
&lt;p&gt;
Since javascript is an interpreted language you need an interpreter to run code blocks. Org-babel assumes you're using &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt; so you need to install it and make sure it's on the &lt;code&gt;PATH&lt;/code&gt;. They do support debian-based systems (including Ubuntu, which I use) but they don't use the traditional PPA system. Instead they have different installs for the different versions - but they do have a Long-Term Support (LTS) version which I'm hoping updates so that's what I installed.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
As of this writing it install version 12.19.0, versus the Ubuntu 20.04 version of 10.19.0.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb4ecbc2" class="outline-3"&gt;
&lt;h3 id="orgb4ecbc2"&gt;init.el&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb4ecbc2"&gt;
&lt;p&gt;
Besides installing node you have to make sure that you add &lt;code&gt;js&lt;/code&gt; to your org-babel set up.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
If you already have other languages added this just goes in the same block.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org89bfaf6" class="outline-3"&gt;
&lt;h3 id="org89bfaf6"&gt;Try It&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org89bfaf6"&gt;
&lt;p&gt;
Now that it's set up you can execute javascript in org-babel code blocks, designating them as &lt;code&gt;js&lt;/code&gt; blocks (e.g. &lt;code&gt;#+begin_src js :results output :exports both&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Here's a simple output block.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
test
&lt;/pre&gt;


Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
apple
applebanana
&lt;/pre&gt;


&lt;p&gt;
One thing to note is that this doesn't seem create sessions that persist across blocks. Even though I defined &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in the previous block, this next block raises an error because it doesn't think I've defined &lt;code&gt;y&lt;/code&gt;.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
If you try and put a session argument in the org-babel header you'll get a message saying "Session evaluation with node.js not supported". According to the &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.org.html"&gt;org-babel-js documentation&lt;/a&gt; you can put in special headers to run the code in an alternate REPL, but I tried it and the output ends up in a separate buffer rather than showing up in the org-document, which seems to kind of lessen the usefulness of it. Also the js-comint version dumps extra text into the REPL as well.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org813a088" class="outline-2"&gt;
&lt;h2 id="org813a088"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org813a088"&gt;
&lt;p&gt;
Okay, so this was a very basic hello world for javascript in emacs. The lack of sessions is kind of disappointing, but I don't know how useful this is going to be, anyway, since javascript is so tied to the browser, but there it is.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>javascript</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/javascript-in-org-babel/</guid><pubDate>Sat, 17 Oct 2020 03:48:55 GMT</pubDate></item><item><title>Remote jupyter Sessions With ob-ipython</title><link>https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org83655f0"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org3a60796"&gt;The Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#orgf7a8e6a"&gt;Setting up the Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#orgf4ecf1a"&gt;A Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#orgbf4940c"&gt;One More Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org83655f0" class="outline-2"&gt;
&lt;h2 id="org83655f0"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org83655f0"&gt;
&lt;p&gt;
These are my notes about trying to use a remote jupyter session in org-mode (with ob-ipython). My main source was &lt;a href="https://vxlabs.com/2017/11/30/run-code-on-remote-ipython-kernels-with-emacs-and-orgmode/"&gt;this blog post&lt;/a&gt; from vxlabs, and also the &lt;a href="https://github.com/ipython/ipython/wiki/Cookbook:-Connecting-to-a-remote-kernel-via-ssh"&gt;ipython&lt;/a&gt; instructions for setting up a remote-session. I also referred to the &lt;a href="https://github.com/gregsexton/ob-ipython#working-with-a-remote-session"&gt;ob-ipython notes&lt;/a&gt; on setting up a remote session, although I didn't really understand everything it said until after I had done it once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3a60796" class="outline-2"&gt;
&lt;h2 id="org3a60796"&gt;The Layout&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3a60796"&gt;
&lt;p&gt;
Both this post and the jupyter server are running on my desktop (Hades) while I'm editing them in emacs on my laptop.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf7a8e6a" class="outline-2"&gt;
&lt;h2 id="orgf7a8e6a"&gt;Setting up the Session&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf7a8e6a"&gt;
&lt;p&gt;
The steps are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Find out where the JSON file you will need is going to be put on the server&lt;/li&gt;
&lt;li&gt;Start the server&lt;/li&gt;
&lt;li&gt;Copy the json file that was created to your client&lt;/li&gt;
&lt;li&gt;Start an ipython session to connect to the remote session&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6abb730" class="outline-3"&gt;
&lt;h3 id="org6abb730"&gt;Find Out Where the JSON File Will Be&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6abb730"&gt;
&lt;p&gt;
While ssh'd into the server (and with the appropriate virtual environment running if you need it), enter the command to show the folder where the JSON file will be.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
In my case this is what came out.
&lt;/p&gt;

&lt;pre class="example" id="org91668ad"&gt;
/run/user/1000/jupyter
&lt;/pre&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfed642d" class="outline-3"&gt;
&lt;h3 id="orgfed642d"&gt;Start the Server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfed642d"&gt;
&lt;p&gt;
Change into the directory where you want the jupyter server to run and start the ipython kernel.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
This is what came out for me.
&lt;/p&gt;

&lt;pre class="example" id="org6198724"&gt;
NOTE: When using the `ipython kernel` entry point, Ctrl-C will not work.

To exit, you will have to explicitly quit this process, by either sending
"quit" from a client, or using Ctrl-\ in UNIX-like environments.

To read more about this, see https://github.com/ipython/ipython/issues/2049


To connect another client to this kernel, use:
    --existing kernel-10181.json

&lt;/pre&gt;
&lt;p&gt;
That last line refers to the JSON file that we're going to need on the client side (&lt;code&gt;kernel-10181.json&lt;/code&gt;).
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7e748d6" class="outline-3"&gt;
&lt;h3 id="org7e748d6"&gt;Copy the File From the Server To the Client&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7e748d6"&gt;
&lt;p&gt;
Go back to your client (my laptop in this case) and check where your jupyter installation is.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example" id="orgfd41b6f"&gt;
/run/user/1000/jupyter
&lt;/pre&gt;

&lt;p&gt;
Both my laptop and desktop had the same location, so it's probably the default. Now change into that directory on the client and copy the file from the server.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb6b07de" class="outline-3"&gt;
&lt;h3 id="orgb6b07de"&gt;Start the Client&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb6b07de"&gt;
&lt;p&gt;
You can run this next command anywhere on the client where you can run jupyter.
&lt;/p&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Where &lt;code&gt;kernel-10181.json&lt;/code&gt; is the files copied from the server and &lt;code&gt;Hades&lt;/code&gt; is the ssh alias for my server (so it would be &lt;code&gt;hades@erebus&lt;/code&gt; without the alias).
&lt;/p&gt;

&lt;p&gt;
When you run this command it will open up an ipython prompt that will be connected to the server. This turns out to be more useful than I thought it would be because the prompt that ob-ipython normally opens seems to be broken when I'm connected to the remote client. Maybe there's something else to configure. Anyway, whatever you add to your emacs ob-ipython namespace will be accessible to you in the ipython prompt so you can fiddle with things live in there.
&lt;/p&gt;

&lt;p&gt;
Once you open this it will add another file (&lt;code&gt;kernel-10181-ssh.json&lt;/code&gt; in this case) that you can use to connect if you want to open up more than ipython prompt for some reason:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
You don't pass in the &lt;code&gt;--ssh&lt;/code&gt; flag this time. Note that you're still sharing the same jupyter session so all the variables and stuff will show up in the second console as well.
&lt;/p&gt;

&lt;p&gt;
But, more importantly, this second json file is how we can connect while in emacs.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org16d8c1b" class="outline-3"&gt;
&lt;h3 id="org16d8c1b"&gt;Use The Session&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org16d8c1b"&gt;
&lt;p&gt;
To make use of the session you need to pass in the name of the ssh kernel file as the name of the ipython session.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Anything you do in a block with that session ID will send the commands to the remote server to be interpreted.
&lt;/p&gt;

&lt;p&gt;
To clarify:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;kernel-10181.json&lt;/code&gt; is the file you copy over from the server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kernel-10181-ssh.json&lt;/code&gt; is created on your client and is what you use in the org-babel header&lt;/li&gt;
&lt;/ul&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4ecf1a" class="outline-2"&gt;
&lt;h2 id="orgf4ecf1a"&gt;A Plot&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf4ecf1a"&gt;
&lt;p&gt;
I'm going to use this example from the &lt;a href="https://seaborn.pydata.org/examples/structured_heatmap.html"&gt;seaborn gallery&lt;/a&gt; to test out the setup. It might not be obvious from the post itself but the web-server for this post is also on my remote machine so I can tell if it worked by checking the page in a browser (because if it was using an ipython session on my laptop the page wouldn't get the image).
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc8b0d96" class="outline-3"&gt;
&lt;h3 id="orgc8b0d96"&gt;Imports From PyPi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc8b0d96"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3d0f40f" class="outline-3"&gt;
&lt;h3 id="org3d0f40f"&gt;Plotting Setup&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3d0f40f"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Load the brain networks example dataset
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Select a subset of the networks.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Create a categorical palette to identify the networks.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Convert the palette to vectors that will be drawn on the side of the matrix.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Plot.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/cluster_map.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Besides the ipython shell not working in emacs I also couldn't get it to render images directly in emacs, but they did render on the remote side so I could see the plot in my web-browser.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbf4940c" class="outline-2"&gt;
&lt;h2 id="orgbf4940c"&gt;One More Thing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf4940c"&gt;
&lt;p&gt;
I stumbled over this a couple of times so I thought I should mention that the virtualenv you activate in emacs has to be on your client (the laptop in my case), so to make it easier you should set it before opening the remote document via tramp. If you try to activate the virtualenv while in tramp it will attempt to use the remote machine's (server's) virtualenv. You can see that it's the case in the mini-buffer, but I think being prompted like that made me pick the wrong side. Use the virtualenv on the machine you're working on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>org-mode</category><category>programming</category><category>python</category><guid>https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/</guid><pubDate>Fri, 23 Nov 2018 20:24:49 GMT</pubDate></item><item><title>Disabling Sub-scripting in Org-Mode</title><link>https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/#org3d1b5b5"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/#org2b7a704"&gt;Stack Overflow to the Rescue (Again)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/#org6f292dd"&gt;A Final Note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3d1b5b5" class="outline-2"&gt;
&lt;h2 id="org3d1b5b5"&gt;The Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d1b5b5"&gt;
&lt;p&gt;
If you use underscores in org-mode it will treat them almost the way &lt;a href="https://en.wikipedia.org/wiki/LaTeX#Versions"&gt;latex&lt;/a&gt; does, changing the text that immediately follows the underscore as a sub-string.
&lt;/p&gt;

&lt;p&gt;
This:
&lt;/p&gt;

&lt;pre class="example" id="orgbf0e5ec"&gt;
before-the-underscore_aftertheunderscore
&lt;/pre&gt;

&lt;p&gt;
Is rendered as this:
&lt;/p&gt;

&lt;p&gt;
before-the-underscore&lt;sub&gt;aftertheunderscore&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
But sometimes you just want an underscore (especially if you are writing about python code).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2b7a704" class="outline-2"&gt;
&lt;h2 id="org2b7a704"&gt;Stack Overflow to the Rescue (Again)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2b7a704"&gt;
&lt;p&gt;
I found the answer &lt;a href="https://stackoverflow.com/questions/698562/disabling-underscore-to-subscript-in-emacs-org-mode-export"&gt;on Stack Overflow&lt;/a&gt; (of course) - you can add an &lt;code&gt;#+OPTIONS&lt;/code&gt; directive to the file to disable this behavior. I originally went with the accepted answer which was to add &lt;code&gt;#+OPTIONS: ^:nil&lt;/code&gt;, and it works in most cases, but then I couldn't figure out how to write this post, since the underscores stopped working and I didn't want to have to use MathJax to show what I meant (although maybe that wouldn't be so bad), so now I think the better answer is the one given by &lt;a href="https://stackoverflow.com/users/60183/danielpoe"&gt;danielpoe&lt;/a&gt; in the comments - use &lt;code&gt;#+OPTIONS: ^:{}&lt;/code&gt; instead. This disables the sub-scripting behavior of the underscore in most cases but allows you to add sub-scripting by putting the text following the underscore in curly-braces.
&lt;/p&gt;

&lt;p&gt;
I wrote the example above, for instance, like this:
&lt;/p&gt;

&lt;pre class="example" id="org24dd236"&gt;
before-the-underscore_{aftertheunderscore}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6f292dd" class="outline-2"&gt;
&lt;h2 id="org6f292dd"&gt;A Final Note&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6f292dd"&gt;
&lt;p&gt;
This solution doesn't replicate the original org-mode behavior completely when you use the curly-braces. Without the directive if you have multiple underscores org-mode puts everything after the first underscore in the sub-string and removes all subsequent underscores, smashing the words together.
&lt;/p&gt;

&lt;p&gt;
When I wrote this:
&lt;/p&gt;

&lt;pre class="example" id="orga17d63b"&gt;
before-the-underscore_after_the_under_score
&lt;/pre&gt;

&lt;p&gt;
It came out as this:
&lt;/p&gt;

&lt;p&gt;
before-the-underscore&lt;sub&gt;aftertheunderscore&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
But the curly-braces keeps them:
&lt;/p&gt;

&lt;p&gt;
before-the-underscore&lt;sub&gt;after_the_under_score&lt;/sub&gt;
&lt;/p&gt;

&lt;p&gt;
Which seems like an improvement anyway. 
&lt;/p&gt;

&lt;p&gt;
The only problem now is that I keep forgetting what to type in every time I want to use an underscore, which is why I'm making this post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>how-to</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/disabling-subscripting-in-org-mode/</guid><pubDate>Fri, 03 Aug 2018 15:12:01 GMT</pubDate></item><item><title>bokeh org-mode</title><link>https://necromuralist.github.io/posts/bokeh-org-mode/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org63eb3f4" class="outline-2"&gt;
&lt;h2 id="org63eb3f4"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org63eb3f4"&gt;
&lt;p&gt;
This is an illustration of how to use bokeh with org-mode in nikola. There is a more extensive and flexible explanation of how to do this in &lt;a href="http://cherian.net/posts/bokeh-org-mode.html"&gt;this post&lt;/a&gt; on &lt;a href="http://cherian.net"&gt;cherian.net&lt;/a&gt; but I made these notes to understand how it works and to have a simpler example to refer to.
&lt;/p&gt;

&lt;p&gt;
I was interested in doing this because I'm trying to re-work some of what I did for the Coursera &lt;b&gt;Data Science With Python&lt;/b&gt; specialization by changing the data-sets and building them as blog posts. I might convert the posts to restructured text at some point, but while I'm working with them I'm using org-mode. Also, while most of the time I use &lt;a href="https://matplotlib.org"&gt;matplotlib&lt;/a&gt; for plotting since this is going to be a blog-first approach I decided to go with &lt;a href="https://bokeh.pydata.org/en/latest/"&gt;bokeh&lt;/a&gt;. I had &lt;a href="https://necromuralist.github.io/data_science/posts/bokeh-test/"&gt;previously written&lt;/a&gt; about how to get &lt;b&gt;bokeh&lt;/b&gt; into &lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt; using restructured text, but as an intermediate step I want to do the work in org-mode and still be able to see the output as I'm working. 
&lt;/p&gt;

&lt;p&gt;
The magic mix for this seems to be to use:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt; to build the HTML posts&lt;/li&gt;
&lt;li&gt;&lt;a href="http://orgmode.org"&gt;org-mode&lt;/a&gt;, an emacs mode to format the posts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plugins.getnikola.com/v7/orgmode/"&gt;the orgmode-plugin&lt;/a&gt; for nikola&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; to get &lt;a href="https://jupyter.org"&gt;jupyter/ipython&lt;/a&gt; in the org-mode posts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bokeh.pydata.org/en/latest/docs/user_guide/quickstart.html#userguide-quickstart"&gt;bokeh&lt;/a&gt; to make the plots&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org31b74aa" class="outline-2"&gt;
&lt;h2 id="org31b74aa"&gt;Creating the Bokeh Plot&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org31b74aa"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbedcd4b" class="outline-3"&gt;
&lt;h3 id="orgbedcd4b"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbedcd4b"&gt;
&lt;p&gt;
These are the dependencies. It's really all &lt;code&gt;bokeh&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt; is just there to generate the data-values.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
I probably should save bokeh to this repository to keep the post from breaking in the future, but I'm lazy so I'm just going to import it from a CDN.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfa6150a" class="outline-3"&gt;
&lt;h3 id="orgfa6150a"&gt;The Data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfa6150a"&gt;
&lt;p&gt;
To get a simple example going I'm just going to use some random outputs generated by numpy.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
In order to create a data-structure that bokeh can use (similar to a &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html"&gt;pandas dataframe&lt;/a&gt;) you need to use a &lt;a href="https://bokeh.pydata.org/en/0.10.0/docs/reference/models/sources.html"&gt;ColumnDataSource&lt;/a&gt;.
&lt;/p&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
The keys in the data-dict are essentially the column headers.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Key&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;x&lt;/td&gt;
&lt;td class="org-left"&gt;the x-axis values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;y&lt;/td&gt;
&lt;td class="org-left"&gt;the y-axis values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;desc&lt;/td&gt;
&lt;td class="org-left"&gt;The labels for the tooltip&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Now to get some tool-tips to pop up when you hover over the plot, I'll create a &lt;code&gt;HoverTool&lt;/code&gt;.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
The &lt;code&gt;tooltips&lt;/code&gt; list maps the labels that will show up in the tooltip (the first argument to each tuple) to variables in the &lt;code&gt;ColumnDataSource&lt;/code&gt; (if preceded by an &lt;code&gt;@&lt;/code&gt;) or generated value (if preceded by a &lt;code&gt;$&lt;/code&gt;) The &lt;code&gt;index&lt;/code&gt; value is the index in the array where the data point sits (so for the first point it will be 0, the second will be 1, etc.). The &lt;code&gt;(x, y)&lt;/code&gt; values are the coordinate locations of your pointer when you hover over the data points, and the &lt;code&gt;desc&lt;/code&gt; will be replaced by the label I set in the &lt;code&gt;ColumnDataSource&lt;/code&gt; for a particular data-point.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7e7e19a" class="outline-3"&gt;
&lt;h3 id="org7e7e19a"&gt;The Plot&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7e7e19a"&gt;
&lt;p&gt;
Now I'll create the actual plot (&lt;code&gt;figure&lt;/code&gt;).
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf10667c" class="outline-2"&gt;
&lt;h2 id="orgf10667c"&gt;Getting the Bokeh Plot Into The Post&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf10667c"&gt;
&lt;p&gt;
Finally I'll save the javascript and HTML files needed and then output the blob needed to embed the plot into this post. The &lt;code&gt;autoload_static&lt;/code&gt; function takes the bokeh plot object (&lt;code&gt;fig&lt;/code&gt;), the bokeh javascript that I loaded earlier (&lt;code&gt;bokeh&lt;/code&gt;), and the name of the javascript file that you want it to creat (&lt;code&gt;test.js&lt;/code&gt;) and returns the javascript to save (&lt;code&gt;javascript&lt;/code&gt;) and the HTML fragment that will include the javascript (&lt;code&gt;source&lt;/code&gt;). Note that because of the way nikola structures things I have to create a folder named &lt;code&gt;files/posts/bokeh-org-mode&lt;/code&gt; and save the files there. Since nikola will automatically look in this folder the name you pass into &lt;code&gt;autoload_static&lt;/code&gt; should just be the filename without the path, but when you save the javascript file you will save it there so you need to add the relative path. If my explanation seems a little convoluted, just look at the code below, it's fairly simple.
&lt;/p&gt;

&lt;p&gt;
First I'll create a variable to hold the path to the folder to save the files in. All files for nikola posts go into sub-folders of &lt;code&gt;files/posts/&lt;/code&gt; and since the source file for this post is called &lt;code&gt;bokeh-org-mode.org&lt;/code&gt;, the files to include in it go into the folder &lt;code&gt;files/posts/bokeh-org-mode&lt;/code&gt; (&lt;code&gt;files/posts/&lt;/code&gt; plus the slug for the post).
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;div id="outline-container-org9212fd2" class="outline-3"&gt;
&lt;h3 id="org9212fd2"&gt;The Javascript&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9212fd2"&gt;
&lt;p&gt;
Now, I'll create the javascript source for the plot.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
The &lt;code&gt;javascript&lt;/code&gt; variable holds the actual javascript source code (which then gets saved) while the &lt;code&gt;source&lt;/code&gt; variable holds the string with the HTML to embed the javascript into this post (which I show at the end of this post).
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0a12694" class="outline-3"&gt;
&lt;h3 id="org0a12694"&gt;Embedding the Plot&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0a12694"&gt;
&lt;p&gt;
Finally, we need to print out the string that is stored in the &lt;code&gt;source&lt;/code&gt; variable which then tells org-mode to embed the files into this post. I'll output the full org-block so you can see the header arguments.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'


&lt;script src="https://necromuralist.github.io/posts/bokeh-org-mode/test.js" id="99045dff-710a-4c8e-8565-6fd31b538349" data-bokeh-model-id="f46a6fe0-7aab-47d9-aae0-d14718763236" data-bokeh-doc-id="99649b1a-8c14-49b7-a6ef-c61b3ec6dbae"&gt;&lt;/script&gt;

&lt;p&gt;
And there you have it. I don't have a lot to say about it, other than that if you hover over the data with your cursor and then look up above at the &lt;code&gt;ColumnDataSource&lt;/code&gt; above, you'll see that the variables match the inputs
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5e77d2b" class="outline-2"&gt;
&lt;h2 id="org5e77d2b"&gt;Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5e77d2b"&gt;
&lt;p&gt;
To get a bokeh figure into an org-mode document in nikola:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Create the bokeh plot.&lt;/li&gt;
&lt;li&gt;Create a folder in the &lt;code&gt;files/posts/&lt;/code&gt; folder that matches the slug for the post.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;autoload_static&lt;/code&gt; to convert the bokeh object to javascript and create the HTML tag to embed it.&lt;/li&gt;
&lt;li&gt;Save the javascript in the &lt;code&gt;files/posts/&amp;lt;slug&amp;gt;/&lt;/code&gt; folder that you created&lt;/li&gt;
&lt;li&gt;Print the HTML fragment in an org-mode &lt;code&gt;#+BEGIN_EXPORT html&lt;/code&gt; block.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bokeh</category><category>how-to</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/bokeh-org-mode/</guid><pubDate>Thu, 26 Apr 2018 04:59:50 GMT</pubDate></item><item><title>Org-Babel Ipython and Elpy Conflict</title><link>https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#org91a5ba4"&gt;Short-take&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#orgd742477"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#org9c88823"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#org3583d87"&gt;The Fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/#orgb4c348a"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org91a5ba4" class="outline-2"&gt;
&lt;h2 id="org91a5ba4"&gt;Short-take&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org91a5ba4"&gt;
&lt;p&gt;
If you use &lt;a href="https://elpy.readthedocs.io/en/latest/"&gt;elpy&lt;/a&gt; and &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; together and use the &lt;code&gt;jupyter&lt;/code&gt; option when configuring the &lt;code&gt;elpy&lt;/code&gt; interpreter settings it will break the execution of &lt;code&gt;ob-ipython&lt;/code&gt; code blocks, so use the &lt;code&gt;ipython&lt;/code&gt; version instead. In other words use this in your &lt;code&gt;init.el&lt;/code&gt; file:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd742477" class="outline-2"&gt;
&lt;h2 id="orgd742477"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd742477"&gt;
&lt;p&gt;
I've become quite reliant on &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; for emacs (it lets you use ipython with org-babel to create literate programming documents). I used to use &lt;a href="http://mpastell.com/pweave/"&gt;pweave&lt;/a&gt;, and if I weren't an emacs user I probably would still use it, and of course there's &lt;a href="http://jupyter.org"&gt;jupyter notebooks&lt;/a&gt;, and the attendant &lt;a href="https://github.com/millejoh/emacs-ipython-notebook"&gt;emacs-ipython-notebook&lt;/a&gt; that I've used as well (and sometimes still use - as when I need to hand in a Coursera assignment, for instance), but org-mode and ipython seems to hit the sweet spot for me (at least this week).
&lt;/p&gt;

&lt;p&gt;
So I was more than a little disturbed when I tried to execute a code block on my new laptop and found that nothing would run. This is a description of what happened and the fix, in case I forget the next time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9c88823" class="outline-2"&gt;
&lt;h2 id="org9c88823"&gt;The Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9c88823"&gt;
&lt;p&gt;
I tried executing some python code in an ipython code block but I kept getting an error. This is a toy example of what an ob-ipython block looks like:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
To execute it you'd put your cursor somewhere in the block and enter &lt;code&gt;Control-c Control-c&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
This is the error I was getting:
&lt;/p&gt;

&lt;pre class="example" id="orgae43039"&gt;
There was a fatal error trying to process the request. See *ob-ipython-debug*
&lt;/pre&gt;

&lt;p&gt;
And in the &lt;code&gt;*ob-ipython-debug*&lt;/code&gt; buffer would be this:
&lt;/p&gt;

&lt;pre class="example" id="org8ac5e76"&gt;
Error executing Jupyter command '/home/dogen/.emacs.d/elpa/ob-ipython-20180113.929/client.py': [Errno 2] No such file or directory
&lt;/pre&gt;

&lt;p&gt;
I tried googling for the error, which brought up some Jupyter questions on Stack Overflow that didn't seem relevant. There were also some &lt;i&gt;issues&lt;/i&gt; on the &lt;code&gt;ob-ipython&lt;/code&gt; github site, but none of them looked exactly the same. They seemed to suggest that the wrong python interpreter was being used, but when I brought up the interpreter in emacs (&lt;code&gt;C-c C-v C-z&lt;/code&gt;) it showed the correct interpreter version and I could import the &lt;code&gt;jupyter&lt;/code&gt; moduleâ¦ but since that was what people said was the problem and I was using a virtualenv I decided to try setting up &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;, which apparently lets you switch between python versions fairly easily.
&lt;/p&gt;

&lt;p&gt;
So, I jumped on my desktop to test it out (I ran into the org-mode problem on my laptop, but I was home so I figured I'd switch), but first I brought up emacs and tried executing the same code-block that failed on my laptop, and of course it ran perfectly. So then I went into a long death-spiral of trying to download the ob-ipython git repository and going back in the git-history to see if I could find the place where it might work (my desktop version of ob-ipython was from October of 2017, my laptop's version is from January 2018), and of course none of them worked. Then I tried copying my &lt;code&gt;init.el&lt;/code&gt; file from my desktop to my laptop, and suddenly things worked - so it was a configuration problem, but what was it?
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3583d87" class="outline-2"&gt;
&lt;h2 id="org3583d87"&gt;The Fix&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3583d87"&gt;
&lt;p&gt;
If you go to the &lt;a href="https://github.com/jorgenschaefer/elpy"&gt;elpy&lt;/a&gt; documentation  (elpy is a mode for emacs that makes editing python much easier), there is a &lt;a href="https://elpy.readthedocs.io/en/latest/ide.html#interactive-python"&gt;section on setting up which interpreter to use&lt;/a&gt; - and if you're wondering why I'm suddenly talking about &lt;code&gt;elpy&lt;/code&gt; instead of &lt;code&gt;ob-ipython&lt;/code&gt;, well, it's because it was the problem (or at least using them together was the problem).
&lt;/p&gt;

&lt;p&gt;
The documentation gives you three options for setting the interpreter - python, ipython, or jupyter. This is what my laptop had:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
This is what my desktop had:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
I don't know why I configured them differently, but I tried using the &lt;code&gt;ipython&lt;/code&gt; setting instead of the &lt;code&gt;jupyter&lt;/code&gt; setting and all of a sudden - it worked. Maybe I've now broken something else, but it's fixed for now.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb4c348a" class="outline-2"&gt;
&lt;h2 id="orgb4c348a"&gt;Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb4c348a"&gt;
&lt;p&gt;
This documents a problem that I ran into wherein the &lt;code&gt;elpy&lt;/code&gt; settings I used broke the execution of code blocks by &lt;code&gt;ob-ipython&lt;/code&gt; . Just remember to use &lt;code&gt;ipython&lt;/code&gt; instead of &lt;code&gt;jupyter&lt;/code&gt; and it should be okay. Another day of my life lost to troubleshooting (well, not a &lt;i&gt;whole&lt;/i&gt; day, but too much).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>elpy</category><category>emacs</category><category>org-mode</category><category>python</category><guid>https://necromuralist.github.io/posts/org-babel-ipython-and-elpy-conflict/</guid><pubDate>Fri, 16 Feb 2018 23:50:23 GMT</pubDate></item><item><title>Shell Output With Org-Babel Ipython</title><link>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;One of the nice things about ipython is the ability to run shell commands with &lt;code class="docutils literal"&gt;!&lt;/code&gt;. When you use it in an &lt;a class="reference external" href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; block, though, it will dump the output into a popup rather than in the same emacs org-file. One alternative is to use a shell block instead. I wrote earlier that this requires you to put an echo command in the block to prevent the text going to a pop-up.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-1" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-1" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-2" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-2" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-2"&gt;&lt;/a&gt;head&lt;span class="w"&gt; &lt;/span&gt;Future_Connections.csv
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-3" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-3" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-4" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-4" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-5" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-5" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-6" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-6" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-7" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-7" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Future&lt;span class="w"&gt; &lt;/span&gt;Connection&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-8" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-8" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;840&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-9" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-9" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;197&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-10" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-10" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;979&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-11" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-11" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;519&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;872&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-12" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-12" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;382&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;423&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-13" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-13" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;226&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-14" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-14" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;349&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;905&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-15" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-15" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;429&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;860&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_8fc4c272e751481ea75df3ebdb714a25-16" name="rest_code_8fc4c272e751481ea75df3ebdb714a25-16" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_8fc4c272e751481ea75df3ebdb714a25-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;309&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;989&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turns out that there's a similar solution to the ob-ipython popup, only since it's in python you have to use a print this time.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-1" name="rest_code_babc24b399b04c499482298d90cf66b4-1" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC ipython :session futures :results output&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-2" name="rest_code_babc24b399b04c499482298d90cf66b4-2" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;Future_Connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-3" name="rest_code_babc24b399b04c499482298d90cf66b4-3" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-4" name="rest_code_babc24b399b04c499482298d90cf66b4-4" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-5" name="rest_code_babc24b399b04c499482298d90cf66b4-5" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-6" name="rest_code_babc24b399b04c499482298d90cf66b4-6" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-7" name="rest_code_babc24b399b04c499482298d90cf66b4-7" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+begin_example&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-8" name="rest_code_babc24b399b04c499482298d90cf66b4-8" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-9" name="rest_code_babc24b399b04c499482298d90cf66b4-9" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(6, 840)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-10" name="rest_code_babc24b399b04c499482298d90cf66b4-10" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(4, 197)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-11" name="rest_code_babc24b399b04c499482298d90cf66b4-11" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(620, 979)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-12" name="rest_code_babc24b399b04c499482298d90cf66b4-12" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(519, 872)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-13" name="rest_code_babc24b399b04c499482298d90cf66b4-13" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(382, 423)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-14" name="rest_code_babc24b399b04c499482298d90cf66b4-14" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(97, 226)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-15" name="rest_code_babc24b399b04c499482298d90cf66b4-15" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(349, 905)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-16" name="rest_code_babc24b399b04c499482298d90cf66b4-16" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(429, 860)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-17" name="rest_code_babc24b399b04c499482298d90cf66b4-17" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(309, 989)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-18" name="rest_code_babc24b399b04c499482298d90cf66b4-18" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_babc24b399b04c499482298d90cf66b4-19" name="rest_code_babc24b399b04c499482298d90cf66b4-19" href="https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/#rest_code_babc24b399b04c499482298d90cf66b4-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+end_example&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I actually prefer the shell version, and since this is org-babel it makes more sense to use it, but I forgot about it just now and it took me a little while to figure out how to get the ob-ipython block to work so &lt;strong&gt;*note to future self:&lt;/strong&gt; &lt;em&gt;This is how to make it work, but use a shell block instead.&lt;/em&gt;&lt;/p&gt;</description><category>emacs</category><category>org-mode</category><category>python</category><guid>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</guid><pubDate>Wed, 11 Oct 2017 19:49:19 GMT</pubDate></item><item><title>Org To Jupyter Notebook</title><link>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
I've grown to really like &lt;a href="http://orgmode.org"&gt;org-mode&lt;/a&gt;, particularly with &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt;, but there are times when a real Jupyter notebook is better - if you want to render it on github or use the &lt;code&gt;%matplotlib notebook&lt;/code&gt; feature, for instance. I found a blog post the &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;Kitchin Research Group site&lt;/a&gt; announcing the creation of an exporter and this is some documentation about how to set it up.
&lt;/p&gt;

&lt;div id="outline-container-org634401a" class="outline-2"&gt;
&lt;h2 id="org634401a"&gt;Download&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org634401a"&gt;
&lt;p&gt;
When I originally set this up it was only available from a link on the blog-post, but it has since been added to a much larger github repository called &lt;a href="https://github.com/jkitchin/scimax"&gt;scimax&lt;/a&gt;. I'm assuming this is where the latest version will be kept. Unfortunately there's no license so I don't think you can fork the repository, even more importantly, I can't get it to work, so skip it for now and grab the old one.
&lt;/p&gt;

&lt;pre class="example" id="org5bc9eb2"&gt;
cd ~/.emacs.d
mkdir lisp
wget http://kitchingroup.cheme.cmu.edu/media/ox-ipynb.el
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org03bc8da" class="outline-2"&gt;
&lt;h2 id="org03bc8da"&gt;Install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org03bc8da"&gt;
&lt;p&gt;
Make sure that the lisp folder is in the emacs path by putting this line in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Also make sure that it's loaded by putting this in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd8e61dd" class="outline-2"&gt;
&lt;h2 id="orgd8e61dd"&gt;Use&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd8e61dd"&gt;
&lt;p&gt;
In your org-mode file use the &lt;code&gt;export-ipython&lt;/code&gt; function to export it to an &lt;code&gt;ipynb&lt;/code&gt; file.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Note that this will only work if you have &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; installed and at least one ipython code block in the org-file.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</guid><pubDate>Fri, 14 Apr 2017 03:00:28 GMT</pubDate></item><item><title>Inserting Text Between Methods in Org-Mode</title><link>https://necromuralist.github.io/posts/org-babel-noweb-ref/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#orgc33e734"&gt;The Tangle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org3ae65a2"&gt;The First Class&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org052e896"&gt;The Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org4807b5a"&gt;The Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org7185816"&gt;The Main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org8c35012"&gt;Trying it out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/org-babel-noweb-ref/#org6fa7677"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
This is an attempt to get org-mode to insert text between methods in a class definition using the noweb-ref property. I think you can also do it by just tangling everything to the same file, but I like the noweb notation better.
&lt;/p&gt;

&lt;div id="outline-container-orgc33e734" class="outline-2"&gt;
&lt;h2 id="orgc33e734"&gt;The Tangle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc33e734"&gt;
&lt;p&gt;
To keep it simple I'm just going to include a section for the class definition and a &lt;code&gt;main&lt;/code&gt; section to check out the results. Note that to be able to break up the class definition I had to turn off org-mode's clean-up so all the python blocks have to be indented exactly the way they will be in the final python file.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3ae65a2" class="outline-2"&gt;
&lt;h2 id="org3ae65a2"&gt;The First Class&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3ae65a2"&gt;
&lt;p&gt;
This first class won't do much, but if I understand the documentation I should be able to insert text between the parts of it and still have it work when the python gets tangled out. The org-mode source block starts like this - &lt;code&gt;#+BEGIN_SRC python :noweb-ref first-class&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org052e896" class="outline-3"&gt;
&lt;h3 id="org052e896"&gt;The Constructor&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org052e896"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4807b5a" class="outline-3"&gt;
&lt;h3 id="org4807b5a"&gt;The Call&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4807b5a"&gt;
&lt;p&gt;
The call emits the name. To concatenate this method to the previous block I'm using the same org-mode source-block header as I did with the constructor (&lt;code&gt;#+BEGIN_SRC python :noweb-ref first-class&lt;/code&gt;). You could use a different name and insert another reference in the tangle but this seems more logical to me. One problem here is that python-mode (or some other mode) will interpret the methods as stand-alone functions and move them flush left. To fix this I had to turn off the automatic indentation using &lt;code&gt;(setq org-src-preserve-indentation t)&lt;/code&gt;. This means that you have to keep track of the indentation yourself, regardless of where the code sits in the org-mode document (so as you create sub-sections it will look uglier and uglier in the original document, at least to me). Putting the method in a separate block also requires that you to insert an empty line before the method to  keep it from being stuck to the bottom of the previous one, but it doesn't include it when it gets exported to HTML, so you can't see it in this post. In fact, I noticed afterwards that the HTML export also stripped out the indentation on the left so you can't really see what I'm talking about.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7185816" class="outline-2"&gt;
&lt;h2 id="org7185816"&gt;The Main&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7185816"&gt;
&lt;p&gt;
This part constructs the &lt;code&gt;FirstClass&lt;/code&gt; object and calls it.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8c35012" class="outline-2"&gt;
&lt;h2 id="org8c35012"&gt;Trying it out&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8c35012"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
Bob
&lt;/pre&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6fa7677" class="outline-2"&gt;
&lt;h2 id="org6fa7677"&gt;Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6fa7677"&gt;
&lt;p&gt;
The point of trying this out is that I want to be able to break up and document class-methods better. Unfortunately it requires you to do a little more fiddling with the white-space yourself and makes the source org-mode file a little harder to read (I think) but I'm going to try it for a little while and see if the resulting documents are worth the extra headache. Maybe I'll just have to stick with docstrings for documenting the separate methodsâ¦
&lt;/p&gt;

&lt;p&gt;
This bit at the end makes it so the indentation is always preserved, even if the &lt;code&gt;init.el&lt;/code&gt; file isn't set up that way.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>literate programming</category><category>org-babel</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/org-babel-noweb-ref/</guid><pubDate>Sun, 19 Feb 2017 19:06:06 GMT</pubDate></item></channel></rss>