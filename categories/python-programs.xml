<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about python programs)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/python-programs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 20 Sep 2018 15:06:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>pip-tools and pipdeptree</title><link>https://necromuralist.github.io/posts/pip-tools-and-pipdeptree/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orgf79177a" class="outline-2"&gt;
&lt;h2 id="orgf79177a"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf79177a"&gt;
&lt;p&gt;
I was looking for a way to update python dependencies that I'd installed with &lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; when I stumbled upon &lt;a href="https://github.com/jazzband/pip-tools/"&gt;pip-tools&lt;/a&gt;. I'm not particularly good about keeping everything in sync and up-to-date so I'm hoping that this will make it easier to do and thus more likely that I'll do it. It's been a little while since I first used it and I had to look it up, so these are my notes to my future self.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7581767" class="outline-2"&gt;
&lt;h2 id="org7581767"&gt;First pipdeptree&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7581767"&gt;
&lt;p&gt;
&lt;code&gt;pip-tools&lt;/code&gt; installs a command named &lt;code&gt;pip-compile&lt;/code&gt; which will use either the requirements you put in your &lt;code&gt;setup.py&lt;/code&gt; file or a special file named &lt;code&gt;requirements.in&lt;/code&gt; (if you call it this you don't have to pass in the filename, otherwise you have to tell it where to look). Unless there's only a few requirements I prefer to use a separate file, rather than &lt;code&gt;setup.py&lt;/code&gt;, since it makes it clearer and more likely that I'll keep it up to date. The &lt;code&gt;requirements.in&lt;/code&gt; file is a list of your dependencies but unlike the &lt;code&gt;requirements.txt&lt;/code&gt; file, it doesn't have version numbers, the version numbers are added when you call the &lt;code&gt;pip-compile&lt;/code&gt; command. 
&lt;/p&gt;

&lt;p&gt;
So where does the &lt;code&gt;requirements.in&lt;/code&gt; file come from? You have to make it. &lt;i&gt;But if you're editing things by hand, doesn't this kind of make it less likely you'll maintain it?&lt;/i&gt; Yes, which is where &lt;a href="https://github.com/naiquevin/pipdeptree"&gt;&lt;code&gt;pipdeptree&lt;/code&gt;&lt;/a&gt; comes in. &lt;code&gt;pipdeptree&lt;/code&gt; will list all the python dependencies you installed as well as everything those dependencies pulled in as their dependencies. It's usefull to take a look at how a dependency you didn't directly install got into your virtual environment. You can install it from pypi.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pipdeptree
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here's its help output.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree -h
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
usage: pipdeptree [-h] [-v] [-f] [-a] [-l] [-u] [-w [{silence,suppress,fail}]]
                  [-r] [-p PACKAGES] [-j] [--json-tree]
                  [--graph-output OUTPUT_FORMAT]

Dependency tree of the installed python packages

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  -f, --freeze          Print names so as to write freeze files
  -a, --all             list all deps at top level
  -l, --local-only      If in a virtualenv that has global access do not show
                        globally installed packages
  -u, --user-only       Only show installations in the user site dir
  -w [{silence,suppress,fail}], --warn [{silence,suppress,fail}]
                        Warning control. "suppress" will show warnings but
                        return 0 whether or not they are present. "silence"
                        will not show warnings at all and always return 0.
                        "fail" will show warnings and return 1 if any are
                        present. The default is "suppress".
  -r, --reverse         Shows the dependency tree in the reverse fashion ie.
                        the sub-dependencies are listed with the list of
                        packages that need them under them.
  -p PACKAGES, --packages PACKAGES
                        Comma separated list of select packages to show in the
                        output. If set, --all will be ignored.
  -j, --json            Display dependency tree as json. This will yield "raw"
                        output that may be used by external tools. This option
                        overrides all other options.
  --json-tree           Display dependency tree as json which is nested the
                        same way as the plain text output printed by default.
                        This option overrides all other options (except
                        --json).
  --graph-output OUTPUT_FORMAT
                        Print a dependency graph in the specified output
                        format. Available are all formats supported by
                        GraphViz, e.g.: dot, jpeg, pdf, png, svg
&lt;/pre&gt;

&lt;p&gt;
If you look at the options you can see that there's a &lt;code&gt;--freeze&lt;/code&gt; option, that's what we'll be using. Let's look at some of what that looks like.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
So it looks like the output of &lt;code&gt;pip freeze&lt;/code&gt; except it puts the packages you installed flush-left and then uses indentation to indicate what that package installed. In the example above, I installed &lt;a href="https://www.getnikola.com/handbook.html"&gt;Nikola&lt;/a&gt;, then Nikola installed &lt;a href="http://pydoit.org/"&gt;doit&lt;/a&gt;, and doit installed &lt;a href="https://github.com/cloudpipe/cloudpickle"&gt;cloudpickle&lt;/a&gt; and &lt;a href="https://github.com/seb-m/pyinotify"&gt;pyinotify&lt;/a&gt;. I kind of remember needing to install &lt;code&gt;pyinotify&lt;/code&gt; myself, but maybe &lt;code&gt;pydeptree&lt;/code&gt; caught that it was a dependency that &lt;code&gt;doit&lt;/code&gt; is using. Anyway.
&lt;/p&gt;

&lt;p&gt;
For our &lt;code&gt;requirements.in&lt;/code&gt; file we only want the names, and although there might be a reason to keep the entire tree, I think it makes it easier to understand what I'm using if the file only holds the dependencies at the top-level (the ones that I'm using directly, rather than being a dependency of a dependency). So, we'll use a little &lt;a href="https://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt;. First, since I'm a python-programmer I'm going to give it the &lt;code&gt;-P&lt;/code&gt; flag to use perl escape codes. Next, we want to only match the lines that have alpha-numeric characters as the first character in the line.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;grep&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-P&lt;/code&gt;, &lt;code&gt;--perl-regexp&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Use perl regular expression syntax&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match the beggining of a line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match alpha-numeric character and underscores&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match one or more&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
First, let's see how many total dependencies there are.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
: 160
&lt;/pre&gt;

&lt;p&gt;
So there are 160 dependencies total. How many did I install?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --perl-regexp &lt;span class="s2"&gt;"^\w+"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Out of the 160 only 11 were directly installed by me.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;So we're done, right?&lt;/i&gt; Not yet, we need to get rid of the &lt;code&gt;==&lt;/code&gt; and version numbers. I hadn't known that grep had this feature, since I normally use python instead of grep, but grep has an &lt;code&gt;--only-matching&lt;/code&gt; option that will discard the parts of the line that don't match. 
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;--only-matching&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Only show the parts of the line that match&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --only-matching --perl-regexp &lt;span class="s2"&gt;"^\w+"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you look at the first entry you'll notice it says &lt;code&gt;ghp&lt;/code&gt;, but the actual name of the package is &lt;code&gt;ghp-import&lt;/code&gt;, but the hyphen isn't part of the alpha-numeric set, so we'll have to add it.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;grep&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match one or the entries in the brackets&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep -oP &lt;span class="s2"&gt;"^[\w\-]+"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This looks like what we want, but there's a couple of things that we should take care of that would happen if this were for an installed package.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;there's &lt;a href="https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1635463"&gt;a bug in ubuntu&lt;/a&gt; that causes pip to include &lt;code&gt;pkg-resources&lt;/code&gt;, which isn't something you can install.&lt;/li&gt;
&lt;li&gt;it will add an extra entry for your python egg, something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="example"&gt;
-e git+git@github.com:russell-n/iperflexer.git@65f4d3ca72670591f584efa6fa9bfd64c18a925b#egg=iperflexer
&lt;/pre&gt;

&lt;p&gt;
So we should filter those out.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;--invert-match&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Return lines that don't match&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --only-matching --perl-regexp &lt;span class="s2"&gt;"^[\w\-]+"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep --invert-match &lt;span class="s2"&gt;"\-e\|pkg"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
ghp-import2
graphviz
Nikola
notebook
pip-tools
pipdeptree
virtualfish
watchdog
webassets
wheel
ws4py
&lt;/pre&gt;

&lt;p&gt;
There are probaby other exceptions that have to be added for other installations, but this looks like enough for us. Now we can redirect this to a &lt;code&gt;requirements.in&lt;/code&gt; file and we're ready for &lt;code&gt;pip-tools&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
pipdeptree --freeze | grep --only-matching --perl-regexp "^[\w\-]+" | grep --invert-match "\-e\|pkg" &amp;gt; requirements.in
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad1f813" class="outline-2"&gt;
&lt;h2 id="orgad1f813"&gt;pip-compile&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgad1f813"&gt;
&lt;p&gt;
&lt;code&gt;pip-compile&lt;/code&gt; will read in the &lt;code&gt;requirements.in&lt;/code&gt; file and add the version numbers and can create a &lt;code&gt;requirements.txt&lt;/code&gt; file. It will automatically look for the &lt;code&gt;requirements.in&lt;/code&gt; file or you can explicitly pass in the filename.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file requirements.txt requirements.in
#
argh==0.26.2              # via watchdog
backcall==0.1.0           # via ipython
bleach==2.1.3             # via nbconvert
blinker==1.4              # via nikola
&lt;/pre&gt;

&lt;p&gt;
You'll notice it adds in the dependencies of the dependencies and shows what requries them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org86bd733" class="outline-2"&gt;
&lt;h2 id="org86bd733"&gt;Well, that was a lot of work just for that.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org86bd733"&gt;
&lt;p&gt;
If we stopped at this point we'd have:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;a way to check who installed what using &lt;code&gt;pipdeptree&lt;/code&gt; (as well as a way to plot the dependencies as a graph)&lt;/li&gt;
&lt;li&gt;a way to separate out our dependencies into a separate file (&lt;code&gt;requirements.in&lt;/code&gt;) to make it easier to read&lt;/li&gt;
&lt;li&gt;a way to create our &lt;code&gt;requirements.txt&lt;/code&gt; file using our &lt;code&gt;requirements.in&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I think that's kind of nice already, especially if you end up with a lot of dependencies. Try working with &lt;a href="http://www.sphinx-doc.org/en/master/"&gt;sphinx&lt;/a&gt; and &lt;a href="http://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt; and you'll see things start to explode. But of course, there's always more. 
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9a90497" class="outline-3"&gt;
&lt;h3 id="org9a90497"&gt;Upgrade&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9a90497"&gt;
&lt;p&gt;
You can run  &lt;code&gt;pip-compile&lt;/code&gt; with the &lt;code&gt;--upgrade&lt;/code&gt; option to try and update dependencies whenever you want to make sure you have the latest of everything (you can do it per-package too, but nah).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile --upgrade &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file requirements.txt requirements.in
#
argh==0.26.2              # via watchdog
backcall==0.1.0           # via ipython
bleach==2.1.3             # via nbconvert
blinker==1.4              # via nikola
&lt;/pre&gt;

&lt;p&gt;
This will upgrade your installation but not update the &lt;code&gt;requirements.txt&lt;/code&gt; file, so you can test it out and see if everything works before updating the &lt;code&gt;requirements.txt&lt;/code&gt;. If things don't work out, you could reinstall from the &lt;code&gt;requirements.txt&lt;/code&gt; file, but see the next section for another way. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf9e2c80" class="outline-3"&gt;
&lt;h3 id="orgf9e2c80"&gt;Sync&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf9e2c80"&gt;
&lt;p&gt;
&lt;code&gt;pip-tools&lt;/code&gt; also installed a command called &lt;code&gt;pip-sync&lt;/code&gt; which will keep you in sync with what is in the requirements file, so as long as &lt;code&gt;requirements.txt&lt;/code&gt; is always a working version, you can sync up with it to avoid problems with changes in any of the dependencies. This is different from the &lt;code&gt;--upgrade&lt;/code&gt; option in that it will only install the exact version in the requirements file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-sync
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Collecting backcall==0.1.0
Collecting bleach==2.1.3
  Using cached https://files.pythonhosted.org/packages/30/b6/a8cffbb9ab4b62b557c22703163735210e9cd857d533740c64e1467d228e/bleach-2.1.3-py2.py3-none-any.whl
Collecting certifi==2018.4.16
  Using cached https://files.pythonhosted.org/packages/7c/e6/92ad559b7192d846975fc916b65f667c7b8c3a32bea7372340bfe9a15fa5/certifi-2018.4.16-py2.py3-none-any.whl
Collecting cloudpickle==0.5.3
  Using cached https://files.pythonhosted.org/packages/e7/bf/60ae7ec1e8c6742d2abbb6819c39a48ee796793bcdb7e1d5e41a3e379ddd/cloudpickle-0.5.3-py2.py3-none-any.whl
Successfully installed backcall-0.1.0 bleach-2.1.3 certifi-2018.4.16 cloudpickle-0.5.3 decorator-4.3.0 doit-0.31.1 ipykernel-4.8.2 ipython-6.4.0 jedi-0.12.0 jupyter-client-5.2.3 logbook-1.4.0 lxml-4.2.1 natsort-5.3.2 nikola-7.8.15 notebook-5.5.0 parso-0.2.1 pexpect-4.6.0 pillow-5.1.0 python-dateutil-2.7.3 send2trash-1.5.0 tornado-5.0.2 virtualenv-16.0.0 virtualfish-1.0.6 wheel-0.31.1 ws4py-0.5.1
&lt;/pre&gt;

&lt;p&gt;
Since I upgraded the installation the &lt;code&gt;requirements.txt&lt;/code&gt; file is now behind the latests versions so by syncing I undid the upgrade. This time I'll upgrade again and save the output.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile --upgrade
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So now the file and my installation should be in sync.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-sync
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
: Everything up-to-date
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf870239" class="outline-2"&gt;
&lt;h2 id="orgf870239"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf870239"&gt;
&lt;p&gt;
So there you have it, how to keep dependencies synced. The &lt;a href="https://pypi.org/project/pip-tools/"&gt;README&lt;/a&gt; for pip-tools is much briefer, but I thought I'd add a little more detail to the part of it that I plan to use the most.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python programs</category><guid>https://necromuralist.github.io/posts/pip-tools-and-pipdeptree/</guid><pubDate>Sat, 09 Jun 2018 19:52:57 GMT</pubDate></item></channel></rss>