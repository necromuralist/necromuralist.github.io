<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about HowTo)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_howto.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 11 Jul 2018 01:56:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>OpenVPN on Ubuntu 18.04</title><link>https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orgb292ec7" class="outline-2"&gt;
&lt;h2 id="orgb292ec7"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb292ec7"&gt;
&lt;p&gt;
I'm connecting to a remote network using &lt;a href="https://openvpn.net/"&gt;OpenVPN&lt;/a&gt; served by an ASUS access point. I originally did it at the command line.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo openvpn --config client.ovpn
&lt;/pre&gt;

&lt;p&gt;
It turns out that this doesn't allow me to access anything outside of the network that I was connecting to. From what I can tell it's a DNS problem, but nothing I found about fixing DNS problems with OpenVPN from the command line worked. Luckily the Network Settings GUI works, but even then, it didn't work out of the box.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3befd7f" class="outline-2"&gt;
&lt;h2 id="org3befd7f"&gt;Initial Configuration&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3befd7f"&gt;
&lt;p&gt;
First, not everything you need is installed. Besides the openvpn client itself (which I had installed before trying to run it at the command line) you need some things for the network settings as well.
&lt;/p&gt;

&lt;pre class="example"&gt;
apt install openvpn network-manager-openvpn network-manager-openvpn-gnome
&lt;/pre&gt;

&lt;p&gt;
Now open the network settings.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/network_settings_menu.png" alt=" network_settings_menu.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
In the window that pops up click on the + sign to add a connection.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/network_settings.png" alt=" network_settings.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
In the window that then pops up click on &lt;code&gt;Import from file...&lt;/code&gt; (I'm assuming you are using a config file).
&lt;/p&gt;

&lt;p&gt;
Navigate to the config file, and double-click on it. In the dialog that pops up enter whatever extra information you need. In my case it was the username and password.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/vpn_dialog.png" alt=" vpn_dialog.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Click on the green 'Add' button and you should now have an entry for your VPN connection in the network settings. Click on the on switch (initially labeled 'Off') and if you're lucky it will connect.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/add_vpn.png" alt=" add_vpn.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org960f72a" class="outline-2"&gt;
&lt;h2 id="org960f72a"&gt;Fixing the Password Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org960f72a"&gt;
&lt;p&gt;
Unfortunately for me it didn't connect. In &lt;code&gt;/var/log/syslog&lt;/code&gt; I could see entries like this:
&lt;/p&gt;

&lt;pre class="example"&gt;
gnome-shell[2805]: Invalid VPN service type (cannot find authentication binary)
&lt;/pre&gt;

&lt;p&gt;
I don't know if the message is directly telling you this (it doesn't seem to), but it turns out that for some reason the Network Settings doesn't save your password. Look in &lt;code&gt;/etc/NetworkManager/system-connections/&lt;/code&gt; for a file that matches the name you gave your vpn in the settings. In my case it was just called 'client'. Open it as root in an editor.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo emacs /etc/NetworkManager/system-connections/client
&lt;/pre&gt;

&lt;p&gt;
Then change this line in the &lt;code&gt;[vpn]&lt;/code&gt; section:
&lt;/p&gt;

&lt;pre class="example"&gt;
password-flags=1
&lt;/pre&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;pre class="example"&gt;
password-flags=0
&lt;/pre&gt;

&lt;p&gt;
Then add this section.
&lt;/p&gt;

&lt;pre class="example"&gt;
[vpn-secrets]
password="your-password"
&lt;/pre&gt;

&lt;p&gt;
Where &lt;code&gt;"your-password"&lt;/code&gt; is your vpn password. &lt;i&gt;The quotation marks around your password are required.&lt;/i&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org143f109" class="outline-2"&gt;
&lt;h2 id="org143f109"&gt;Now Really Connect&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org143f109"&gt;
&lt;p&gt;
First restart the network manager.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo service network-manager restart
&lt;/pre&gt;

&lt;p&gt;
Now re-open the network settings and click on the switch again. With any luck this time it will stay on and you can check by going to one of the devices on your VPN network.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/switch_on.png" alt=" switch_on.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc6f5a83" class="outline-2"&gt;
&lt;h2 id="orgc6f5a83"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc6f5a83"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Network Manager Dependencies: &lt;a href="https://askubuntu.com/questions/579159/unable-to-load-vpn-connection-editor-in-ubuntu-14-04-lts"&gt;https://askubuntu.com/questions/579159/unable-to-load-vpn-connection-editor-in-ubuntu-14-04-lts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add VPN Password: &lt;a href="https://askubuntu.com/questions/976719/unable-to-connect-point-to-point-tunneling-protocol-pptp-vpn-in-ubuntu-17-10"&gt;https://askubuntu.com/questions/976719/unable-to-connect-point-to-point-tunneling-protocol-pptp-vpn-in-ubuntu-17-10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>howto ubuntu</category><guid>https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/</guid><pubDate>Wed, 11 Jul 2018 01:11:39 GMT</pubDate></item><item><title>pip-tools and pipdeptree</title><link>https://necromuralist.github.io/posts/pip-tools-and-pipdeptree/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orgf79177a" class="outline-2"&gt;
&lt;h2 id="orgf79177a"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf79177a"&gt;
&lt;p&gt;
I was looking for a way to update python dependencies that I'd installed with &lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; when I stumbled upon &lt;a href="https://github.com/jazzband/pip-tools/"&gt;pip-tools&lt;/a&gt;. I'm not particularly good about keeping everything in sync and up-to-date so I'm hoping that this will make it easier to do and thus more likely that I'll do it. It's been a little while since I first used it and I had to look it up, so these are my notes to my future self.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7581767" class="outline-2"&gt;
&lt;h2 id="org7581767"&gt;First pipdeptree&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7581767"&gt;
&lt;p&gt;
&lt;code&gt;pip-tools&lt;/code&gt; installs a command named &lt;code&gt;pip-compile&lt;/code&gt; which will use either the requirements you put in your &lt;code&gt;setup.py&lt;/code&gt; file or a special file named &lt;code&gt;requirements.in&lt;/code&gt; (if you call it this you don't have to pass in the filename, otherwise you have to tell it where to look). Unless there's only a few requirements I prefer to use a separate file, rather than &lt;code&gt;setup.py&lt;/code&gt;, since it makes it clearer and more likely that I'll keep it up to date. The &lt;code&gt;requirements.in&lt;/code&gt; file is a list of your dependencies but unlike the &lt;code&gt;requirements.txt&lt;/code&gt; file, it doesn't have version numbers, the version numbers are added when you call the &lt;code&gt;pip-compile&lt;/code&gt; command. 
&lt;/p&gt;

&lt;p&gt;
So where does the &lt;code&gt;requirements.in&lt;/code&gt; file come from? You have to make it. &lt;i&gt;But if you're editing things by hand, doesn't this kind of make it less likely you'll maintain it?&lt;/i&gt; Yes, which is where &lt;a href="https://github.com/naiquevin/pipdeptree"&gt;&lt;code&gt;pipdeptree&lt;/code&gt;&lt;/a&gt; comes in. &lt;code&gt;pipdeptree&lt;/code&gt; will list all the python dependencies you installed as well as everything those dependencies pulled in as their dependencies. It's usefull to take a look at how a dependency you didn't directly install got into your virtual environment. You can install it from pypi.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pipdeptree
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here's its help output.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree -h
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
usage: pipdeptree [-h] [-v] [-f] [-a] [-l] [-u] [-w [{silence,suppress,fail}]]
                  [-r] [-p PACKAGES] [-j] [--json-tree]
                  [--graph-output OUTPUT_FORMAT]

Dependency tree of the installed python packages

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  -f, --freeze          Print names so as to write freeze files
  -a, --all             list all deps at top level
  -l, --local-only      If in a virtualenv that has global access do not show
                        globally installed packages
  -u, --user-only       Only show installations in the user site dir
  -w [{silence,suppress,fail}], --warn [{silence,suppress,fail}]
                        Warning control. "suppress" will show warnings but
                        return 0 whether or not they are present. "silence"
                        will not show warnings at all and always return 0.
                        "fail" will show warnings and return 1 if any are
                        present. The default is "suppress".
  -r, --reverse         Shows the dependency tree in the reverse fashion ie.
                        the sub-dependencies are listed with the list of
                        packages that need them under them.
  -p PACKAGES, --packages PACKAGES
                        Comma separated list of select packages to show in the
                        output. If set, --all will be ignored.
  -j, --json            Display dependency tree as json. This will yield "raw"
                        output that may be used by external tools. This option
                        overrides all other options.
  --json-tree           Display dependency tree as json which is nested the
                        same way as the plain text output printed by default.
                        This option overrides all other options (except
                        --json).
  --graph-output OUTPUT_FORMAT
                        Print a dependency graph in the specified output
                        format. Available are all formats supported by
                        GraphViz, e.g.: dot, jpeg, pdf, png, svg
&lt;/pre&gt;

&lt;p&gt;
If you look at the options you can see that there's a &lt;code&gt;--freeze&lt;/code&gt; option, that's what we'll be using. Let's look at some of what that looks like.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
So it looks like the output of &lt;code&gt;pip freeze&lt;/code&gt; except it puts the packages you installed flush-left and then uses indentation to indicate what that package installed. In the example above, I installed &lt;a href="https://www.getnikola.com/handbook.html"&gt;Nikola&lt;/a&gt;, then Nikola installed &lt;a href="http://pydoit.org/"&gt;doit&lt;/a&gt;, and doit installed &lt;a href="https://github.com/cloudpipe/cloudpickle"&gt;cloudpickle&lt;/a&gt; and &lt;a href="https://github.com/seb-m/pyinotify"&gt;pyinotify&lt;/a&gt;. I kind of remember needing to install &lt;code&gt;pyinotify&lt;/code&gt; myself, but maybe &lt;code&gt;pydeptree&lt;/code&gt; caught that it was a dependency that &lt;code&gt;doit&lt;/code&gt; is using. Anyway.
&lt;/p&gt;

&lt;p&gt;
For our &lt;code&gt;requirements.in&lt;/code&gt; file we only want the names, and although there might be a reason to keep the entire tree, I think it makes it easier to understand what I'm using if the file only holds the dependencies at the top-level (the ones that I'm using directly, rather than being a dependency of a dependency). So, we'll use a little &lt;a href="https://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt;. First, since I'm a python-programmer I'm going to give it the &lt;code&gt;-P&lt;/code&gt; flag to use perl escape codes. Next, we want to only match the lines that have alpha-numeric characters as the first character in the line.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;grep&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-P&lt;/code&gt;, &lt;code&gt;--perl-regexp&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Use perl regular expression syntax&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match the beggining of a line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match alpha-numeric character and underscores&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match one or more&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
First, let's see how many total dependencies there are.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
: 160
&lt;/pre&gt;

&lt;p&gt;
So there are 160 dependencies total. How many did I install?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --perl-regexp &lt;span class="s2"&gt;"^\w+"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Out of the 160 only 11 were directly installed by me.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;So we're done, right?&lt;/i&gt; Not yet, we need to get rid of the &lt;code&gt;==&lt;/code&gt; and version numbers. I hadn't known that grep had this feature, since I normally use python instead of grep, but grep has an &lt;code&gt;--only-matching&lt;/code&gt; option that will discard the parts of the line that don't match. 
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;--only-matching&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Only show the parts of the line that match&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --only-matching --perl-regexp &lt;span class="s2"&gt;"^\w+"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you look at the first entry you'll notice it says &lt;code&gt;ghp&lt;/code&gt;, but the actual name of the package is &lt;code&gt;ghp-import&lt;/code&gt;, but the hyphen isn't part of the alpha-numeric set, so we'll have to add it.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;grep&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Match one or the entries in the brackets&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep -oP &lt;span class="s2"&gt;"^[\w\-]+"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This looks like what we want, but there's a couple of things that we should take care of that would happen if this were for an installed package.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;there's &lt;a href="https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1635463"&gt;a bug in ubuntu&lt;/a&gt; that causes pip to include &lt;code&gt;pkg-resources&lt;/code&gt;, which isn't something you can install.&lt;/li&gt;
&lt;li&gt;it will add an extra entry for your python egg, something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="example"&gt;
-e git+git@github.com:russell-n/iperflexer.git@65f4d3ca72670591f584efa6fa9bfd64c18a925b#egg=iperflexer
&lt;/pre&gt;

&lt;p&gt;
So we should filter those out.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;--invert-match&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Return lines that don't match&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipdeptree --freeze &lt;span class="p"&gt;|&lt;/span&gt; grep --only-matching --perl-regexp &lt;span class="s2"&gt;"^[\w\-]+"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep --invert-match &lt;span class="s2"&gt;"\-e\|pkg"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
ghp-import2
graphviz
Nikola
notebook
pip-tools
pipdeptree
virtualfish
watchdog
webassets
wheel
ws4py
&lt;/pre&gt;

&lt;p&gt;
There are probaby other exceptions that have to be added for other installations, but this looks like enough for us. Now we can redirect this to a &lt;code&gt;requirements.in&lt;/code&gt; file and we're ready for &lt;code&gt;pip-tools&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
pipdeptree --freeze | grep --only-matching --perl-regexp "^[\w\-]+" | grep --invert-match "\-e\|pkg" &amp;gt; requirements.in
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad1f813" class="outline-2"&gt;
&lt;h2 id="orgad1f813"&gt;pip-compile&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgad1f813"&gt;
&lt;p&gt;
&lt;code&gt;pip-compile&lt;/code&gt; will read in the &lt;code&gt;requirements.in&lt;/code&gt; file and add the version numbers and can create a &lt;code&gt;requirements.txt&lt;/code&gt; file. It will automatically look for the &lt;code&gt;requirements.in&lt;/code&gt; file or you can explicitly pass in the filename.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file requirements.txt requirements.in
#
argh==0.26.2              # via watchdog
backcall==0.1.0           # via ipython
bleach==2.1.3             # via nbconvert
blinker==1.4              # via nikola
&lt;/pre&gt;

&lt;p&gt;
You'll notice it adds in the dependencies of the dependencies and shows what requries them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org86bd733" class="outline-2"&gt;
&lt;h2 id="org86bd733"&gt;Well, that was a lot of work just for that.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org86bd733"&gt;
&lt;p&gt;
If we stopped at this point we'd have:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;a way to check who installed what using &lt;code&gt;pipdeptree&lt;/code&gt; (as well as a way to plot the dependencies as a graph)&lt;/li&gt;
&lt;li&gt;a way to separate out our dependencies into a separate file (&lt;code&gt;requirements.in&lt;/code&gt;) to make it easier to read&lt;/li&gt;
&lt;li&gt;a way to create our &lt;code&gt;requirements.txt&lt;/code&gt; file using our &lt;code&gt;requirements.in&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I think that's kind of nice already, especially if you end up with a lot of dependencies. Try working with &lt;a href="http://www.sphinx-doc.org/en/master/"&gt;sphinx&lt;/a&gt; and &lt;a href="http://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt; and you'll see things start to explode. But of course, there's always more. 
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9a90497" class="outline-3"&gt;
&lt;h3 id="org9a90497"&gt;Upgrade&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9a90497"&gt;
&lt;p&gt;
You can run  &lt;code&gt;pip-compile&lt;/code&gt; with the &lt;code&gt;--upgrade&lt;/code&gt; option to try and update dependencies whenever you want to make sure you have the latest of everything (you can do it per-package too, but nah).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile --upgrade &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file requirements.txt requirements.in
#
argh==0.26.2              # via watchdog
backcall==0.1.0           # via ipython
bleach==2.1.3             # via nbconvert
blinker==1.4              # via nikola
&lt;/pre&gt;

&lt;p&gt;
This will upgrade your installation but not update the &lt;code&gt;requirements.txt&lt;/code&gt; file, so you can test it out and see if everything works before updating the &lt;code&gt;requirements.txt&lt;/code&gt;. If things don't work out, you could reinstall from the &lt;code&gt;requirements.txt&lt;/code&gt; file, but see the next section for another way. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf9e2c80" class="outline-3"&gt;
&lt;h3 id="orgf9e2c80"&gt;Sync&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf9e2c80"&gt;
&lt;p&gt;
&lt;code&gt;pip-tools&lt;/code&gt; also installed a command called &lt;code&gt;pip-sync&lt;/code&gt; which will keep you in sync with what is in the requirements file, so as long as &lt;code&gt;requirements.txt&lt;/code&gt; is always a working version, you can sync up with it to avoid problems with changes in any of the dependencies. This is different from the &lt;code&gt;--upgrade&lt;/code&gt; option in that it will only install the exact version in the requirements file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-sync
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Collecting backcall==0.1.0
Collecting bleach==2.1.3
  Using cached https://files.pythonhosted.org/packages/30/b6/a8cffbb9ab4b62b557c22703163735210e9cd857d533740c64e1467d228e/bleach-2.1.3-py2.py3-none-any.whl
Collecting certifi==2018.4.16
  Using cached https://files.pythonhosted.org/packages/7c/e6/92ad559b7192d846975fc916b65f667c7b8c3a32bea7372340bfe9a15fa5/certifi-2018.4.16-py2.py3-none-any.whl
Collecting cloudpickle==0.5.3
  Using cached https://files.pythonhosted.org/packages/e7/bf/60ae7ec1e8c6742d2abbb6819c39a48ee796793bcdb7e1d5e41a3e379ddd/cloudpickle-0.5.3-py2.py3-none-any.whl
Successfully installed backcall-0.1.0 bleach-2.1.3 certifi-2018.4.16 cloudpickle-0.5.3 decorator-4.3.0 doit-0.31.1 ipykernel-4.8.2 ipython-6.4.0 jedi-0.12.0 jupyter-client-5.2.3 logbook-1.4.0 lxml-4.2.1 natsort-5.3.2 nikola-7.8.15 notebook-5.5.0 parso-0.2.1 pexpect-4.6.0 pillow-5.1.0 python-dateutil-2.7.3 send2trash-1.5.0 tornado-5.0.2 virtualenv-16.0.0 virtualfish-1.0.6 wheel-0.31.1 ws4py-0.5.1
&lt;/pre&gt;

&lt;p&gt;
Since I upgraded the installation the &lt;code&gt;requirements.txt&lt;/code&gt; file is now behind the latests versions so by syncing I undid the upgrade. This time I'll upgrade again and save the output.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-compile --upgrade
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So now the file and my installation should be in sync.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip-sync
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
: Everything up-to-date
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf870239" class="outline-2"&gt;
&lt;h2 id="orgf870239"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf870239"&gt;
&lt;p&gt;
So there you have it, how to keep dependencies synced. The &lt;a href="https://pypi.org/project/pip-tools/"&gt;README&lt;/a&gt; for pip-tools is much briefer, but I thought I'd add a little more detail to the part of it that I plan to use the most.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python programs</category><guid>https://necromuralist.github.io/posts/pip-tools-and-pipdeptree/</guid><pubDate>Sat, 09 Jun 2018 19:52:57 GMT</pubDate></item><item><title>Setting Up the RTL 8812AU Realtek USB Adapter on a Raspberry Pi 3</title><link>https://necromuralist.github.io/posts/setting-up-the-rtl-8812au-realtek-usb-adapter-on-a-raspberry-pi-3/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orgcca0b6f" class="outline-2"&gt;
&lt;h2 id="orgcca0b6f"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcca0b6f"&gt;
&lt;p&gt;
I'm trying to set-up a wireless packet monitor (it's something I've long thought might be an interesting source of data, and now I need it for work too). My thought was that I'd set up a raspberry pi to experiment with - I don't think it is powerful enough to work, but it should work just to mess with code, and a distributed system might get some interesting results, but anyway - but when I tried to put my raspberry pi's wireless interface into monitor mode I got an error.
&lt;/p&gt;

&lt;pre class="example"&gt;
iwconfig wlan0 mode monitor
Error for wireless request "Set Mode" (8B06) :
    SET failed on device wlan0 ; Operation not supported.
&lt;/pre&gt;

&lt;p&gt;
Looking around on the web I found &lt;a href="https://www.reddit.com/r/raspberry_pi/comments/4ah4oi/psa_the_raspberry_pi_3s_embedded_wifi_card_does/"&gt;this reddit post&lt;/a&gt; as well as some Stack Overflow posts that said that monitor mode isn't supported on the Raspberry Pi. There is a project called &lt;a href="https://github.com/seemoo-lab/nexmon"&gt;nexmon&lt;/a&gt; that apparently lets up add a firmware patch to enable it, which I'll probably try later, but before I tried that I remembered that I have a Realtek 8812AU USB WiFi adapter that I bought a while ago for an old desktop I had that I wasn't using so I decided to try it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd5febf9" class="outline-2"&gt;
&lt;h2 id="orgd5febf9"&gt;What I tried&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd5febf9"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgffe276d" class="outline-3"&gt;
&lt;h3 id="orgffe276d"&gt;Plug-and-Pray&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgffe276d"&gt;
&lt;p&gt;
The first thing I did was to see if it would just work. I plugged the Realtek into the USB port and although &lt;code&gt;lsusb&lt;/code&gt; showed it, &lt;code&gt;iwconfig&lt;/code&gt; didn't show it as an interface. Back to the internet. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3363897" class="outline-3"&gt;
&lt;h3 id="org3363897"&gt;Github&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3363897"&gt;
&lt;p&gt;
Next I found &lt;a href="https://github.com/diederikdehaas/rtl8812AU"&gt;a repository on github&lt;/a&gt; that has the driver for the Realtek set up for linux machines. I downloaded it and followed the instructions to build it - the main thing is to set:
&lt;/p&gt;

&lt;pre class="example"&gt;
CONFIG_PLATFORM_I386_PC = n
CONFIG_PLATFORM_ARM_RPI = y
&lt;/pre&gt;

&lt;p&gt;
in the &lt;code&gt;Makefile&lt;/code&gt; - but when I tried to build it I got this error.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo dkms install -m $DRV_NAME -v $DRV_VERSION

'make' KVER=4.4.38-v7+....(bad exit status: 2)
ERROR (dkms apport): binary package for rtl8812AU: 4.3.20 not found
Error! Bad return status for module build on kernel: 4.4.38-v7+ (armv7l)
Consult /var/lib/dkms/rtl8812AU/4.3.20/build/make.log for more information.
&lt;/pre&gt;

&lt;p&gt;
There was also a message in the &lt;code&gt;make.log&lt;/code&gt; file but I didn't remember to copy it. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1e7b8d0" class="outline-2"&gt;
&lt;h2 id="org1e7b8d0"&gt;What fixed it&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1e7b8d0"&gt;
&lt;p&gt;
The solution was in &lt;a href="https://stackoverflow.com/questions/39775844/how-to-make-dkms-pass-the-right-arch-to-make"&gt;this StackOverflow post&lt;/a&gt; - the &lt;code&gt;make&lt;/code&gt; program is being pointed to a folder named &lt;code&gt;arm7l&lt;/code&gt; (thats 'arm seven ell') but it should actually be pointed to one named &lt;code&gt;arm&lt;/code&gt;. The simple solution is to create an alias with the correct name.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo ln -s /usr/src/linux-headers-4.4.38-v7+/arch/arm/ /usr/src/linux-headers-4.4.38-v7+/arch/armv7l
&lt;/pre&gt;

&lt;p&gt;
This turns out to fix the build problem and after a reboot the network interface showed up.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org43260d8" class="outline-2"&gt;
&lt;h2 id="org43260d8"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org43260d8"&gt;
&lt;p&gt;
The Raspberry Pi 3 doesn't support monitor mode for its wireless interface out of the box, and while there is a firmware patch to enable it, I chose to use a Realtek RTL 8812AU USB WiFi adapter instead. You need a little bit of extra work to get it going, but it does seem to work. One thing I noticed is that &lt;code&gt;iwconfig&lt;/code&gt; will put it in monitor mode but &lt;code&gt;airmon-ng&lt;/code&gt; doesn't (I haven't figured out why yet). It doesn't report an error, it just doesn't seem to work. Also, &lt;code&gt;iw&lt;/code&gt; always reports the interface as managed, even when it isn't… maybe I'll try the firmware patch after all.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>rapsberrypi wireless howto</category><guid>https://necromuralist.github.io/posts/setting-up-the-rtl-8812au-realtek-usb-adapter-on-a-raspberry-pi-3/</guid><pubDate>Sun, 03 Jun 2018 22:57:12 GMT</pubDate></item><item><title>Monitor Mode With airmon-ng</title><link>https://necromuralist.github.io/posts/monitor-mode-with-airmon-ng/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org60fe7c0" class="outline-2"&gt;
&lt;h2 id="org60fe7c0"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org60fe7c0"&gt;
&lt;p&gt;
I'm looking into setting up a wireless (WiFi and bluetooth) monitoring station to collect data that correlates with how my network is performing and what the state of the network is and I thought that, as a first step, I'd get some &lt;a href="https://en.wikipedia.org/wiki/Packet_analyzer"&gt;packet capturing&lt;/a&gt; logs going. I'm primarily a python programmer who's kept my toe in the Linux command-line world but it's been a little while since I really dove into the wireless networking world. I had some vague notion about doing it with &lt;a href="https://en.wikipedia.org/wiki/Wireless_tools_for_Linux"&gt;iwconfig&lt;/a&gt; or &lt;a href="https://wireless.wiki.kernel.org/en/users/documentation/iw"&gt;iw&lt;/a&gt;, but then I found &lt;a href="https://www.aircrack-ng.org/doku.php?id=airmon-ng"&gt;airmon-ng&lt;/a&gt; and realized that it was what I was really looking for.
Why is it better? Well, to be honest, I'm not informed enough to say that it's better, but when I tried to use &lt;code&gt;iw&lt;/code&gt; it failed without really telling me why, while &lt;code&gt;airmon-ng&lt;/code&gt; not only didn't fail, but it told me that there were other processes already using my wireless interface which is likely why &lt;code&gt;iw&lt;/code&gt; failed and it told me how to fix it. On the one hand, since it's hiding so much from you &lt;code&gt;airmon-ng&lt;/code&gt; lets you be a little ignorant and still do stuff, on the other - &lt;b&gt;what's wrong with that?&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5c4df27" class="outline-2"&gt;
&lt;h2 id="org5c4df27"&gt;Setting Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5c4df27"&gt;
&lt;p&gt;
I'm using Ubuntu &lt;a href="http://releases.ubuntu.com/18.04/"&gt;18.04 (Bionic Beaver)&lt;/a&gt; - which seems to have both fixed and broken a surprising amount of stuff (nice that you let me log in with Dvorak now, but maybe you should let me know the keyboard layout has changed ahead of time) - so these instructions are based on that. First, &lt;code&gt;airmon-ng&lt;/code&gt; is part of the &lt;code&gt;aircrack-ng&lt;/code&gt; package so you need to install it to get what we want.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo apt install aircrack-ng
&lt;/pre&gt;

&lt;p&gt;
Once you do this you'll see that &lt;code&gt;airmon-ng&lt;/code&gt; is installed.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which airmon-ng
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Interestingly, if you check it out, you'll see that all it is is a bash script.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file `which airmon-ng`
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The file is kind of long.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -l `which airmon-ng`
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So I won't list it here - you can check it out if you're interested. It's actually very informative if you want to learn how to do this kind of stuff, but for this case, we just need to know it works.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgea8bffd" class="outline-2"&gt;
&lt;h2 id="orgea8bffd"&gt;Monitor Mode&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgea8bffd"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf0f61d7" class="outline-3"&gt;
&lt;h3 id="orgf0f61d7"&gt;Starting Up Monitor Mode&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf0f61d7"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd6453bd" class="outline-4"&gt;
&lt;h4 id="orgd6453bd"&gt;Finding your interface&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd6453bd"&gt;
&lt;p&gt;
In the good old days you could be pretty sure that your wireless interface was &lt;code&gt;wlan0&lt;/code&gt; (assuming you only had one) but then ubuntu/freedesktop went and &lt;a href="https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/"&gt;changed things&lt;/a&gt; so now you should probably check what your interface name is using &lt;code&gt;iw&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iw dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So it looks like we have a wireless interface named &lt;code&gt;wlp2s0&lt;/code&gt; that we want to change from &lt;b&gt;managed&lt;/b&gt; to &lt;b&gt;monitor&lt;/b&gt; mode.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org04c5436" class="outline-3"&gt;
&lt;h3 id="org04c5436"&gt;Okay, now monitor it&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org04c5436"&gt;
&lt;p&gt;
The syntax to start monitor mode is &lt;code&gt;airmon-ng start &amp;lt;interface&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo airmon-ng start wlp2s0
&lt;/pre&gt;

&lt;pre class="example"&gt;
Found 5 processes that could cause trouble.
If airodump-ng, aireplay-ng or airtun-ng stops working after
a short period of time, you may want to run 'airmon-ng check kill'

  PID Name
 1505 wpa_supplicant
 1524 NetworkManager
 1541 avahi-daemon
 1748 avahi-daemon
 2298 dhclient

PHY     Interface       Driver          Chipset

phy0    wlp2s0          iwlwifi         Intel Corporation Wireless 7260 (rev 73)

                (mac80211 monitor mode vif enabled for [phy0]wlp2s0 on [phy0]wlp2s0mon)
                (mac80211 station mode vif disabled for [phy0]wlp2s0)
#+END_SRC

The first thing you should notice is that there are five potentially interfering processes. This is probably what interferes with the =iw= method, but we'll leave it alone and see if it works. Why don't we check on the interface.

#+BEGIN_SRC bash :results raw
iw dev
#+END_SRC

#+RESULTS:
phy#0
	Interface wlp2s0mon
		ifindex 5
		wdev 0x3
		addr 7c:5c:f8:f7:f5:c6
		type monitor
		channel 10 (2457 MHz), width: 20 MHz (no HT), center1: 2457 MHz
		txpower 0.00 dBm

So you can see that running =airmon-ng start= killed our original =wlp2s0= interface and replaced it with =wlp2s0mo= which is in monitor mode on channel 10. Unforturnately I wanted channel 6 but forgot to specify it. Let's try that again.

The first thing we have to do is to turn off monitor mode.

#+BEGIN_EXAMPLE
sudo airmon-ng stop wlp2s0mon
&lt;/pre&gt;

&lt;p&gt;
Note that we are stopping the new monitor-mode interface, not our original wireless interface. Now we can start the monitor-mode interface set to channel 6. The syntax is &lt;code&gt;airmon-ng start &amp;lt;interface&amp;gt; &amp;lt;channel&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo airmon-ng start wlp2s0 6
#+END_SRC

There's some output from the command, but we want to know what =iw= thinks is going on.

#+BEGIN_SRC bash :results raw
iw dev
#+END_SRC

#+RESULTS:
phy#0
	Interface wlp2s0mon
		ifindex 7
		wdev 0x6
		addr 7c:5c:f8:f7:f5:c6
		type monitor
		channel 6 (2437 MHz), width: 20 MHz (no HT), center1: 2437 MHz
		txpower 0.00 dBm

So now we have an interface (=wlp2s0mon=) on channel 6 in monitor mode. We can make sure that it's working using [[https://tcpdump.org][tcpdump]].

#+BEGIN_EXAMPLE
sudo tcpdump -i wlp2s0mon -n
&lt;/pre&gt;

&lt;p&gt;
Note that we need to use the new interface name. Also, if it wasn't obvious up to now, putting the interface into monitor mode will break any networking capabilities for that interface on your computer (so if it was your internet connection, don't expect to access the web when it's in monitor mode).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd5a5a83" class="outline-2"&gt;
&lt;h2 id="orgd5a5a83"&gt;Cleaning Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd5a5a83"&gt;
&lt;p&gt;
We already got a preview of turning off monitor mode earlier. The syntax is &lt;code&gt;airmon-ng stop &amp;lt;interface&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
sudo airmon-ng stop wlp2s0mon
&lt;/pre&gt;

&lt;p&gt;
This will bring back the original wireless interface, but it won't (likely) re-establish your connection to your wireless access point. To get back onto the network you will probably need to open network manager and go through the setup process again.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd8c57b1" class="outline-2"&gt;
&lt;h2 id="orgd8c57b1"&gt;Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd8c57b1"&gt;
&lt;p&gt;
These were my notes on setting up monitor mode using &lt;code&gt;airmon-ng&lt;/code&gt;. The main point I wanted to get across is how easy it is to do using &lt;code&gt;airmon-ng&lt;/code&gt; as opposed to the other methods. I didn't actually show how much harder it is to use iwconfig, but if you have tried you might know what it entails. In any case, hopefully these notes will help me in the future as I keep watching the packets.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>wireless packets</category><guid>https://necromuralist.github.io/posts/monitor-mode-with-airmon-ng/</guid><pubDate>Sun, 13 May 2018 01:00:48 GMT</pubDate></item><item><title>Pruning Large Files From Git with BFG</title><link>https://necromuralist.github.io/posts/pruning-large-files-from-git-with-bfg/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;p&gt;These are my notes on removing large files from a git repository with the &lt;a class="reference external" href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;BFG Repo-Cleaner&lt;/a&gt;. It assumes that you have already pushed it to a remote repository. If you've committed the changes but haven't pushed them, see &lt;a class="reference external" href="https://necromuralist.github.io/posts/removing-large-files-from-git-using-bfg-and-a-local-repository/"&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;1 Background&lt;/h2&gt;
&lt;p&gt;I accidentally committed an 89 MB file to git and pushed it upstream to github. This is within the allowed file-size limit, but when I looked in the file it was filled with the same error message over and over again, so it wasn't useful to keep, anyway. I was just working with small log-files, so any large files indicated an error, anyway, so I decided to clean anything over 50 MB from the repository using &lt;em&gt;BFG&lt;/em&gt;. The instructions on the home page mostly work, but didn't exactly work so I'm making some notes here for the next time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-process"&gt;
&lt;h2&gt;2 The Process&lt;/h2&gt;
&lt;p&gt;Assuming you've downloaded the BFG jar file, this is what you need to do.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c02dfea4364e4de19cfb6e5eecb926bd-1"&gt;&lt;/a&gt;git clone --mirror &amp;lt;remote git address&amp;gt;
&lt;/pre&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--mirror&lt;/span&gt;&lt;/tt&gt; flag creates a bare repository so it will look a little odd (the top level has the contents of what are normally in the &lt;tt class="docutils literal"&gt;.git&lt;/tt&gt; folder). When I first tried this I thought I could clone my local copy but when I ran BFG on the clone it said that it couldn't find any large files. As noted in &lt;a class="reference external" href="https://github.com/rtyley/bfg-repo-cleaner/issues/65"&gt;this bug-report&lt;/a&gt; the large files would be in the packfile if you clone it from a remote repository, but not necessarily in the local repository, so I had to clone it from github.&lt;/p&gt;
&lt;p&gt;Next run the BFG.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_5f7e41822c5e47249e8b863390ed9548-1"&gt;&lt;/a&gt;java -jar BFG-1.12.15.jar --strip-blobs-bigger-than 50M &amp;lt;path to cloned mirror&amp;gt;
&lt;/pre&gt;&lt;p&gt;Now you have to change into the cloned repository and execute some commands to update it.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_7a888467dbbd4d7ea000470fcc0e3c11-1"&gt;&lt;/a&gt;git reflog expire --expire-now --all
&lt;a name="rest_code_7a888467dbbd4d7ea000470fcc0e3c11-2"&gt;&lt;/a&gt;git gc --prune&lt;span class="o"&gt;=&lt;/span&gt;now --aggressive
&lt;/pre&gt;&lt;p&gt;Now push it back to github.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_1a72ce4317b34f8087d3b8a0ebbdaf3d-1"&gt;&lt;/a&gt;git push
&lt;/pre&gt;&lt;p&gt;At this point the original local copy of the repository will still have the large file(s) in the history so if you just do a git pull it will think you are ahead of the remote, so you have to remove your original local repository and re-clone the remote.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_70f6ab11ae7d49a9913980ab43f21ff9-1"&gt;&lt;/a&gt;rm -r &amp;lt;original &lt;span class="nb"&gt;local&lt;/span&gt; repository&amp;gt;
&lt;a name="rest_code_70f6ab11ae7d49a9913980ab43f21ff9-2"&gt;&lt;/a&gt;git clone &amp;lt;remote repository&amp;gt;
&lt;/pre&gt;&lt;p&gt;One thing that tripped me up a little was that I had removed the &lt;em&gt;master&lt;/em&gt; branch but the &lt;em&gt;BFG&lt;/em&gt; re-added it, so it originally looked like I had lost some changes. Once I changed back into my working branch everything was as I had expected.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git bfg howto</category><guid>https://necromuralist.github.io/posts/pruning-large-files-from-git-with-bfg/</guid><pubDate>Sun, 14 Jan 2018 20:57:59 GMT</pubDate></item><item><title>Restructured Text Anonymous Links</title><link>https://necromuralist.github.io/posts/restructured-text-anonymous-links/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I'm creating an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Annotated_bibliography"&gt;annotated bibliography&lt;/a&gt; using nikola, and added links to the PDFs online so I could download them again if needed. I called them all &lt;cite&gt;PDF Link&lt;/cite&gt; but when I built the web-page I found that there were some restructured text errors in it that looked like this.&lt;/p&gt;
&lt;img alt="backlink_rst_error.png" src="https://necromuralist.github.io/posts/restructured-text-anonymous-links/backlink_rst_error.png"&gt;
&lt;p&gt;This &lt;a class="reference external" href="https://stackoverflow.com/questions/5464627/how-to-have-same-text-in-two-links-with-restructured-text"&gt;stack overflow answer&lt;/a&gt; pointed me to anonymous links (which I had never heard of) to fix the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="named-and-anonymous-links"&gt;
&lt;h2&gt;Named and Anonymous Links&lt;/h2&gt;
&lt;p&gt;The form for hyperlinks that I learned used one underscore:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
`some link&amp;lt;http://some-target.com&amp;gt;`_
&lt;/pre&gt;
&lt;p&gt;This creates both a hyperlink in the document and a target that other hyperlinks can use. In this case, you can create a link back to this hyperlink somewhere else in the document using this syntax:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
`some link`_
&lt;/pre&gt;
&lt;p&gt;Unfortunately this means that the text used for the link has to be unique. In order to make multiple hyperlinks with the same text in them, use two underscores:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
`some link &amp;lt;http://some-target.com&amp;gt;`__
&lt;/pre&gt;
&lt;p&gt;This fixed it for me. Of course now the internal targets are gone as well, but they wouldn't have worked anyway.&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#hyperlink-references"&gt;Restructured Text Hyperlink Documentatation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>restructuredtext</category><guid>https://necromuralist.github.io/posts/restructured-text-anonymous-links/</guid><pubDate>Tue, 09 Jan 2018 02:06:52 GMT</pubDate></item><item><title>Shell Output With Org-Babel Ipython</title><link>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the nice things about ipython is the ability to run shell commands with &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;. When you use it in an &lt;a class="reference external" href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; block, though, it will dump the output into a popup rather than in the same emacs org-file. One alternative is to use a shell block instead. I wrote earlier that this requires you to put an echo command in the block to prevent the text going to a pop-up.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-2"&gt;&lt;/a&gt;head Future_Connections.csv
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;            &lt;span class="p"&gt;|&lt;/span&gt; Future Connection &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="m"&gt;840&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;197&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;, &lt;span class="m"&gt;979&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;519&lt;/span&gt;, &lt;span class="m"&gt;872&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;382&lt;/span&gt;, &lt;span class="m"&gt;423&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;, &lt;span class="m"&gt;226&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;1&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;349&lt;/span&gt;, &lt;span class="m"&gt;905&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;429&lt;/span&gt;, &lt;span class="m"&gt;860&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_07c64419f0844d70b9e717faa5c38e18-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;309&lt;/span&gt;, &lt;span class="m"&gt;989&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It turns out that there's a similar solution to the ob-ipython popup, only since it's in python you have to use a print this time.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC ipython :session futures :results output&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;Future_Connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+begin_example&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(6, 840)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(4, 197)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(620, 979)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(519, 872)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(382, 423)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(97, 226)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(349, 905)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(429, 860)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(309, 989)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_de61e3650c964f73975242e27ac38962-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+end_example&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I actually prefer the shell version, and since this is org-babel it makes more sense to use it, but I forgot about it just now and it took me a little while to figure out how to get the ob-ipython block to work so &lt;strong&gt;*note to future self:&lt;/strong&gt; &lt;em&gt;This is how to make it work, but use a shell block instead.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>orgmode</category><category>Python</category><guid>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</guid><pubDate>Wed, 11 Oct 2017 19:49:19 GMT</pubDate></item><item><title>Org To Jupyter Notebook</title><link>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
I've grown to really like &lt;a href="http://orgmode.org"&gt;org-mode&lt;/a&gt;, particularly with &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt;, but there are times when a real Jupyter notebook is better - if you want to render it on github or use the &lt;code&gt;%matplotlib notebook&lt;/code&gt; feature, for instance. I found a blog post the &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;Kitchin Research Group site&lt;/a&gt; announcing the creation of an exporter and this is some documentation about how to set it up.
&lt;/p&gt;

&lt;div id="outline-container-org2aa7778" class="outline-2"&gt;
&lt;h2 id="org2aa7778"&gt;Download&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2aa7778"&gt;
&lt;p&gt;
When I originally set this up it was only available from a link on the blog-post, but it has since been added to a much larger github repository called &lt;a href="https://github.com/jkitchin/scimax"&gt;scimax&lt;/a&gt;. I'm assuming this is where the latest version will be kept. Unfortunately there's no license so I don't think you can fork the repository, even more importantly, I can't get it to work, so skip it for now and grab the old one.
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/.emacs.d
mkdir lisp
wget http://kitchingroup.cheme.cmu.edu/media/ox-ipynb.el
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6771d88" class="outline-2"&gt;
&lt;h2 id="org6771d88"&gt;Install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6771d88"&gt;
&lt;p&gt;
Make sure that the lisp folder is in the emacs path by putting this line in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'load-path&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/lisp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Also make sure that it's loaded by putting this in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ox-ipynb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7f903e3" class="outline-2"&gt;
&lt;h2 id="org7f903e3"&gt;Use&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7f903e3"&gt;
&lt;p&gt;
In your org-mode file use the &lt;code&gt;export-ipython&lt;/code&gt; function to export it to an &lt;code&gt;ipynb&lt;/code&gt; file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;export-ipynb-buffer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that this will only work if you have &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; installed and at least one ipython code block in the org-file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session
print("a")
#+END_SRC
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>orgmode jupyter emacs</category><guid>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</guid><pubDate>Fri, 14 Apr 2017 03:00:28 GMT</pubDate></item><item><title>Ubuntu 16.04 and the Brother HL-2140 Printer</title><link>https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-orgfc24e8f" class="outline-2"&gt;
&lt;h2 id="orgfc24e8f"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfc24e8f"&gt;
&lt;p&gt;
I (relatively) recently bought a &lt;a href="https://zareason.com/Limbo-560.html"&gt;ZaReason Limbo Desktop PC&lt;/a&gt; which comes with Ubuntu 16.04. I'm debating whether to update it to 16.10, given that updating broke the USB WiFi adapter I had on my older computer (the USB is recognized but not the WiFi adapter), but, in any case, I wanted to print something using my new computer today and ran into the same problem that I had when I updated my old computer to Ubuntu 14.10 - the default printer driver printed out a bunch of blank pages rather than the page I wanted to print. The last time I solved it by choosing a different model (the &lt;i&gt;HL-2142&lt;/i&gt;) but this time out I found a &lt;a href="http://ubuntuforums.org/showthread.php?t=2231405"&gt;stack overflow post&lt;/a&gt; that suggested using the &lt;b&gt;Brother HL-2140 Foomatic/hl1250 [en]&lt;/b&gt; driver instead. I tried it and it worked for me, so here goes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1fbf939" class="outline-2"&gt;
&lt;h2 id="org1fbf939"&gt;How To Choose the Correct Printer Driver&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1fbf939"&gt;
&lt;p&gt;
First, open &lt;i&gt;Dash&lt;/i&gt; (the windows-key launches it on my keyboard), type in &lt;i&gt;Printers&lt;/i&gt; and click on the icon.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/dash.png" alt="dash.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
This brings up the &lt;i&gt;printers&lt;/i&gt; dialog. 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/printers.png" alt="printers.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Double-click on the &lt;i&gt;HL-2140-series&lt;/i&gt; icon to bring up the &lt;i&gt;Printer Properties&lt;/i&gt; dialog.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/printer_properties.png" alt="printer_properties.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Click on the &lt;i&gt;Make and Model&lt;/i&gt; "Change" button (the fourth row). Let the program find the drivers and it will bring up the &lt;i&gt;Choose Driver&lt;/i&gt; dialog.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/choose_driver.png" alt="choose_driver.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Use the &lt;i&gt;Brother (recommended)&lt;/i&gt; option (it should already be selected) and click on the "Forward" button. This brings up the &lt;i&gt;Change Driver&lt;/i&gt; dialog with the &lt;i&gt;postscript&lt;/i&gt; driver chosen (which is the one that does not work for me).
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/change_driver.png" alt="change_driver.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Select the &lt;i&gt;hl1250&lt;/i&gt; driver (by clicking on it) and click on the "Forward" button.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/select_driver.png" alt="select_driver.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
This will bring up the &lt;i&gt;Existing Settings&lt;/i&gt; dialog. I've tried different options and haven't noticed a difference so I just leave it at whatever the default option is and click "Apply".
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/existing_settings.png" alt="existing_settings.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
At this point your driver should be updated so click on the "OK" button.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/click_okay.png" alt="click_okay.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
If your experience is the same as mine, you will be able to print your documents at this point.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00eeaef" class="outline-2"&gt;
&lt;h2 id="org00eeaef"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org00eeaef"&gt;
&lt;p&gt;
The basic method to get the &lt;i&gt;Brother HL-2140&lt;/i&gt; to print in Ubuntu 16.04 is to select the &lt;i&gt;hl1250&lt;/i&gt; driver instead of the default. Since I only do this when I need to set up a new computer, I alway have to do some googling to remember what to do, so hopefully this will help me save some searching if I ever have to do this again.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ubuntu printer</category><guid>https://necromuralist.github.io/posts/ubuntu-1604-and-the-brother-hl-2140-printer/</guid><pubDate>Sat, 25 Feb 2017 23:55:37 GMT</pubDate></item></channel></rss>