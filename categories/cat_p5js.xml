<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about p5.js)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_p5js.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 04 May 2023 00:33:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Coding Train Starfield</title><link>https://necromuralist.github.io/posts/coding-train-starfield/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#org1795b3d"&gt;The Starfield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#orga6e4986"&gt;The Main Sketch&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#orgdfce28a"&gt;The Setup Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#org3fc419e"&gt;Draw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#orgd810979"&gt;The Star Class&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#org978cc70"&gt;The Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#org5bf5e61"&gt;The Show Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#orgbf3f271"&gt;Attaching the Sketch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/coding-train-starfield/#org0695f5d"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1795b3d" class="outline-2"&gt;
&lt;h2 id="org1795b3d"&gt;The Starfield&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1795b3d"&gt;
&lt;p&gt;
This is another &lt;a href="https://p5js.org/"&gt;p5.js&lt;/a&gt; hello-world, this time taken from Daniel Schiffman's &lt;a href="https://thecodingtrain.com/CodingChallenges/001-starfield.html"&gt;Starfield in Processing&lt;/a&gt; coding challenge. It's a rough version of traveling through the stars at warp speed. He managed to do it in about 15 minutes, if I remember correctly. It starts static but if you move your mouse back and forth horizontally it adjusts the speed.
&lt;/p&gt;

&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/coding-train-starfield/starfield.js"&gt;&lt;/script&gt;
&lt;div id="schiffman-starfield"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga6e4986" class="outline-2"&gt;
&lt;h2 id="orga6e4986"&gt;The Main Sketch&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga6e4986"&gt;
&lt;p&gt;
The most basic processing/p5 sketch uses two functions &lt;code&gt;setup&lt;/code&gt; to initially set up your canvas and &lt;code&gt;draw&lt;/code&gt; to update the frames over time. This function creates our canvas and star objects in the &lt;code&gt;setup&lt;/code&gt; and then calculates a &lt;code&gt;speed&lt;/code&gt; based on the mouse position of the user in order to update the stars. It gets passed a p5 element, called p, in order to get access to the p5.js code.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;div id="outline-container-orgdfce28a" class="outline-3"&gt;
&lt;h3 id="orgdfce28a"&gt;The Setup Function&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdfce28a"&gt;
&lt;p&gt;
Not too much voodoo here, other than the use of the &lt;a href="https://api.jquery.com/outerWidth/"&gt;JQuery outerWidth&lt;/a&gt; method which gets the width of the DIV that we're using to hold the sketch and uses it as the width for the canvas.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3fc419e" class="outline-3"&gt;
&lt;h3 id="org3fc419e"&gt;Draw&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3fc419e"&gt;
&lt;p&gt;
Again, not too fancy. The draw function:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Sets the background to black to wipe out our previous drawing&lt;/li&gt;
&lt;li&gt;gets the "speed" of the stars using the x-position of the mouse and mapping this location from 0 to the width of the canvas to a smaller range from 0 to 50&lt;/li&gt;
&lt;li&gt;Translate the (0, 0) of the coordinate system from the top left of the canvas to the middle so our stars emerge from the center instead of the top left&lt;/li&gt;
&lt;li&gt;update all the stars with the speed and re-draw them&lt;/li&gt;
&lt;/ul&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd810979" class="outline-2"&gt;
&lt;h2 id="orgd810979"&gt;The Star Class&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd810979"&gt;
&lt;p&gt;
The &lt;code&gt;Star&lt;/code&gt; stores the position of a "star" and updates it based on the speed that it's given. Our initial constructor sets up the coordinates of the star using random values. 
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;

&lt;div id="outline-container-org978cc70" class="outline-3"&gt;
&lt;h3 id="org978cc70"&gt;The Update&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org978cc70"&gt;
&lt;p&gt;
Most of the time the update reduces the &lt;code&gt;z&lt;/code&gt; value by the current speed, but since we don't want the stars to go off the canvas and disappear, if it gets too small we re-randomize the position of the star.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5bf5e61" class="outline-3"&gt;
&lt;h3 id="org5bf5e61"&gt;The Show Function&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5bf5e61"&gt;
&lt;p&gt;
The &lt;code&gt;show&lt;/code&gt; function is where most of the work is done. It calculates the proprotions of x and y to z and then maps that to the width and height of the canvas and then draws an ellipse. To get the radius of the ellipse we map the current z-value using an inverted target of 16, 0. This means that as z gets smaller our radius gets bigger.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf3f271" class="outline-2"&gt;
&lt;h2 id="orgbf3f271"&gt;Attaching the Sketch&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf3f271"&gt;
&lt;p&gt;
This next bit attaches our sketch to a specific DIV defined in the HTML. You don't have to do this, you could just use the parts as universal functions like the examples show, but if you have more than one sketch on a page sometimes things get funky so I prefer this pattern to keep everything in place.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0695f5d" class="outline-2"&gt;
&lt;h2 id="org0695f5d"&gt;Source&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0695f5d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Starfield in Processing [Internet]. The Coding Train. 2016 [cited 2022 Feb 10]. Available from: &lt;a href="https://thecodingtrain.com/CodingChallenges/001-starfield.html"&gt;https://thecodingtrain.com/CodingChallenges/001-starfield.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>p5.js</category><guid>https://necromuralist.github.io/posts/coding-train-starfield/</guid><pubDate>Thu, 10 Feb 2022 23:19:02 GMT</pubDate></item><item><title>A Mouse Follower</title><link>https://necromuralist.github.io/posts/a-mouse-follower/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-mouse-follower/#orgbf925ca"&gt;Middle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-mouse-follower/#org2ac1a77"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbf925ca" class="outline-2"&gt;
&lt;h2 id="orgbf925ca"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf925ca"&gt;
&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/a-mouse-follower/follower.js"&gt;&lt;/script&gt;
&lt;div id="mouse-follower"&gt;
&lt;/div&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2ac1a77" class="outline-2"&gt;
&lt;h2 id="org2ac1a77"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2ac1a77"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Shiffman D. &lt;a href="https://natureofcode.com/"&gt;The nature of code&lt;/a&gt;: simulating natural systems with processing. Version 1.0, generated December 6, 2012. s.l.: Selbstverl.; 2012. 498 p.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>p5.js</category><guid>https://necromuralist.github.io/posts/a-mouse-follower/</guid><pubDate>Sun, 21 Jul 2019 23:03:37 GMT</pubDate></item><item><title>p5.js With Org-Mode and Nikola</title><link>https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#orgf4dea4a"&gt;What Is This, Then?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#org484203e"&gt;The Short Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#orgbd508fa"&gt;The First Sketch&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#org3bb6acf"&gt;The HTML Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#org39a017a"&gt;The Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#orgd691db2"&gt;The Second Sketch&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#orged2760b"&gt;The Sketch Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#org0f94e48"&gt;Mouse Pressed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#org3c61e5b"&gt;Setup and Draw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#orgee342c4"&gt;Attaching Our Sketch Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#orgbb875e4"&gt;The HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#orgf3c707c"&gt;One More Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#org06859c2"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4dea4a" class="outline-2"&gt;
&lt;h2 id="orgf4dea4a"&gt;What Is This, Then?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf4dea4a"&gt;
&lt;p&gt;
This is a re-working of a &lt;a href="https://p5js.org/"&gt;p5js&lt;/a&gt; post I made a while ago to see if I could remember how to use it with &lt;a href="https://getnikola.com/"&gt;nikola&lt;/a&gt;, my static site generator of choice. Upon revisiting it again I realized that the text was describing how to do it with posts written in &lt;a href="https://www.writethedocs.org/guide/writing/reStructuredText/"&gt;&lt;code&gt;restructuredText&lt;/code&gt;&lt;/a&gt; even though I re-wrote the post in &lt;a href="https://orgmode.org/"&gt;org-mode&lt;/a&gt;, and haven't used &lt;code&gt;restructuredText&lt;/code&gt; in a while so it didn't really make sense. Additionally, I had assumed since I have the original org source, whenever I want to remember how I had used p5js in org-mode, I could just read it and figure out what I had done - but while that was sort of true, it was harder than I would have liked, so this is going to be a post showing:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;How to put a p5js sketch into an org-mode post for HTML exporting.&lt;/li&gt;
&lt;li&gt;How to put multiple p5js sketches on the same page without them conflicting with each other.&lt;/li&gt;
&lt;li&gt;How to display the javascript for the p5js sketch when it's in a separate file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is nikola specific, but I'm assuming it'd be similar if I switched again to another system.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org484203e" class="outline-2"&gt;
&lt;h2 id="org484203e"&gt;The Short Version&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org484203e"&gt;
&lt;p&gt;
To put a p5.js sketch into an org-mode document:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Include the p5 library in a script tag&lt;/li&gt;
&lt;li&gt;Create an &lt;a href="https://p5js.org/examples/instance-mode-instance-container.html"&gt;Instance Container&lt;/a&gt; to place the sketch somewhere on the page.&lt;/li&gt;
&lt;li&gt;Create a javascript sketch using &lt;a href="https://p5js.org/examples/instance-mode-instantiation.html"&gt;Instantiation&lt;/a&gt; and associate it with the Instance Container&lt;/li&gt;
&lt;li&gt;For Nikola, put the javascript sketch in a folder named after the slug of the post (&lt;code&gt;files/posts/&amp;lt;SLUG&amp;gt;/&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbd508fa" class="outline-2"&gt;
&lt;h2 id="orgbd508fa"&gt;The First Sketch&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbd508fa"&gt;
&lt;p&gt;
The sketches I'll be using came from &lt;a href="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/#org848564a"&gt;Getting Started With Processing&lt;/a&gt;. This first one creates a circle that follows your mouse as you move it around. 
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3bb6acf" class="outline-3"&gt;
&lt;h3 id="org3bb6acf"&gt;The HTML Elements&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3bb6acf"&gt;
&lt;p&gt;
To start we'll create two HTML elements that we want to export as HTML from the org-mode post. One is a &lt;code&gt;script&lt;/code&gt; element that imports the javascript for the p5 sketch, the other is a &lt;code&gt;div&lt;/code&gt; element which the javascript puts the sketch into (the p5js documentation calls this an &lt;a href="https://p5js.org/examples/instance-mode-instance-container.html"&gt;Instance Container&lt;/a&gt;). Since we want the HTML elements themselves to be in our final HTML document we put in an org-mode export block.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/get_started.js"&gt;&lt;/script&gt;
&lt;div id="get-started"&gt;
&lt;/div&gt;

&lt;p&gt;
Wherever you put that block in the org-mode post is where the p5 sketch will be. I created the sketch in a file called &lt;code&gt;get_started.js&lt;/code&gt; so I tell the the script tag to import it with &lt;code&gt;src='get_started.js'.&lt;/code&gt; The &lt;code&gt;div id&lt;/code&gt; is how the javascript knows where to put the sketch, which I'll go over when we get to the second sketch. The big white space above this paragraph is created because that's where I put the real export block (the one shown above the white space is just for documentation, the real block is hidden) so if you move your cursor over it you should see something happen.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org39a017a" class="outline-3"&gt;
&lt;h3 id="org39a017a"&gt;The Javascript&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org39a017a"&gt;
&lt;p&gt;
When nikola creates the page from this post it's going to copy over the javascript file ("get_started.js") and put it next to the HTML file for the post, which is why we can just put the file name in the &lt;code&gt;script&lt;/code&gt; tag and don't need a path. In order for nikola to find the original file to copy over we need to put it in a folder whose path looks like &lt;code&gt;files/posts/&amp;lt;SLUG&amp;gt;/get_started.js&lt;/code&gt; (starting from the root of the nikola repository). You can probably change it but this is the way it works by default.
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;&amp;lt;SLUG&amp;gt;&lt;/code&gt; has to be the slugified name for the post (for nikola this is set in the &lt;code&gt;slug&lt;/code&gt; metadata at the top of the post). In this case I used the much too long slug &lt;code&gt;p5-js-with-org-mode-and-nikola&lt;/code&gt; so the path to the javascript file is &lt;code&gt;files/posts/p5-js-with-org-mode-and-nikola/get_started.js&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
We need to know this for two reasons:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;One is that it's where you have to put the file or it won't get copied over when nikola builds the site (you will have to make the folder if you didn't do it previously).&lt;/li&gt;

&lt;li&gt;The other is that I want to show the javascript itself in this post so we'll put in an org-mode &lt;a href="https://orgmode.org/manual/Include-Files.html"&gt;&lt;code&gt;include&lt;/code&gt; directive&lt;/a&gt; with the path to the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The thing that I tend to stumble over when embedding other files into an org-mode post is that the path for the &lt;code&gt;include&lt;/code&gt; directive is relative to the location of the org-mode post, not the root of the nikola repository. Since the org-mode file for this post is in a sub-folder named &lt;code&gt;posts&lt;/code&gt;, our path needs to go up one directory first, then back down, like this:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Wherever you put the include directive in the post is where org-mode will insert the contents of the file. The arguments after the path tell org that it's a source block (and not, say, an example) and that it's in javascript so org will apply the right syntax highlighting to it, like so:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
You don't need to actually show the javascript, and I would normally do it by putting the code in the post itself and then tangling it out, the way I do it for the next sketch, but this is how I did it originally and so this is for the future me that might want to but will probably forget how to do it.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd691db2" class="outline-2"&gt;
&lt;h2 id="orgd691db2"&gt;The Second Sketch&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd691db2"&gt;
&lt;p&gt;
This second sketch is also from the "Getting Started With Processing" book and I'm including it to show that the way we're creating the p5 sketches not only specifies the location of the sketch (via the Instance Container) but we're also using what the p5js documentation calls &lt;a href="https://p5js.org/examples/instance-mode-instantiation.html"&gt;Instance Mode Instantiation&lt;/a&gt; to keep the sketches from stomping on each other's variables.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orged2760b" class="outline-3"&gt;
&lt;h3 id="orged2760b"&gt;The Sketch Function&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orged2760b"&gt;
&lt;p&gt;
If you look at the p5js.org documentation you'll notice that they generally create them using global variables. This works okay if you only have one sketch on your page, but if you have more than one the code from the different sketches might interfere with each other (if you have things with the same name, e.g. &lt;code&gt;setup&lt;/code&gt; then the later definitions will replace the earlier ones as the browser loads the page). The way that we keep our sketches from interfering with each other is to create a function for each sketch that takes a p5 object as its argument and then do all the other defining within that function. This first block that we're looking at gives the function declaration for our second sketch and also defines some variables. 
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Normally I would have called the &lt;code&gt;COLOR&lt;/code&gt; constant &lt;code&gt;RED&lt;/code&gt; (or &lt;code&gt;BLUE&lt;/code&gt; in the case of the first sketch) but I thought it'd be a simple way to show that they're not conflicting with each other - if they were declared globally you would get a syntax error and the sketch wouldn't run, since you're re-declaring a constant. If they were variables instead of constants then you wouldn't get an error but the sketches would end up the same color, with one definition of &lt;code&gt;COLOR&lt;/code&gt; overriding the other. This seems like a trivial thing, but it can sometimes create unpredictable conflicts that are hard to troubleshoot and tedious to work around.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0f94e48" class="outline-3"&gt;
&lt;h3 id="org0f94e48"&gt;Mouse Pressed&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0f94e48"&gt;
&lt;p&gt;
I'm not really sure what's going on under the hood, but in order to define behaviors for the p5js methods we have to do what looks like &lt;a href="https://en.wikipedia.org/wiki/Monkey_patch?useskin=vector"&gt;monkey-patching&lt;/a&gt; on the p5js object that gets passed in to the sketch function. In this case I want to white-out the sketch whenever the mouse is pressed so I define/re-define the p5js &lt;code&gt;mousePressed&lt;/code&gt; function and assign it to the p5js object.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3c61e5b" class="outline-3"&gt;
&lt;h3 id="org3c61e5b"&gt;Setup and Draw&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3c61e5b"&gt;
&lt;p&gt;
As with &lt;code&gt;mousePressed&lt;/code&gt;, the way to define the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;draw&lt;/code&gt; behaviors for p5js is to create new functions and assign them to the p5js object. Note that in most of the documentation examples the p5js methods are global, but in this case I'm using the methods and attributes associated with the p5js object (e.g. &lt;code&gt;p5js.createCanvas&lt;/code&gt;, instead of &lt;code&gt;createCanvas&lt;/code&gt;).
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
And that's the end of our sketch function.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgee342c4" class="outline-3"&gt;
&lt;h3 id="orgee342c4"&gt;Attaching Our Sketch Definition&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgee342c4"&gt;
&lt;p&gt;
So now we have our sketch definition, but how do we pass in the p5js object so we can call it? Well, we don't. Instead of calling the function we create a new p5 object, passing in the function in as the first argument and the ID of the &lt;code&gt;div&lt;/code&gt; block that we want to put it in as the second argument (I'll create the div afterwards).
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
Now our sketch will get attached to the HTML &lt;code&gt;div&lt;/code&gt; block whose ID is "rotate-translate" and run.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbb875e4" class="outline-3"&gt;
&lt;h3 id="orgbb875e4"&gt;The HTML&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbb875e4"&gt;
&lt;p&gt;
As with the first sketch, we need to include the javascript file in a &lt;code&gt;script&lt;/code&gt; tag (in this case it's &lt;code&gt;rotate_translate.js&lt;/code&gt;) and create the &lt;code&gt;div&lt;/code&gt; using the ID we passed to the p5 object.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/rotate_translate.js"&gt;&lt;/script&gt;
&lt;div id="rotate-translate"&gt;&lt;/div&gt;

&lt;p&gt;
And there you go, two p5js sketches put in an org-mode post and exported to HTML using nikola.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf3c707c" class="outline-2"&gt;
&lt;h2 id="orgf3c707c"&gt;One More Thing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf3c707c"&gt;
&lt;p&gt;
Something I didn't go over is that the p5js library itself has to be pulled into the page so somewhere you need to put an element that looks something like this (assuming it's coming from the CDN):
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
In my case I made a template for nikola to do it, but I haven't worked with mako for a while so maybe I'll have to look at that again later.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org06859c2" class="outline-2"&gt;
&lt;h2 id="org06859c2"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org06859c2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://p5js.org"&gt;p5js.org&lt;/a&gt;: The site for p5.js.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p5js.org/examples/instance-mode-instantiation.html"&gt;Instantiation&lt;/a&gt;: The p5.js example page for keeping variables local to a sketch so sketches don't collide with each other.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p5js.org/examples/instance-mode-instance-container.html"&gt;Instance Container&lt;/a&gt;: The p5.js example page for putting a sketch in a specific location (using &lt;code&gt;div&lt;/code&gt; tags). It gives several variations of how to do it, I used what I thought was the easiest way.&lt;/li&gt;
&lt;li&gt;&lt;a id="org848564a"&gt;&lt;/a&gt;Reas C, Fry B. Getting started with Processing. 1st ed. Beijingâ¯; Sebastopol, [CA]: OâReilly; 2010. 194 p. (Make: projects).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>p5.js</category><guid>https://necromuralist.github.io/posts/p5-js-with-org-mode-and-nikola/</guid><pubDate>Sun, 21 Jul 2019 23:03:37 GMT</pubDate></item><item><title>A Random Accelerator</title><link>https://necromuralist.github.io/posts/a-random-accelerator/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-accelerator/#orga4a1453"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-accelerator/#orgfa2c8ed"&gt;Middle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-accelerator/#org6a7fc20"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga4a1453" class="outline-2"&gt;
&lt;h2 id="orga4a1453"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga4a1453"&gt;
&lt;p&gt;
This is an extension of the &lt;a href="https://necromuralist.github.io/posts/a-random-walker/"&gt;random walker&lt;/a&gt; with acceleration added.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfa2c8ed" class="outline-2"&gt;
&lt;h2 id="orgfa2c8ed"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfa2c8ed"&gt;
&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/a-random-accelerator/walker.js"&gt;&lt;/script&gt;
&lt;div id="random-accelerator"&gt;
&lt;/div&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6a7fc20" class="outline-2"&gt;
&lt;h2 id="org6a7fc20"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6a7fc20"&gt;
&lt;p&gt;
This was a very rudimentary walker, the main point of it was that at this point we have the basic kinematic elements to make something following the rules of classical physics (more or less).
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Shiffman D. &lt;a href="https://natureofcode.com/"&gt;The nature of code&lt;/a&gt;: simulating natural systems with processing. Version 1.0, generated December 6, 2012. s.l.: Selbstverl.; 2012. 498 p.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>p5.js</category><guid>https://necromuralist.github.io/posts/a-random-accelerator/</guid><pubDate>Sun, 21 Jul 2019 22:14:42 GMT</pubDate></item><item><title>Random Walker Vectorized</title><link>https://necromuralist.github.io/posts/random-walker-take-two/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/random-walker-take-two/#org53319c6"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/random-walker-take-two/#org8b140dd"&gt;The Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/random-walker-take-two/#orgcad503e"&gt;The Container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org53319c6" class="outline-2"&gt;
&lt;h2 id="org53319c6"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org53319c6"&gt;
&lt;p&gt;
Another take on getting p5.js to behave using the &lt;a href="https://necromuralist.github.io/posts/a-random-walker/"&gt;random walker&lt;/a&gt; updated to use a vector for its position.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8b140dd" class="outline-2"&gt;
&lt;h2 id="org8b140dd"&gt;The Javascript&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8b140dd"&gt;
&lt;p&gt;
First we'll write the javascript.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgcad503e" class="outline-2"&gt;
&lt;h2 id="orgcad503e"&gt;The Container&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcad503e"&gt;
&lt;p&gt;
Next we need to make a div to contain the javascript. We need to include the javscript itself (in a &lt;code&gt;script&lt;/code&gt; tag) and set the &lt;code&gt;div&lt;/code&gt; &lt;code&gt;id&lt;/code&gt; to something unique ("random-walker-vectorized" in this case). We'll use the &lt;code&gt;div id&lt;/code&gt; in the javascript to place the processing sketch inside the &lt;code&gt;div&lt;/code&gt; container.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/random-walker-take-two/random-walker-vectorized.js"&gt;&lt;/script&gt;
&lt;div id="random-walker-vectorized"&gt;&lt;/div&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>p5.js</category><guid>https://necromuralist.github.io/posts/random-walker-take-two/</guid><pubDate>Sun, 21 Jul 2019 21:06:03 GMT</pubDate></item><item><title>A Random Walk(er)</title><link>https://necromuralist.github.io/posts/a-random-walker/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#orge0cf169"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#org60255d4"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#orgaad4c71"&gt;A Div to Locate the Sketch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#orgb642ac1"&gt;The Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#org119e1eb"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge0cf169" class="outline-2"&gt;
&lt;h2 id="orge0cf169"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge0cf169"&gt;
&lt;p&gt;
This is another post to see if I understand how to get &lt;a href="https://p5js.org/"&gt;p5.js&lt;/a&gt; working in nikola. It's been a while since I tried and I just want to see if I remember how. This uses the random walk example from Daniel Schiffman's book &lt;i&gt;the Nature of Code&lt;/i&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org60255d4" class="outline-2"&gt;
&lt;h2 id="org60255d4"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org60255d4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaad4c71" class="outline-3"&gt;
&lt;h3 id="orgaad4c71"&gt;A Div to Locate the Sketch&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaad4c71"&gt;
&lt;p&gt;
The id of this div is set in the &lt;code&gt;p5.js&lt;/code&gt; &lt;code&gt;setup&lt;/code&gt; function as the parent of the sketch.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/a-random-walker/walker.js"&gt;&lt;/script&gt;
&lt;div id="random-walk-container"&gt;
&lt;/div&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb642ac1" class="outline-3"&gt;
&lt;h3 id="orgb642ac1"&gt;The Javascript&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb642ac1"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org119e1eb" class="outline-2"&gt;
&lt;h2 id="org119e1eb"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org119e1eb"&gt;
&lt;p&gt;
As always, this was way harder than it should have been.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>javascript</category><category>p5.js</category><category>processing</category><guid>https://necromuralist.github.io/posts/a-random-walker/</guid><pubDate>Sun, 21 Jul 2019 19:29:09 GMT</pubDate></item></channel></rss>