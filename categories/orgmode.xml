<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about orgmode)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/orgmode.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 30 Jul 2018 00:56:25 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Shell Output With Org-Babel Ipython</title><link>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the nice things about ipython is the ability to run shell commands with &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;. When you use it in an &lt;a class="reference external" href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; block, though, it will dump the output into a popup rather than in the same emacs org-file. One alternative is to use a shell block instead. I wrote earlier that this requires you to put an echo command in the block to prevent the text going to a pop-up.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-2"&gt;&lt;/a&gt;head Future_Connections.csv
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt;            &lt;span class="p"&gt;|&lt;/span&gt; Future Connection &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="m"&gt;840&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;197&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;, &lt;span class="m"&gt;979&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;519&lt;/span&gt;, &lt;span class="m"&gt;872&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;382&lt;/span&gt;, &lt;span class="m"&gt;423&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;, &lt;span class="m"&gt;226&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;1&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;349&lt;/span&gt;, &lt;span class="m"&gt;905&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;429&lt;/span&gt;, &lt;span class="m"&gt;860&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_4a49629aea124ca8a64b7097b5e8392f-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;309&lt;/span&gt;, &lt;span class="m"&gt;989&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;               &lt;span class="m"&gt;0&lt;/span&gt;.0 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It turns out that there's a similar solution to the ob-ipython popup, only since it's in python you have to use a print this time.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+BEGIN_SRC ipython :session futures :results output&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-2"&gt;&lt;/a&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;Future_Connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+END_SRC&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+RESULTS:&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+begin_example&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(6, 840)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(4, 197)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(620, 979)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(519, 872)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(382, 423)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(97, 226)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-15"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(349, 905)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-16"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(429, 860)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-17"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"(309, 989)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_d22f2b0f3ef34b5bb64022e04c011a79-19"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#+end_example&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I actually prefer the shell version, and since this is org-babel it makes more sense to use it, but I forgot about it just now and it took me a little while to figure out how to get the ob-ipython block to work so &lt;strong&gt;*note to future self:&lt;/strong&gt; &lt;em&gt;This is how to make it work, but use a shell block instead.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>orgmode</category><category>Python</category><guid>https://necromuralist.github.io/posts/shell-output-with-org-babel-ipython/</guid><pubDate>Wed, 11 Oct 2017 19:49:19 GMT</pubDate></item></channel></rss>