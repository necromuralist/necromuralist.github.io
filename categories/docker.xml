<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about docker)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/docker.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Wed, 30 Dec 2020 06:53:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Building a Jupyter Docker Container</title><link>https://necromuralist.github.io/posts/building-a-jupyter-docker-container/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;This is how I built a docker container to run a jupyter server. The reason why I did it was that I wanted to isolate any non-python dependencies I needed to install, but so far I haven't done any, so this could actually be done more easily using &lt;cite&gt;virtualenv&lt;/cite&gt;, but this is a starting point.&lt;/p&gt;
&lt;div class="section" id="the-dockerfile"&gt;
&lt;h2&gt;The Dockerfile&lt;/h2&gt;
&lt;p&gt;This is the configuration for building the docker image.&lt;/p&gt;
&lt;pre class="code dockerfile"&gt;&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;ubuntu:latest&lt;/span&gt;
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /code&lt;/span&gt;
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -y upgrade
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install -y build-essential python-dev
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install -y python python-distribute python-pip
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; pip install pip --upgrade
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;ADD&lt;/span&gt; requirements.txt /code
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir /notebooks
&lt;a name="rest_code_0dca2d1e2cfc4d53b270c7c8a753b32e-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;CMD&lt;/span&gt; jupyter notebook --no-browser --ip &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 --port &lt;span class="m"&gt;8888&lt;/span&gt; /notebooks
&lt;/pre&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;FROM&lt;/code&gt; line shows that I'm building my container using an ubuntu image (the latest image). The &lt;code class="docutils literal"&gt;WORKDIR&lt;/code&gt; sets the current working directory so commands that are run will look there for files. The next set of &lt;code class="docutils literal"&gt;RUN&lt;/code&gt; lines just say to update &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/code&gt; and install some basic python packages. The &lt;code class="docutils literal"&gt;ADD&lt;/code&gt; line takes the &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; file in the directory where I'm going to run this and put it in &lt;code class="docutils literal"&gt;/CODE&lt;/code&gt; which I pointed to with the &lt;code class="docutils literal"&gt;WORKDIR&lt;/code&gt; line. The next &lt;code class="docutils literal"&gt;RUN&lt;/code&gt; commands install my python dependencies and make a folder called &lt;code class="docutils literal"&gt;/notebooks&lt;/code&gt; to put the jupyter notebooks in. The last line (&lt;code class="docutils literal"&gt;CMD&lt;/code&gt;) is what will be executed when the container is run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-the-image"&gt;
&lt;h2&gt;Building the Image&lt;/h2&gt;
&lt;p&gt;If the docker-file is stored in a file named &lt;code class="docutils literal"&gt;jupyter.dockerfile&lt;/code&gt; next to the &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; file, both of which are in the directory where I run the build command. To build it (and name the image &lt;code class="docutils literal"&gt;jupyter&lt;/code&gt;) I'd run the command:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_850f4abee4e14018a976cfee28e554c0-1"&gt;&lt;/a&gt;docker -f jupyter.dockerfile -t jupyter:latest .
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="running-the-server"&gt;
&lt;h2&gt;Running the Server&lt;/h2&gt;
&lt;p&gt;To run the server in the same directory where the notebooks should be stored and using the default port of 8888:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_dc2dc5a51c864a189df6052c4dc781d7-1"&gt;&lt;/a&gt;docker --name jupyter -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;:/notebooks -d jupyter
&lt;/pre&gt;&lt;p&gt;Now the server should be reachable at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8888&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>docker</category><category>how-to</category><category>jupyter</category><guid>https://necromuralist.github.io/posts/building-a-jupyter-docker-container/</guid><pubDate>Mon, 20 Jun 2016 03:48:21 GMT</pubDate></item><item><title>Linking Two Docker Containers</title><link>https://necromuralist.github.io/posts/linking-two-docker-containers/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;I think this is the deprecated to do it, now that they have &lt;cite&gt;docker connect&lt;/cite&gt;, but it works, so I'll keep the notes.&lt;/p&gt;
&lt;p&gt;My goal was to link a container that I'd set up to run a &lt;cite&gt;Jupyter Notebook&lt;/cite&gt; server to a &lt;cite&gt;Mongo DB&lt;/cite&gt; server. I'll leave out the installation notes and just assume that there's a docker image named &lt;code class="docutils literal"&gt;mongo&lt;/code&gt; for &lt;cite&gt;MongoDB&lt;/cite&gt; and one named &lt;code class="docutils literal"&gt;jupyter&lt;/code&gt; for my &lt;cite&gt;Jupyter&lt;/cite&gt; server.&lt;/p&gt;
&lt;p&gt;First I'll run MongoDB. &lt;cite&gt;MongoDB&lt;/cite&gt; is going to use &lt;code class="docutils literal"&gt;/data/db&lt;/code&gt; to store its data-files so I'm going to mount my &lt;cite&gt;data&lt;/cite&gt; directory there.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_59304f52107a40b1a1c5c1afa2950cb8-1"&gt;&lt;/a&gt;docker run --name mongo -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;/data:/data/db -d mongo
&lt;/pre&gt;&lt;p&gt;Next I'll run the &lt;cite&gt;Jupyter&lt;/cite&gt; container, using the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--link&lt;/span&gt;&lt;/code&gt; option to point it to the &lt;code class="docutils literal"&gt;mongo&lt;/code&gt; container. The jupyter notebook is running on port 8888 and looking for notebooks in the &lt;code class="docutils literal"&gt;/notebooks&lt;/code&gt; directory so I'll mount my current working director there.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_fe420aa96dbe473c81024f95f774df5d-1"&gt;&lt;/a&gt;docker run --name jupyter -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;:/notebooks -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 --link mongo -d jupyter
&lt;/pre&gt;&lt;p&gt;At this point, opening a browser at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8888&lt;/span&gt;&lt;/code&gt; should open up the jupyter-server's home.&lt;/p&gt;&lt;/div&gt;</description><category>docker</category><category>how-to</category><guid>https://necromuralist.github.io/posts/linking-two-docker-containers/</guid><pubDate>Mon, 20 Jun 2016 03:31:20 GMT</pubDate></item><item><title>Running Redis in Docker</title><link>https://necromuralist.github.io/posts/running-redis-in-docker/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;These are the quick notes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Redis uses port 6379 as the default, which is where those ports in the command come from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_22994e9767eb4cbb9a70c74ac81857d5-1"&gt;&lt;/a&gt;docker pull redis
&lt;a name="rest_code_22994e9767eb4cbb9a70c74ac81857d5-2"&gt;&lt;/a&gt;docker run -d -p &lt;span class="m"&gt;6379&lt;/span&gt;:6379 --name redis redis
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="use-it-with-python-redis"&gt;
&lt;h2&gt;Use it with python-redis&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5a16a93c8bcb4f538953c28f501bbec9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;a name="rest_code_5a16a93c8bcb4f538953c28f501bbec9-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5a16a93c8bcb4f538953c28f501bbec9-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;client.keys()&lt;/code&gt; is a double-check. The &lt;code class="docutils literal"&gt;client&lt;/code&gt; object won't actually try to connect to the server until you call it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>docker</category><category>how-to</category><category>redis</category><guid>https://necromuralist.github.io/posts/running-redis-in-docker/</guid><pubDate>Mon, 20 Jun 2016 03:25:26 GMT</pubDate></item><item><title>Running MongoDB With Docker</title><link>https://necromuralist.github.io/posts/running-mongodb-with-docker/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;p&gt;I am working through O'Reilly's &lt;cite&gt;Data Visualization with Python and JavaScript&lt;/cite&gt; and the chapter on reading and writing data uses MongoDB (among other things) as an example. I've wanted to isolate my exploratory/development software installation as much as possible. With python this is fairly easy (thanks to &lt;cite&gt;virtualenv&lt;/cite&gt;), and &lt;cite&gt;npm&lt;/cite&gt; can make isolating javascript installations easier, but I wanted to try and use Docker to isolate any other things I had to install so this is a first step. It's actuall a second step, since I already have a Redis container, but I didnt' take any notes when I installed it so I don't really remember doing it, and I'm going to extend the use of docker to handle all the intallations I make while reading this book so it's a first-step for this reason, at least.&lt;/p&gt;
&lt;p&gt;Anyway, here's what to do.&lt;/p&gt;
&lt;p&gt;First pull the &lt;cite&gt;mongo&lt;/cite&gt; docker image.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_7611c96fb86e4999a05bae7803598e0f-1"&gt;&lt;/a&gt;docker pull mongo
&lt;/pre&gt;&lt;p&gt;To check that it's there after everything is done you can run &lt;code class="docutils literal"&gt;docker images&lt;/code&gt; and you should see something like this.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_3bcbf414356a425b9e0f43cc6943b980-1"&gt;&lt;/a&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
&lt;a name="rest_code_3bcbf414356a425b9e0f43cc6943b980-2"&gt;&lt;/a&gt;mongo               latest              282fd552add6        &lt;span class="m"&gt;2&lt;/span&gt; days ago          &lt;span class="m"&gt;336&lt;/span&gt;.1 MB
&lt;a name="rest_code_3bcbf414356a425b9e0f43cc6943b980-3"&gt;&lt;/a&gt;redis               latest              be9c5a746699        &lt;span class="m"&gt;5&lt;/span&gt; weeks ago         &lt;span class="m"&gt;184&lt;/span&gt;.9 MB
&lt;/pre&gt;&lt;p&gt;In this case I want the connection to Mongo DB to be available so I'm going to bind its local port (27017) to my host. I'm also going mount my local data file in the container so it will save its data my local folder.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_363351f93c6a4a569982903c77957497-1"&gt;&lt;/a&gt;docker run --name mongo -p &lt;span class="m"&gt;27017&lt;/span&gt;:27017 -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;/data:/data/db -d mongo
&lt;/pre&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--name&lt;/span&gt;&lt;/code&gt; flag gives the name that you'll see if you run &lt;code class="docutils literal"&gt;docker ps&lt;/code&gt; to see the running containers. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; 27017:27017&lt;/code&gt; makes it available to my host machine via &lt;code class="docutils literal"&gt;localhost:27017&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;$PWD/data:/data/db&lt;/span&gt;&lt;/code&gt; mounts the &lt;code class="docutils literal"&gt;data&lt;/code&gt; folder in the directory where I ran the docker command inside the container at &lt;code class="docutils literal"&gt;/data/db&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/code&gt; says to run it as a daemon. Finally the last argument &lt;code class="docutils literal"&gt;mongo&lt;/code&gt; identifies the image for the container.&lt;/p&gt;
&lt;p&gt;At this point MongoDb is accessible from my host machine, so, using &lt;code class="docutils literal"&gt;pymongo&lt;/code&gt; I can connect to it using something like this.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4ad5b394b55047e3adeefa3dfdc05e69-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;
&lt;a name="rest_code_4ad5b394b55047e3adeefa3dfdc05e69-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ad5b394b55047e3adeefa3dfdc05e69-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And that's it.&lt;/p&gt;&lt;/div&gt;</description><category>docker</category><category>mongodb</category><guid>https://necromuralist.github.io/posts/running-mongodb-with-docker/</guid><pubDate>Mon, 20 Jun 2016 03:01:17 GMT</pubDate></item></channel></rss>