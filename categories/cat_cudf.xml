<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about cuDF)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_cudf.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 06 Aug 2020 02:21:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>cuDF With emacs-jupyter</title><link>https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgdcb2a29"&gt;Beginning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org26a1eba"&gt;Problems Before I Even Started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgadcfaae"&gt;the &lt;b&gt;&lt;b&gt;RAPIDS&lt;/b&gt;&lt;/b&gt; instruction for starting the docker container is out of date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org0bb853f"&gt;The emacs-snapshot isn't compatible with emacs-jupyter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgae47e02"&gt;Imports&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org2d70e2a"&gt;PyPi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org120bacb"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org930a30c"&gt;Connecting To the Docker Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orge151be3"&gt;Create Series&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgfad2acf"&gt;CUDF Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org6e0b655"&gt;dask CUDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orga9bd2e0"&gt;Data Frames&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgcda1cab"&gt;From a Pandas DataFrame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org2017e53"&gt;Selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgd0e01eb"&gt;Applyng functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org4cd08c2"&gt;String Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgcc093f9"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdcb2a29" class="outline-2"&gt;
&lt;h2 id="orgdcb2a29"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdcb2a29"&gt;
&lt;p&gt;
This is a first attempt to use &lt;a href="https://rapids.ai/"&gt;RAPIDS&lt;/a&gt; using their docker container and &lt;a href="https://github.com/dzop/emacs-jupyter#building-the-widget-support-experimental"&gt;emacs-jupyter&lt;/a&gt;. So there's multiple places where things can go wrong and I don't know why.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org26a1eba" class="outline-3"&gt;
&lt;h3 id="org26a1eba"&gt;Problems Before I Even Started&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org26a1eba"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgadcfaae" class="outline-4"&gt;
&lt;h4 id="orgadcfaae"&gt;the &lt;b&gt;&lt;b&gt;RAPIDS&lt;/b&gt;&lt;/b&gt; instruction for starting the docker container is out of date&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgadcfaae"&gt;
&lt;p&gt;
The instructions on the &lt;a href="https://rapids.ai/start.html"&gt;getting started page&lt;/a&gt; say to start the docker container using this:
&lt;/p&gt;
&lt;pre class="example"&gt;
docker run --runtime=nvidia --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 \
    rapidsai/rapidsai:0.8-cuda10.0-runtime-ubuntu18.04-gcc7-py3.7
&lt;/pre&gt;

&lt;p&gt;
But the &lt;code&gt;--runtime=nvidia&lt;/code&gt; flag is for the now-deprecated &lt;code&gt;nvidia-docker2&lt;/code&gt; package (which isn't compatible with Ubuntu Disco Dingo anyway) and it will cause it to fail with an &lt;code&gt;unknown runtime&lt;/code&gt; error if you don't have that older package installed (which I don't). Removing the flag (and having the &lt;a href="https://github.com/NVIDIA/nvidia-docker"&gt;NVIDIA Container Toolkit&lt;/a&gt; installed) fixes the error.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0bb853f" class="outline-4"&gt;
&lt;h4 id="org0bb853f"&gt;The emacs-snapshot isn't compatible with emacs-jupyter&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0bb853f"&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; has become such a center-piece for how I work I can't even remember how I did things before I discovered it, but now there's &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;Emacs Jupyter&lt;/a&gt; which claims to have even more features, so I thought I'd try it out, but when I tried to install it emacs would crash (during the installation). According to  &lt;a href="https://github.com/dzop/emacs-zmq/issues/14"&gt;this bug report&lt;/a&gt; the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs snapshot&lt;/a&gt; for Ubuntu is built with an out-of-date version of gcc. I don't know if that's true, but I re-built emacs with &lt;a href="https://www.emacswiki.org/emacs/EmacsSnapshotAndDebian"&gt;the instructions on the emacs wiki&lt;/a&gt; and it at least installed emacs-jupyter without crashing. Here's where I find out if it works. Of course, I now have two versions of emacs. One that gets updated automatically and one that works with emacs-jupyter. I'll have to figure out what to do about that, assuming emacs-jupyter turns out to be worth keeping.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgae47e02" class="outline-3"&gt;
&lt;h3 id="orgae47e02"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgae47e02"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2d70e2a" class="outline-4"&gt;
&lt;h4 id="org2d70e2a"&gt;PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2d70e2a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import cudf
import dask_cudf
import pandas
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org120bacb" class="outline-2"&gt;
&lt;h2 id="org120bacb"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org120bacb"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org930a30c" class="outline-3"&gt;
&lt;h3 id="org930a30c"&gt;Connecting To the Docker Container&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org930a30c"&gt;
&lt;p&gt;
According to the emacs-snapshot documentation you can connect via SSH (but the Rapids docker container doesn't have it installed by default) or you can connect to a notebook server. I originally was going to try the SSH route, since I already do that with ob-ipython, but the notebook-server might be more suited to this case. Let's see.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("test")
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
test
&lt;/pre&gt;


&lt;p&gt;
So, the notebook doesn't seem to work as-is, but the SSH connection does, which is nice, but it's not different from what ob-ipython gave me (well it kind of is in that I didn't copy the file over).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge151be3" class="outline-3"&gt;
&lt;h3 id="orge151be3"&gt;Create Series&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge151be3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfad2acf" class="outline-4"&gt;
&lt;h4 id="orgfad2acf"&gt;CUDF Series&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfad2acf"&gt;
&lt;p&gt;
This runs on the GPU.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = cudf.Series([1, 2, 3, None, 4])
print(s)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
0    1
1    2
2    3
3     
4    4
dtype: int64
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6e0b655" class="outline-4"&gt;
&lt;h4 id="org6e0b655"&gt;dask CUDF&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6e0b655"&gt;
&lt;p&gt;
This also runs on the GPU, but if you have more than one GPU it will use more than one.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ds = dask_cudf.from_cudf(s, npartitions=2)
print(ds.compute())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
0    1
1    2
2    3
3     
4    4
dtype: int64
&lt;/pre&gt;


&lt;p&gt;
My machine only has one GPU, so this didn't gain anything, but I do have more than one machine with a GPU so this might help with distributed computing, if I get around to it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga9bd2e0" class="outline-3"&gt;
&lt;h3 id="orga9bd2e0"&gt;Data Frames&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga9bd2e0"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frame = cudf.DataFrame([("a", list(range(10))),
			("b", list(range(10)))])
frame["a"] = frame.a * 5
print(frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
    a  b
0   0  0
1   5  1
2  10  2
3  15  3
4  20  4
5  25  5
6  30  6
7  35  7
8  40  8
9  45  9
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcda1cab" class="outline-4"&gt;
&lt;h4 id="orgcda1cab"&gt;From a Pandas DataFrame&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcda1cab"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frame = pandas.DataFrame({"a": list(range(4)), "b": list(range(4, 8))})
frame = cudf.DataFrame.from_pandas(frame)
print(frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   a  b
0  0  4
1  1  5
2  2  6
3  3  7
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2017e53" class="outline-3"&gt;
&lt;h3 id="org2017e53"&gt;Selection&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2017e53"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(frame[frame.a &amp;gt; 1])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   a  b
2  2  6
3  3  7
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd0e01eb" class="outline-3"&gt;
&lt;h3 id="orgd0e01eb"&gt;Applyng functions&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd0e01eb"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frame["a"] = frame.a.applymap(lambda row: row + 5)
print(frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   a  b
0  5  4
1  6  5
2  7  6
3  8  7
&lt;/pre&gt;


&lt;p&gt;
This is basically the pandas.DataFrame.apply method, but they renamed it for some reason.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4cd08c2" class="outline-3"&gt;
&lt;h3 id="org4cd08c2"&gt;String Methods&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4cd08c2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;series = cudf.Series(["Alpha", "Beta", "GAMMA", "dELTA"])
print(series.str.lower())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
0    alpha
1     beta
2    gamma
3    delta
dtype: object
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcc093f9" class="outline-2"&gt;
&lt;h2 id="orgcc093f9"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcc093f9"&gt;
&lt;p&gt;
After a certain point, this was kind of a boring exercise, mostly because &lt;code&gt;cuDF&lt;/code&gt; runs a subset of pandas but on the GPU, so if you know pandas, you know some of &lt;code&gt;cuDF&lt;/code&gt;, but just getting it working (with emacs-jupyter) was a little bit of work, so maybe it's useful to have recorded that here.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cudf</category><category>emacs-jupyter</category><category>walk-through</category><guid>https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/</guid><pubDate>Sat, 10 Aug 2019 21:12:42 GMT</pubDate></item></channel></rss>