<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about howto)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/howto.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; 
&lt;div id="license"xmlns:cc="http://creativecommons.org/ns#" &gt;This work is licensed under
&lt;a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&gt;CC BY 4.0
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"&gt;
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"&gt;&lt;/a&gt;
&lt;/div&gt;
</copyright><lastBuildDate>Tue, 28 May 2024 00:09:15 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Apt-Fast In Sparky Linux</title><link>https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org019f34a"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#orga8b9bdc"&gt;The Intructions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#orgc3f29f5"&gt;Create An Apt Entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org5b5b6f8"&gt;Add the Keyring and Install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org45d4e48"&gt;The apt-key Solution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org9ce6a08"&gt;The Start of the Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#orgb048e49"&gt;Getting the GPG File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#orgabd5047"&gt;Now Back to Setting it Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org5a37367"&gt;Update and Install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org21606e2"&gt;And Now, Another Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org75c815e"&gt;What Have We Learned Today Children?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/#org42b613d"&gt;Links Collected&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org019f34a" class="outline-2"&gt;
&lt;h2 id="org019f34a"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org019f34a"&gt;
&lt;p&gt;
I have an old eeePC netbook that I thought I'd revive by loading &lt;a href="https://sparkylinux.org/"&gt;Sparky Linux&lt;/a&gt; onto it. One of the things I set up on it is &lt;a href="https://github.com/ilikenwf/apt-fast"&gt;apt-fast&lt;/a&gt;, which the README on the github repository describes like this:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
apt-fast is a shellscript wrapper for apt-get and aptitude that can drastically improve apt download times by downloading packages in parallel, with multiple connections per package.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I've used it for a while on ubuntu but Sparky Linux didn't have it in the repositories. The apt-fast documentation has instructions for &lt;a href="https://github.com/ilikenwf/apt-fast#debian-and-derivates"&gt;installing it on debian (and derivatives)&lt;/a&gt; and since Sparky Linux is based on debian (the current version, SparkyLinux 6.7 (Po-Tolo) is based on debian bullseye) I decided to try that. Ultimately I got it working, but as is often the case, it wasn't quite so straightforward as I would like for it to have been.
&lt;/p&gt;

&lt;p&gt;
Unusual Ingredients List:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;SparkyLinux 6.7 (Po-Tolo)&lt;/li&gt;
&lt;li&gt;fish shell&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga8b9bdc" class="outline-2"&gt;
&lt;h2 id="orga8b9bdc"&gt;The Intructions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga8b9bdc"&gt;
&lt;p&gt;
Although the PPA system is built for Ubuntu, the recommendation from apt-fast is to use it with debian-based systems too (apt-fast is just a shell-script that runs &lt;code&gt;aria2&lt;/code&gt; and &lt;code&gt;apt&lt;/code&gt; (or &lt;code&gt;apt-get&lt;/code&gt;, etc.) so it's not like there's a lot of dependencies that might conflict). This is what they say to do.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc3f29f5" class="outline-3"&gt;
&lt;h3 id="orgc3f29f5"&gt;Create An Apt Entry&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc3f29f5"&gt;
&lt;p&gt;
First I created a file for the sources at &lt;code&gt;/etc/apt/sources.list.d/apt-fast.list&lt;/code&gt; and put these lines in it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main 
deb-src http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Bionic came out in 2018 so they maybe haven't updated the instructions in a while.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5b5b6f8" class="outline-3"&gt;
&lt;h3 id="org5b5b6f8"&gt;Add the Keyring and Install&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5b5b6f8"&gt;
&lt;p&gt;
Once the file was in place I ran the commands.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B
apt-get update
apt-get install apt-fast
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The first output I saw was a warning:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Warning: apt-key is deprecated. Manage keyring files &lt;span class="k"&gt;in&lt;/span&gt; trusted.gpg.d instead &lt;span class="o"&gt;(&lt;/span&gt;see apt-key&lt;span class="o"&gt;(&lt;/span&gt;8&lt;span class="o"&gt;))&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is something I've seen on ubuntu as well so fixing it seemed like a useful thing to do, especially since at the end of the regular output I got an error.
&lt;/p&gt;

&lt;p&gt;
Between the warning and the final error there was the usual output that I've seen:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Executing: /tmp/apt-key-gpghome.YL04bWmGAF/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B
gpg: key 1EE2FF37CA8DA16B: public key &lt;span class="s2"&gt;"Launchpad PPA for apt-fast"&lt;/span&gt; imported
gpg: Total number processed: 1
gpg:               imported: 1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then came this, the error I mentioned, which is not what I usually see:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg: no writable keyring found: Not found
gpg: error reading &lt;span class="s1"&gt;'[stdin]'&lt;/span&gt;: General error
gpg: import from &lt;span class="s1"&gt;'[stdin]'&lt;/span&gt; failed: General error
gpg: Total number processed: 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I don't know if this is a debian problem or a sparky linux problem, but since you're not supposed to be using this method anyway, I went looking for a different solution.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org45d4e48" class="outline-2"&gt;
&lt;h2 id="org45d4e48"&gt;The apt-key Solution&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org45d4e48"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9ce6a08" class="outline-3"&gt;
&lt;h3 id="org9ce6a08"&gt;The Start of the Solution&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9ce6a08"&gt;
&lt;p&gt;
The first part of the solution was pointed to by &lt;a href="https://stackoverflow.com/a/71384057"&gt;this Stack Overflow Answer&lt;/a&gt;. There was a problem with the answer, though, in that the person asking the question was using a URL that pointed to a gpg file, so the answers all assumed you could download it with curl, wget, etc. (all the answers that I could understand, anyway). So now that I had the answer I had a new problem - how do you get the file from the keyserver?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb048e49" class="outline-3"&gt;
&lt;h3 id="orgb048e49"&gt;Getting the GPG File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb048e49"&gt;
&lt;p&gt;
Once again to the web, this time &lt;a href="https://superuser.com/a/1643115"&gt;this answer from SuperUser&lt;/a&gt; seemed to work.
&lt;/p&gt;

&lt;p&gt;
First, I made a temporary directory and pointed &lt;code&gt;GNUPGHOME&lt;/code&gt; to it so that I wasn't adding anything to my actual gpg setup (this is fish-shell syntax).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; -x GNUPGHOME &lt;span class="nv"&gt;$(&lt;/span&gt;mktemp -d&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;echo $GNUPGHOME&lt;/code&gt; showed that this created a file at &lt;code&gt;/tmp/tmp.dUDUEgFQ0x&lt;/code&gt; (but I didn't actually need to know that, I'm just mentioning it).
&lt;/p&gt;

&lt;p&gt;
Taking the &lt;code&gt;--recv-keys&lt;/code&gt; argument from the instructions above (&lt;code&gt;apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B&lt;/code&gt;) I added the key.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Next I made a place to put the gpg file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /etc/apt/keyrings
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then I output the file in my home directory (the &lt;code&gt;GNUPGHOME&lt;/code&gt;  environment variable is only available to my user, so I put the file somewhere that I didn't need to be root, i.e. my home directory).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg -o A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B.gpg --export A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then I moved the file into the directory I created for it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B.gpg /etc/apt/keyrings/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The SuperUser answer I linked to used &lt;code&gt;gpg -ao&lt;/code&gt; but the &lt;code&gt;a&lt;/code&gt; option makes it an "armored" file, and part of the Stack Overflow answer for setting up the key is about de-armoring it so I just left that option out.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgabd5047" class="outline-3"&gt;
&lt;h3 id="orgabd5047"&gt;Now Back to Setting it Up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgabd5047"&gt;
&lt;p&gt;
So now that we have the keyring we need to edit the &lt;code&gt;/etc/apt/sources.list.d/apt-fast.list&lt;/code&gt; file that we created at the beginning of this.
&lt;/p&gt;

&lt;p&gt;
This is what I started with.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main 
deb-src http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And I changed it to refer to the gpg file that I created.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb &lt;span class="o"&gt;[&lt;/span&gt;signed-by&lt;span class="o"&gt;=&lt;/span&gt;/etc/apt/keyrings/A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B.gpg&lt;span class="o"&gt;]&lt;/span&gt; http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main
deb-src  &lt;span class="o"&gt;[&lt;/span&gt;signed-by&lt;span class="o"&gt;=&lt;/span&gt;/etc/apt/keyrings/A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B.gpg&lt;span class="o"&gt;]&lt;/span&gt;  http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5a37367" class="outline-3"&gt;
&lt;h3 id="org5a37367"&gt;Update and Install&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5a37367"&gt;
&lt;p&gt;
So then I updated apt and installed it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt update
sudo apt install apt-fast
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And it worked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org21606e2" class="outline-2"&gt;
&lt;h2 id="org21606e2"&gt;And Now, Another Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org21606e2"&gt;
&lt;p&gt;
This got me to a working &lt;code&gt;apt-fast&lt;/code&gt; installation but the fact that I was using &lt;code&gt;bionic&lt;/code&gt; seemed off to me so I decided to update the &lt;code&gt;apt-fast.list&lt;/code&gt;. Under the instructions for adding the PPA is this note.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Note that the PPA version bionic might need to be updated with the recent Ubuntu LTS codename to stay up-to-date.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
So I went and looked up the &lt;a href="https://ubuntu.com/about/release-cycle"&gt;Ubuntu Release Cycle&lt;/a&gt; and saw that "jammy" is the most recent version so I updated the &lt;code&gt;apt-fast.list&lt;/code&gt; file to match.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb &lt;span class="o"&gt;[&lt;/span&gt;signed-by&lt;span class="o"&gt;=&lt;/span&gt;/etc/apt/keyrings/A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B.gpg&lt;span class="o"&gt;]&lt;/span&gt; http://ppa.launchpad.net/apt-fast/stable/ubuntu jammy main
deb-src  &lt;span class="o"&gt;[&lt;/span&gt;signed-by&lt;span class="o"&gt;=&lt;/span&gt;/etc/apt/keyrings/A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B.gpg&lt;span class="o"&gt;]&lt;/span&gt;  http://ppa.launchpad.net/apt-fast/stable/ubuntu jammy main
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And then I installed the newer version.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt update
sudo apt install apt-fast
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And I got a nice long stack-trace and error message at the bottom of which was this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg-deb: error: archive &lt;span class="s1"&gt;'/var/cache/apt/archives/apt-fast_1.9.12-1~ubuntu22.04.1_all.deb'&lt;/span&gt; uses unknown compression &lt;span class="k"&gt;for&lt;/span&gt; member &lt;span class="s1"&gt;'control.tar.zst'&lt;/span&gt;, giving up
dpkg: error processing archive /var/cache/apt/archives/apt-fast_1.9.12-1~ubuntu22.04.1_all.deb &lt;span class="o"&gt;(&lt;/span&gt;--unpack&lt;span class="o"&gt;)&lt;/span&gt;:
 dpkg-deb --control subprocess returned error &lt;span class="k"&gt;exit&lt;/span&gt; &lt;span class="nb"&gt;status &lt;/span&gt;2
Errors were encountered &lt;span class="k"&gt;while&lt;/span&gt; processing:
 /var/cache/apt/archives/apt-fast_1.9.12-1~ubuntu22.04.1_all.deb
E: Sub-process /usr/bin/dpkg returned an error code &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The part of it that seemed like it might matter the most was the fragment:
&lt;/p&gt;

&lt;pre class="example" id="orga8c1fed"&gt;
uses unknown compression for member 'control.tar.zst', giving up~
&lt;/pre&gt;

&lt;p&gt;
What is a &lt;code&gt;zst&lt;/code&gt; file? &lt;a href="https://en.wikipedia.org/wiki/Zstd?useskin=vector"&gt;According to wikipedia&lt;/a&gt; it's a "Zstandard" file and Debian and Ubuntu added support for using it to compress &lt;code&gt;deb&lt;/code&gt; packages back in 2018. There is a package listed in &lt;code&gt;apt&lt;/code&gt; called &lt;code&gt;zstd&lt;/code&gt; that it says supports &lt;code&gt;zst&lt;/code&gt; compression so I installed it but the error remained.
&lt;/p&gt;

&lt;p&gt;
Once again, someone ran into this and asked about it on &lt;a href="https://unix.stackexchange.com/questions/669004/zst-compression-not-supported-by-apt-dpkg"&gt;Stack Exchange&lt;/a&gt;. &lt;a href="https://unix.stackexchange.com/a/669008"&gt;One of the answers&lt;/a&gt; said:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Debianâs dpkg package didnât support zstd compression prior to version 1.21.18. Support was added just in time for Debian 12.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Since the SparkyLinux install is based on Debian 11 that seemed like it might be the problem. I checked the dpkg-version and got back:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Debian&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'dpkg'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;package&lt;span class="w"&gt; &lt;/span&gt;management&lt;span class="w"&gt; &lt;/span&gt;program&lt;span class="w"&gt; &lt;/span&gt;version&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.20.12&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;i386&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So that seemed like the likely culprit. The ubuntu release dates page noted that there was a LTS version between "bionic" and "jammy" called "focal" so I edited the &lt;code&gt;apt-fast.list&lt;/code&gt; file again, replacing "jammy" with "focal" and re-ran the installation and so farâ¦ it works.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org75c815e" class="outline-2"&gt;
&lt;h2 id="org75c815e"&gt;What Have We Learned Today Children?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org75c815e"&gt;
&lt;p&gt;
Further down in the installation instructions it says that you can just download the files and install them along with the &lt;code&gt;aria2&lt;/code&gt; package, so going through this whole thing was kind of unnecessary, but getting around the apt-key problem was something that I'd wondered about before, so it might be useful in the future, if PPA creators keep using it and they don't come up with an automatic fix for it.
&lt;/p&gt;

&lt;p&gt;
I guess the main thing I learned is that I should have read to the end of the instructions and picked the easy way out instead of trying to force the old familiar way to work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org42b613d" class="outline-2"&gt;
&lt;h2 id="org42b613d"&gt;Links Collected&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org42b613d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;FWDekker. Answer to âWarning: apt-key is deprecated. Manage keyring files in trusted.gpg.d insteadâ [Internet]. Stack Overflow. 2022 [cited 2023 Jun 16]. Available from: &lt;a href="https://stackoverflow.com/a/71384057"&gt;https://stackoverflow.com/a/71384057&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kitt S. Answer to âzst compression not supported by apt/dpkgâ [Internet]. Unix &amp;amp; Linux Stack Exchange. 2021 [cited 2023 Jun 16]. Available from: &lt;a href="https://unix.stackexchange.com/a/669008"&gt;https://unix.stackexchange.com/a/669008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fuzzydrawrings. Answer to âgpg: only download a key from a keyserverâ [Internet]. Super User. 2021 [cited 2023 Jun 16]. Available from: &lt;a href="https://superuser.com/a/1643115"&gt;https://superuser.com/a/1643115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ilikenwf/apt-fast: apt-fast: A shellscript wrapper for apt that speeds up downloading of packages. [Internet]. [cited 2023 Jun 16]. Available from: &lt;a href="https://github.com/ilikenwf/apt-fast"&gt;https://github.com/ilikenwf/apt-fast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;zstd. In: Wikipedia [Internet]. 2023 [cited 2023 Jun 16]. Available from: &lt;a href="https://en.wikipedia.org/w/index.php?title=Zstd&amp;amp;oldid=1157564498"&gt;https://en.wikipedia.org/w/index.php?title=Zstd&amp;amp;oldid=1157564498&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>apt</category><category>debian</category><category>howto</category><category>ubuntu</category><guid>https://necromuralist.github.io/posts/apt-fast-in-sparky-linux/</guid><pubDate>Fri, 16 Jun 2023 20:15:45 GMT</pubDate></item><item><title>Fish, Mocha, Chai - A Local Global Installation In Ubuntu</title><link>https://necromuralist.github.io/posts/fish-mocha-chai-a-local-global-installation-in-ubuntu/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org3976c6b" class="outline-2"&gt;
&lt;h2 id="org3976c6b"&gt;What This Is About&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3976c6b"&gt;
&lt;p&gt;
I've been getting back into &lt;a href="https://p5.js.org"&gt;p5.js&lt;/a&gt; lately and thought that I should add some testing so I went to their site and found that they had a tutorial page called &lt;a href="https://p5js.org/learn/tdd.html"&gt;"Unit Testing and Test Driven Development"&lt;/a&gt; which I decided to follow along with to get re-acquainted with testing javascript but then I ran into a problem running &lt;a href="https://mochajs.org/"&gt;mocha&lt;/a&gt;, or more specifically, running mocha crashed because it couldn't find &lt;a href="https://www.chaijs.com/"&gt;chai&lt;/a&gt; even though I'd followed the instructions to install it. So here goes what I did to fix it.
&lt;/p&gt;

&lt;p&gt;
This is another case where you can basically find the answer online if you look at the right page - but there seems to be more pages with the unhelpful answers and I use the fish shell and ubuntu so it's a little different from the stuff I found that did work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf39b5ea" class="outline-2"&gt;
&lt;h2 id="orgf39b5ea"&gt;The Tutorial's Installation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf39b5ea"&gt;
&lt;p&gt;
This is how they tell you to install mocha and chai.
&lt;/p&gt;

&lt;p&gt;
First, update npm (assuming you've already installed it somehow).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo npm install npm@latest -g
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then install mocha and chai using npm.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install mocha -g
npm install chai -g
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This right here is actually where the trouble starts. If you try to install things globally, you need to run it as root, thus the use of &lt;code&gt;sudo&lt;/code&gt; when updating &lt;code&gt;npm&lt;/code&gt;. But their instructions on installing &lt;code&gt;mocha&lt;/code&gt; and &lt;code&gt;chai&lt;/code&gt; don't say to use &lt;code&gt;sudo&lt;/code&gt;, which will result in a permission error, so did they forget to run it as root, or did they not mean to install it globally? I decided to  re-run their instructions as root.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo npm install mocha -g
sudo npm install chai -g
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This seemed to work, but when I ran &lt;code&gt;mocha&lt;/code&gt; on the folder where I put the code given in the tutorial:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mocha color_unit_tests/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It gave me an error.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Error: Cannot find module &lt;span class="s1"&gt;'chai'&lt;/span&gt;
Require stack:
- /home/hades/projects/ape-iron/p5tests/color_unit_tests/test.js
    at Module._resolveFilename &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/loader:1097:15&lt;span class="o"&gt;)&lt;/span&gt;
    at Module._load &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/loader:942:27&lt;span class="o"&gt;)&lt;/span&gt;
    at Module.require &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/loader:1163:19&lt;span class="o"&gt;)&lt;/span&gt;
    at require &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/helpers:110:18&lt;span class="o"&gt;)&lt;/span&gt;
    at Object.&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;anonymous&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;/home/hades/projects/ape-iron/p5tests/color_unit_tests/test.js:5:16
&lt;span class="o"&gt;)&lt;/span&gt;
    at Module._compile &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/loader:1276:14&lt;span class="o"&gt;)&lt;/span&gt;
    at Module._extensions..js &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/loader:1330:10&lt;span class="o"&gt;)&lt;/span&gt;
    at Module.load &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/loader:1139:32&lt;span class="o"&gt;)&lt;/span&gt;
    at Module._load &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/cjs/loader:980:12&lt;span class="o"&gt;)&lt;/span&gt;
    at ModuleWrap.&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;anonymous&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/esm/translators:169:29&lt;span class="o"&gt;)&lt;/span&gt;
    at ModuleJob.run &lt;span class="o"&gt;(&lt;/span&gt;node:internal/modules/esm/module_job:194:25&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So, maybe that wasn't the answer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5def699" class="outline-2"&gt;
&lt;h2 id="org5def699"&gt;This Might Be the Wrong Way&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5def699"&gt;
&lt;p&gt;
I found a &lt;a href="https://stackoverflow.com/questions/43156635/chai-mocha-global-local"&gt;Stack Overflow&lt;/a&gt; question that described the exact problem I had, but one of the comments had this to say:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Mocha can be installed either locally or globally, but Chai can only be installed locally. Has to do with the way it is applied (i.e., to the specific app instance). â 
Steve Carey
May 30, 2020 at 21:11
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I don't know who "Steve Carey" is and whether what he is saying is true, but the &lt;a href="https://www.chaijs.com/guide/installatio"&gt;chai installation instructions&lt;/a&gt; do tell you to install it locally, rather than globally, but when you do this for every project you end up with &lt;code&gt;node_modules&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files all over the place. I suppose there's a reason for this, maybe to couple the version of chai you're using with the project, but I decided to try another way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf582407" class="outline-2"&gt;
&lt;h2 id="orgf582407"&gt;The Local Global&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf582407"&gt;
&lt;p&gt;
&lt;a href="https://stackoverflow.com/a/13021677"&gt;This answer&lt;/a&gt; on Stack Overflow describes how to install npm-packages into your home directory as your global directory. It assumes you're using bash, though, so I had to change it up a little bit.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3dc0c70" class="outline-3"&gt;
&lt;h3 id="org3dc0c70"&gt;Make a local package directory&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3dc0c70"&gt;
&lt;p&gt;
First I made a local package directory.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/.npm-packages
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then I created a file called &lt;code&gt;~/.npmrc&lt;/code&gt; that had one line in it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; /home/hades/.npm-packages
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
With &lt;code&gt;/home/hades/&lt;/code&gt; being my home-directory.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbeb6c5c" class="outline-3"&gt;
&lt;h3 id="orgbeb6c5c"&gt;Edit the Fish Configuration&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbeb6c5c"&gt;
&lt;p&gt;
At the bottom of the &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file I added these lines.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; -x NPM_PACKAGES &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.npm-packages
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is where &lt;code&gt;npm&lt;/code&gt; will install stuff if you tell it to install files globally once we're done. The folder can be named anything, I imagine, but it will need to match what's in the &lt;code&gt;.npmrc&lt;/code&gt; file.
&lt;/p&gt;

&lt;p&gt;
When &lt;code&gt;npm&lt;/code&gt; installs packages some of them will be executable commands (like &lt;code&gt;mocha&lt;/code&gt;) and so I had to update the fish &lt;code&gt;PATH&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fish_add_path &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.npm-packages/bin
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Although this will make &lt;code&gt;mocha&lt;/code&gt; available, &lt;code&gt;chai&lt;/code&gt; isn't an executable so you have to set the &lt;code&gt;NODE_PATH&lt;/code&gt; variable so that node will no where to look for modules to import.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; --export NODE_PATH &lt;span class="nv"&gt;$NPM_PACKAGES&lt;/span&gt;/lib/node_modules
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I was originally appending the current contents of &lt;code&gt;NODE_PATH&lt;/code&gt; to the end, like you would with a regular path variable (&lt;code&gt;$NPM_PACKAGES/lib/node_modules:$NODE_PATH&lt;/code&gt;) but for some reason this breaks something and the variable doesn't get set. Or at least it was always empty when I tried to run &lt;code&gt;mocha&lt;/code&gt;. So the solution for me was to always clobber the entire path (the variable was empty before I started using it anyway).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc20996d" class="outline-2"&gt;
&lt;h2 id="orgc20996d"&gt;And Now&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc20996d"&gt;
&lt;p&gt;
Running the tests again:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mocha ../../ape-iron/p5tests/color_unit_tests/
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;


these are my first tests for p5js
  â should be a string
  â should be equal to awesome


2 passing (5ms)

&lt;/pre&gt;


&lt;p&gt;
The path is different because I'm writing this post in a different repository, but, anyway, it looks like it works.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org77f33ec" class="outline-2"&gt;
&lt;h2 id="org77f33ec"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org77f33ec"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Drechsel E. Install NPM into home directory with distribution nodejs package (Ubuntu) [Internet]. Stack Overflow. 2019 [cited 2023 Jun 8]. Available from: &lt;a href="https://stackoverflow.com/q/10081293"&gt;https://stackoverflow.com/q/10081293&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Unit Testing and Test Driven Development | p5.js [Internet]. [cited 2023 Jun 8]. Available from: &lt;a href="https://p5js.org/learn/tdd.html"&gt;https://p5js.org/learn/tdd.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>fish</category><category>howto</category><category>node</category><category>ubuntu</category><guid>https://necromuralist.github.io/posts/fish-mocha-chai-a-local-global-installation-in-ubuntu/</guid><pubDate>Thu, 08 Jun 2023 23:29:32 GMT</pubDate></item><item><title>Cuda, Conda, Docker...ugh</title><link>https://necromuralist.github.io/posts/cuda-conda-dockerugh/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org17ae6e1" class="outline-2"&gt;
&lt;h2 id="org17ae6e1"&gt;The Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org17ae6e1"&gt;
&lt;p&gt;
I haven't been doing anything with pytorch recently so I decided to restart by setting up a docker container on my machine with a beefier nvidia card than the machine I had been using. I've learned a little bit more about docker since I built my earlier container so I decided to update the image and found it both easier and harder than I remember it being. It went easier because I knew more or less what I had to do so I knew what to look up. Harder because there's some workarounds that you have to work with that weren't there before, and I decided to stick with &lt;code&gt;conda&lt;/code&gt;, which seems to add an extra layer of difficulty compared to pip and virtualenv when you use docker. But, anyway, enough with the whining, here's the stuff.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I'm doing this on Ubuntu 21.10.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1038fd2" class="outline-2"&gt;
&lt;h2 id="org1038fd2"&gt;Nvidia-Container-Toolkit and Ubuntu&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1038fd2"&gt;
&lt;p&gt;
The first thing you should do is install the &lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker"&gt;nvidia-container-toolkit&lt;/a&gt;. The instructions say to add the repository this way:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
   &amp;amp;&amp;amp; curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
   &amp;amp;&amp;amp; curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This introduces two problems for me. The first is that this assumes you use bash, but I'm using fish so the command doesn't work. This is no big deal since I just looking in the &lt;code&gt;/etc/os-release&lt;/code&gt; file to get the &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;VERSION_ID&lt;/code&gt; and wrote it out.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu21.10/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
But then this introduces the second problem - the second curl fails with the message:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Unsupported distribution!
Check https://nvidia.github.io/nvidia-docker
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It turns out there's an &lt;a href="https://github.com/NVIDIA/nvidia-docker/issues/1574"&gt;open bug report&lt;/a&gt; on GitHub, with a comment that only Long-Term-Support versions are supported. The commenter suggested using 18.04 for some reason, but I went with 20.04 and it seemed to work.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu20.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

sudo apt update
sudo apt install nvidia-container-toolkit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfe168b9" class="outline-2"&gt;
&lt;h2 id="orgfe168b9"&gt;The Cuda Image&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfe168b9"&gt;
&lt;p&gt;
Now that I was setup to run the container I ran a test.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm --gpus all nvidia/cuda:11.4.2-cudnn8-devel nvidia-smi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gave me an error, something like &lt;code&gt;Error response from daemon&lt;/code&gt; (I don't remember exactly), which turns out to be the result of a pretty major flaw right now (as noted on the &lt;a href="https://github.com/NVIDIA/libnvidia-container/issues/111"&gt;github issue for it&lt;/a&gt;). One of the commenters &lt;a href="https://github.com/NVIDIA/libnvidia-container/issues/111#issuecomment-932742403"&gt;posted a work-around for it&lt;/a&gt; which seems to work.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf43c4b2" class="outline-3"&gt;
&lt;h3 id="orgf43c4b2"&gt;Edit /etc/nvidia-container-runtime/config.toml&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf43c4b2"&gt;
&lt;p&gt;
In the file there's a line:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#no-cgroups = false
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Uncomment it and set it to true.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;no-cgroups = true
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Okay, easy-peasy. All fixed, then, right? Well, doing this fix means that you now have to pass in more flags when you run the container. First you need to check what you have.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls /dev | grep nvidia
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then when you run the container you need to pass in most of those things as &lt;code&gt;--device&lt;/code&gt; arguments.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm --gpus all --device /dev/nvidia0 --device /dev/nvidiactl --device /dev/nvidia-modeset --device /dev/nvidia-uvm nvidia/cuda:11.4.2-cudnn8-devel nvidia-smi
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You might not need to actually look in &lt;code&gt;/dev&lt;/code&gt; first. I had to because the post on github was referring to a &lt;code&gt;/dev/nvidia1&lt;/code&gt; device, but I don't have one. This appears to work, although it's a bit unwieldy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgeaf4787" class="outline-2"&gt;
&lt;h2 id="orgeaf4787"&gt;Now for Conda&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeaf4787"&gt;
&lt;p&gt;
This next bit probably shouldn't be registered as a problem, but the last time I tried to run pytorch in docker there was some kind of bug when I installed it with &lt;code&gt;pip&lt;/code&gt; that went away when I installed it with &lt;code&gt;conda&lt;/code&gt; so I decided to stick with cuda, but I also wanted to try and set it up the way I do with virtualenv - cached by docker and run non-root. This turns out to be much harder to do than with virtualenv for some reason. I looked through some posts on StackOverflow and elsewhere and didn't really see any good solutions, but &lt;a href="https://towardsdatascience.com/conda-pip-and-docker-ftw-d64fe638dc45"&gt;this one on Toward Data Science&lt;/a&gt; got close enough.
The way that post suggests is to change the shell that docker uses to &lt;code&gt;bash&lt;/code&gt; and moving the &lt;code&gt;miniconda&lt;/code&gt; install path into the home directory of the user that you want to run it.
&lt;/p&gt;

&lt;p&gt;
I won't bother with all of the &lt;code&gt;Dockerfile&lt;/code&gt;, but the basic changes are:
&lt;/p&gt;

&lt;p&gt;
Change the shell.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SHELL [ "/bin/bash", "--login", "-c" ]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Switch to the user (assuming you added the user and home directory earlier in the docker file) and add an environment file to store the directory in (I don't think you need to use &lt;code&gt;ENV&lt;/code&gt; but the post used it. I'll try &lt;code&gt;ARG&lt;/code&gt; later).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;USER ${USER_NAME}
WORKDIR ${USER_HOME}

ENV CONDA_DIR=${USER_HOME}/miniconda3
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then install miniconda.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ARG MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
ARG SHA256SUM="1ea2f885b4dbc3098662845560bc64271eb17085387a70c2ba3f29fff6f8d52f"
ARG CONDA_VERSION=py39_4.10.3
RUN --mount=type=cache,target=/root/.cache \
    wget "${MINICONDA_URL}" --output-document miniconda.sh --quiet --force-directories --directory-prefix ${CONDA_DIR} &amp;amp;&amp;amp; \
    echo "${SHA256SUM} miniconda.sh" &amp;gt; shasum &amp;amp;&amp;amp; \
    sha256sum --check --status shasum &amp;amp;&amp;amp; \
    /bin/bash miniconda.sh -b -p ${CONDA_DIR} &amp;amp;&amp;amp; \
    rm miniconda.sh shasum

ENV PATH=$CONDA_DIR/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Update conda.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RUN echo ". $CONDA_DIR/etc/profile.d/conda.sh" &amp;gt;&amp;gt; ~/.profile &amp;amp;&amp;amp; \
    conda init bash &amp;amp;&amp;amp; \
    conda update -n base -c defaults conda
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Install the packages. This is where I added the caching to try and reduce the re-downloading of files. I don't really know if this helps a lot, to be truthful, but it's nice to have new things.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RUN --mount=type=cache,target=/root/.cache \
    conda install pytorch torchvision torchaudio cudatoolkit --channel pytorch --yes
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>conda</category><category>cuda</category><category>docker</category><category>howto</category><guid>https://necromuralist.github.io/posts/cuda-conda-dockerugh/</guid><pubDate>Tue, 07 Dec 2021 02:04:16 GMT</pubDate></item></channel></rss>