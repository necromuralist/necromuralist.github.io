<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about Pandas)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_pandas.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Sat, 27 Oct 2018 18:20:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Categorical Plotting</title><link>https://necromuralist.github.io/posts/pandas/categorical-plotting/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/categorical-plotting/#org9eec117"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/categorical-plotting/#org470e098"&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/categorical-plotting/#org0e8fa53"&gt;The Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/categorical-plotting/#orgbb7dca5"&gt;Grouping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/categorical-plotting/#orgbc65a53"&gt;Concatenate our data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9eec117" class="outline-2"&gt;
&lt;h2 id="org9eec117"&gt;Imports&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9eec117"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5d13bca" class="outline-3"&gt;
&lt;h3 id="org5d13bca"&gt;From Python&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5d13bca"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from functools import partial
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org149a432" class="outline-3"&gt;
&lt;h3 id="org149a432"&gt;From pypi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org149a432"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from tabulate import tabulate
import matplotlib.pyplot as pyplot
import numpy
import pandas
import seaborn
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org470e098" class="outline-2"&gt;
&lt;h2 id="org470e098"&gt;Set Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org470e098"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga0ca139" class="outline-3"&gt;
&lt;h3 id="orga0ca139"&gt;The Plotting&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga0ca139"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%matplotlib inline
seaborn.set(style="whitegrid", color_codes=True)
FIGURE_SIZE = (14, 12)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfa405d5" class="outline-3"&gt;
&lt;h3 id="orgfa405d5"&gt;The Tables&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfa405d5"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;table = partial(tabulate, headers="keys",
		tablefmt="orgtbl")
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0e8fa53" class="outline-2"&gt;
&lt;h2 id="org0e8fa53"&gt;The Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0e8fa53"&gt;
&lt;p&gt;
This is just some fake stuff to test it out. We're going to simulate how participants in a survey scored two products on a scale from -3 to 3.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org73bcad4" class="outline-3"&gt;
&lt;h3 id="org73bcad4"&gt;Product One&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org73bcad4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;countries = ["china"] * 50 + ["india"] * 20 + ["japan"] * 2
options = [-3, -2, -1, 0, 1, 2, 3]
scores = pandas.Series(numpy.random.choice(options, size=len(countries)), dtype="category")
one_hot = pandas.get_dummies(scores, "Alpha", " ")
data = pandas.DataFrame.from_dict(dict(country=countries),
				  dtype="category")
data = pandas.concat([data, one_hot], axis="columns")
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(table(data.head(), showindex=False))
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;country&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha -3&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha -2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha -1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 0&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga986372" class="outline-3"&gt;
&lt;h3 id="orga986372"&gt;Product Two&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga986372"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;countries = ["china"] * 20 + ["india"] * 30 + ["japan"] * 25
options = [-3, -2, -1, 0, 1, 2, 3]
scores = pandas.Series(numpy.random.choice(options, size=len(countries)), dtype="category")
one_hot = pandas.get_dummies(scores, "Beta", " ")
data_2 = pandas.DataFrame.from_dict(dict(country=countries),
				    dtype="category")
data_2 = pandas.concat([data_2, one_hot], axis="columns")
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(table(data_2.head()))
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;country&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta -3&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta -2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta -1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 0&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbb7dca5" class="outline-2"&gt;
&lt;h2 id="orgbb7dca5"&gt;Grouping&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbb7dca5"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grouped = data.groupby("country").sum()
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(table(grouped))
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;country&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha -3&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha -2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha -1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 0&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Alpha 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-right"&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;india&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;japan&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grouped_2 = data_2.groupby("country").sum()
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(table(grouped_2))
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;country&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta -3&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta -2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta -1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 0&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 1&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 2&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Beta 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;china&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;india&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;japan&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbc65a53" class="outline-2"&gt;
&lt;h2 id="orgbc65a53"&gt;Concatenate our data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc65a53"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;figure, axe = pyplot.subplots(figsize=FIGURE_SIZE)
axe.set_title("Country vs Score")
axe.set_ylabel("Score")
with seaborn.color_palette("Reds"):
    axe = grouped_2.plot.bar(ax=axe)
with seaborn.color_palette("Blues"):
    axe = grouped.plot.bar(ax=axe)
labels = axe.set_xticklabels(grouped.country.unique())
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/pandas/categorical-plotting/barplot.png" alt="barplot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;figure, axe = pyplot.subplots(figsize=FIGURE_SIZE)
axe.set_title("Country vs Score")
axe.set_ylabel("Score")
with seaborn.color_palette("Reds"):
    axe = grouped_2.plot.bar(ax=axe, stacked=True)
with seaborn.color_palette("Blues"):
    axe = grouped.plot.bar(ax=axe, stacked=True)
labels = axe.set_xticklabels(grouped.country.unique())
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/posts/pandas/categorical-plotting/barplot_2.png" alt="barplot_2.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>categorical data</category><category>groupby</category><category>pandas</category><category>plotting</category><guid>https://necromuralist.github.io/posts/pandas/categorical-plotting/</guid><pubDate>Fri, 26 Oct 2018 22:01:04 GMT</pubDate></item><item><title>Date Mean Squared Error</title><link>https://necromuralist.github.io/posts/pandas/date-mean-squared-error/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/date-mean-squared-error/#orge2ee126"&gt;What is this?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/date-mean-squared-error/#org77ef1e9"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/date-mean-squared-error/#orgc5bb29f"&gt;The Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/date-mean-squared-error/#orgcd0ec08"&gt;The Mean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/date-mean-squared-error/#org2b6a167"&gt;Getting the Mean Back Into the Frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/pandas/date-mean-squared-error/#orgad253ab"&gt;Calculating the RMSE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge2ee126" class="outline-2"&gt;
&lt;h2 id="orge2ee126"&gt;What is this?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge2ee126"&gt;
&lt;p&gt;
This is a short sketch to figure out how to group a bunch of values by month and calculate the &lt;a href="https://en.wikipedia.org/wiki/Root-mean-square_deviation"&gt;Root-Mean-Squared-Error&lt;/a&gt; (RMSE) for the mean for the values in that month. This probably isn't the most efficient way to do this, but I'm trying to double check everything as I go and doing the typical &lt;a href="http://wiki.c2.com/?TrainWreck"&gt;Train Wreck&lt;/a&gt; like you see in most examples on Stack Overflow.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org77ef1e9" class="outline-2"&gt;
&lt;h2 id="org77ef1e9"&gt;Imports&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org77ef1e9"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb7f1cce" class="outline-3"&gt;
&lt;h3 id="orgb7f1cce"&gt;From PyPi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb7f1cce"&gt;
&lt;p&gt;
Just pandas.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import pandas
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc5bb29f" class="outline-2"&gt;
&lt;h2 id="orgc5bb29f"&gt;The Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc5bb29f"&gt;
&lt;p&gt;
I'm going to create some simple values so that it's easy(ish) to do the math by hand and double-check what comes out. I'll use the pandas &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Timestamp.html"&gt;Timestamp&lt;/a&gt; for the dates. I'm still not one-hundred percent sure why it's better than date-time, but hopefully it's optimized or something.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = {"date": [
    pandas.Timestamp("2018-09-01"),
    pandas.Timestamp("2018-09-05"),
    pandas.Timestamp("2018-09-05"),
    pandas.Timestamp("2018-10-01"),
    pandas.Timestamp("2018-10-05"),
		 ],
	"value": [1, 2, 3, 1, 2]}
frame = pandas.DataFrame.from_dict(data)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'm going to use &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.resample.html"&gt;pandas' resample method&lt;/a&gt; to group the data by months. the &lt;code&gt;resample&lt;/code&gt; method expets the data to have the dates as the index, so I'm going to create a new frame by &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html"&gt;setting the index&lt;/a&gt; to the date-column.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date_frame = frame.set_index("date")
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcd0ec08" class="outline-2"&gt;
&lt;h2 id="orgcd0ec08"&gt;The Mean&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcd0ec08"&gt;
&lt;p&gt;
The value I'm going to use to estimate the values for each month is the mean.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;monthly = date_frame.resample("M")
means = monthly.mean()
print(means)
assert all(means.value == [2.0, 1.5])
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2b6a167" class="outline-2"&gt;
&lt;h2 id="org2b6a167"&gt;Getting the Mean Back Into the Frame&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2b6a167"&gt;
&lt;p&gt;
Now that we have the monthly means, I want to re-add them to the original data-frame by giving them a common column named &lt;code&gt;year_month&lt;/code&gt; (using &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html"&gt;apply&lt;/a&gt;) so I can broadcast the means by merging the two data-frames.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frame["year_month"] = frame.date.apply(
    lambda date: pandas.Timestamp(year=date.year,
				  month=date.month, day=1))
print(frame.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean_frame = means.reset_index()
mean_frame["year_month"] = mean_frame.date.apply(
    lambda date: pandas.Timestamp(year=date.year,
				  month=date.month,
				  day=1))
print(mean_frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The &lt;code&gt;value&lt;/code&gt; column in the &lt;code&gt;mean_frame&lt;/code&gt; is actually the mean of the values for that month so I'll re-name it before I forget.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean_frame.rename(dict(value="mean"), axis="columns",
		  inplace=True)
print(mean_frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now I'll &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html"&gt;merge&lt;/a&gt; the two data frames on the &lt;code&gt;year_month&lt;/code&gt; column using the default &lt;a href="https://en.wikipedia.org/wiki/Join_(SQL)#Inner_join"&gt;inner-join&lt;/a&gt; (intersection) method.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;merged = frame.merge(mean_frame, on="year_month")
del(merged["date_y"])
merged.rename(dict(date_x="date"), axis="columns", inplace=True)
print(merged)
assert all(merged["mean"] == [2, 2, 2, 1.5, 1.5])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that I had to use the &lt;code&gt;merged["mean"]&lt;/code&gt; form because the data-frame has a &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mean.html"&gt;mean&lt;/a&gt; method which the dot-notation (&lt;code&gt;merged.mean&lt;/code&gt;) would call instead of grabbing the column.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad253ab" class="outline-2"&gt;
&lt;h2 id="orgad253ab"&gt;Calculating the RMSE&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgad253ab"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org58ffbf5" class="outline-3"&gt;
&lt;h3 id="org58ffbf5"&gt;Error&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org58ffbf5"&gt;
&lt;p&gt;
Since I'm estimating the values for each month using the mean the &lt;i&gt;error&lt;/i&gt; is the difference between the &lt;i&gt;mean&lt;/i&gt; and each of the &lt;i&gt;values&lt;/i&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;merged["error"] = merged["value"] - merged["mean"]
print(merged)
assert all(merged.error==[-1, 0, 1, -.5, .5])
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7fc372e" class="outline-3"&gt;
&lt;h3 id="org7fc372e"&gt;Error Squared&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7fc372e"&gt;
&lt;p&gt;
Now I'll square the error to get rid of the negative error values (which would cancel each other out when we take the mean errors) and to make the effect of the errors non-linear (the errors are exagerrated).
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;merged["error_squared"] = merged.error.pow(2)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(merged)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org978a974" class="outline-3"&gt;
&lt;h3 id="org978a974"&gt;Mean Squared Error&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org978a974"&gt;
&lt;p&gt;
So now we take the mean of our squared errors to get an initial estimate of how much we are off each month.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean_of = merged.groupby("year_month").mean()
print(mean_of.error_squared)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc79f4e9" class="outline-3"&gt;
&lt;h3 id="orgc79f4e9"&gt;RMSE&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc79f4e9"&gt;
&lt;p&gt;
Since the squared error would have units squared, I'll take the root of it to get a more interpretable estimate of the error.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(mean_of.error_squared.pow(.5))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>dates</category><category>errors</category><category>pandas</category><guid>https://necromuralist.github.io/posts/pandas/date-mean-squared-error/</guid><pubDate>Mon, 22 Oct 2018 23:46:21 GMT</pubDate></item></channel></rss>