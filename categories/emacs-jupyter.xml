<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about emacs-jupyter)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/emacs-jupyter.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Tue, 01 Nov 2022 02:22:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>emacs-jupyter</title><link>https://necromuralist.github.io/posts/emacs-jupyter/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgab20f28"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org26ead3b"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgbdf85ab"&gt;Finding the Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#org97e2284"&gt;Fixing the Problem&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgf75a8fb"&gt;First Clone the Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgc20c544"&gt;Then Install the Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgb6697cf"&gt;Then Build It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orgbfe638c"&gt;Fix the Other Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orge00646b"&gt;An Update That Broke It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/emacs-jupyter/#orge7ec757"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgab20f28" class="outline-2"&gt;
&lt;h2 id="orgab20f28"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgab20f28"&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; has become one of the most important tools in my workflow (along with &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;, and the &lt;a href="https://plugins.getnikola.com/v8/orgmode/"&gt;org-mode plugin&lt;/a&gt;), but earlier this week I stumbled upon &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; and I thought maybe it'd be worth it to at least take a look. If the &lt;code&gt;readme&lt;/code&gt; file is to be believed, it does everything &lt;code&gt;ob-ipython&lt;/code&gt; does and more, so maybe my world would change once again. But then I ran into a little problem - trying to install it from &lt;a href="https://melpa.org/#/"&gt;MELPA&lt;/a&gt; caused emacs to crash… with no messages, nothing. So is this thing ready for the world to use yet?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org26ead3b" class="outline-2"&gt;
&lt;h2 id="org26ead3b"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org26ead3b"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbdf85ab" class="outline-3"&gt;
&lt;h3 id="orgbdf85ab"&gt;Finding the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbdf85ab"&gt;
&lt;p&gt;
I tried different things based on the errors in the emacs-jupyter's &lt;a href="https://github.com/dzop/emacs-jupyter/issues"&gt;"Issues"&lt;/a&gt; but it turned out that &lt;a href="https://github.com/dzop/emacs-zmq/issues/14"&gt;this emacs-zmq bug&lt;/a&gt; had the answer - the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs snapshot&lt;/a&gt; for Ubuntu wasn't built in a way that works with emacs-jupyter. The bug-report mentions an out of date gcc version, but I didn't confirm that.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org97e2284" class="outline-3"&gt;
&lt;h3 id="org97e2284"&gt;Fixing the Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org97e2284"&gt;
&lt;p&gt;
So, knowing that the version of emacs I was using was the problem I decided to build it myself. In the earlier days of Ubuntu this was something I did all the time, but it seems like it's been forever since I had to do this so I was a little worried that it might be a huge mess of Makefile debugging, but I found &lt;a href="https://www.emacswiki.org/emacs/EmacsSnapshotAndDebian"&gt;this page on the emacs wiki&lt;/a&gt; which made it pretty easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf75a8fb" class="outline-4"&gt;
&lt;h4 id="orgf75a8fb"&gt;First Clone the Repository&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf75a8fb"&gt;
&lt;pre class="example"&gt;
git clone --depth 1 git://git.sv.gnu.org/emacs.git
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; The &lt;code&gt;--depth 1&lt;/code&gt; option pulls only the most recent commit. This helps save on time, as the repository is huge.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc20c544" class="outline-4"&gt;
&lt;h4 id="orgc20c544"&gt;Then Install the Dependencies&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc20c544"&gt;
&lt;pre class="example"&gt;
sudo apt-fast install autoconf automake libtool texinfo build-essential xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev libgif-dev libtiff-dev libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev libxml2-dev
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb6697cf" class="outline-4"&gt;
&lt;h4 id="orgb6697cf"&gt;Then Build It&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb6697cf"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; This is how I first did it and it doesn't work the way I wanted it to so see the next section for the one that did work.
&lt;/p&gt;

&lt;p&gt;
First do the autogen.
&lt;/p&gt;
&lt;pre class="example"&gt;
cd emacs
./autogen.sh
&lt;/pre&gt;

&lt;p&gt;
Then I did the configure. I wanted to install it in my user directory so I passed in a prefix for the path I wanted. This takes about a half a munite.
&lt;/p&gt;

&lt;pre class="example"&gt;
./configure --prefix=/home/athena/bin/emacs-jupyter/
&lt;/pre&gt;

&lt;p&gt;
And now to actually build it. The &lt;code&gt;make bootstrap&lt;/code&gt; took around 15 minutes for me.
&lt;/p&gt;

&lt;pre class="example"&gt;
make bootstrap
make install
&lt;/pre&gt;

&lt;p&gt;
And finally link to it in &lt;code&gt;/usr/local/bin&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class="example"&gt;
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
That bit about installing it in my home directory and linking it isn't necessary, but just a habit of mine, since I tend to forget how I installed things and having it set up this way makes me remember.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbfe638c" class="outline-3"&gt;
&lt;h3 id="orgbfe638c"&gt;Fix the Other Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbfe638c"&gt;
&lt;p&gt;
It turned out that the build went okay, and I could even install emacs-jupyter (yay), but when I tried to execute &lt;code&gt;M-x jupyter-run-repl&lt;/code&gt; I got an error message saying that modules weren't supported (what?). So then I found &lt;a href="http://diobla.info/blog-archive/modules-tut.html"&gt;this blog post&lt;/a&gt; that said you have to pass in the &lt;code&gt;--with-modules&lt;/code&gt; argument when you run &lt;code&gt;configure&lt;/code&gt;… So now the process became this:
&lt;/p&gt;

&lt;pre class="example"&gt;
cd emacs
./autogen.sh
./configure --prefix=/home/athena/bin/emacs-jupyter/ --with-modules
make bootstrap
make install
sudo ln -s /home/athena/bin/emacs-jupyter/bin/emacs /usr/local/bin/emacs-jupyter
&lt;/pre&gt;

&lt;p&gt;
And what do you know, it worked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge00646b" class="outline-3"&gt;
&lt;h3 id="orge00646b"&gt;An Update That Broke It&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge00646b"&gt;
&lt;p&gt;
At some point after I first wrote this I switched to using the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs-snapshot&lt;/a&gt; package, which worked for a while, but when I updated it on March 9, 2021, it caused emacs-jupyter to fail with a ZMQ error:
&lt;/p&gt;

&lt;pre class="example"&gt;
error in process filter: Error in ZMQ subprocess: error, ("Lisp nesting exceeds ‘max-lisp-eval-depth’")
&lt;/pre&gt;

&lt;p&gt;
I tried re-installing &lt;code&gt;emacs-jupyter&lt;/code&gt; and &lt;code&gt;emacs-zmq&lt;/code&gt; but that didn't help so I decided to find a version of emacs that was older, but they only had the most recent emacs-snapshot available for Ubuntu 20.10 so I decide to go back to building emacs myself.
&lt;/p&gt;

&lt;p&gt;
Since it was an update that caused it to break (which happened sometime between August of last year when the previous snapshot came out and March 9, when I updated) pulling just the most recent version wouldn't work for me, given that I needed to find code that predated the thing that broke it, so I pulled the whole history and the found the tag for the most recent release (&lt;code&gt;emacs-27.1-rc2&lt;/code&gt;) from last August and checked it out.
&lt;/p&gt;

&lt;pre class="example"&gt;
git checkout emacs-27.1-rc2
&lt;/pre&gt;

&lt;p&gt;
According to &lt;a href="https://stackoverflow.com/questions/20280726/how-to-git-clone-a-specific-tag"&gt;Stack Overflow&lt;/a&gt; you could also just checkout that one tag, but I didn't think to look until after I already cloned it. Also, I don't know how I would have gotten the tag without cloning it first. Must be out there somewhere.
&lt;/p&gt;

&lt;p&gt;
And then built it like I did in the previous section.
&lt;/p&gt;

&lt;p&gt;
Also, since I pulled an older version I had to re-compile the packages as mentioned on &lt;a href="https://stackoverflow.com/questions/24725778/how-to-rebuild-elpa-packages-after-upgrade-of-emacs"&gt;Stack Overflow&lt;/a&gt;. First &lt;code&gt;M-:&lt;/code&gt; then in the mini-buffer
&lt;/p&gt;

&lt;pre class="example"&gt;
(byte-recompile-directory package-user-dir nil 'force)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge7ec757" class="outline-2"&gt;
&lt;h2 id="orge7ec757"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge7ec757"&gt;
&lt;p&gt;
&lt;code&gt;emacs-jupyter&lt;/code&gt; looks like an improvement over &lt;code&gt;ob-ipython&lt;/code&gt; in that it adds a lot of features (and claims to be faster), but getting it to work was way harder than I'm used to. I don't think it was "difficult" in a real sense, given what it used to be like to make and install things on Ubuntu, but I think I've gotten used to things just working. Anyway, now I can see if emacs-jupyter lives up to its own hype.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;/b&gt; Since I first wrote this I've come to rely on &lt;code&gt;emacs-jupyter&lt;/code&gt; a lot, I don't take advantage of a lot of its features, but for executing python code in org-babel, it's everything that I need (so far).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>emacs-jupyter</category><guid>https://necromuralist.github.io/posts/emacs-jupyter/</guid><pubDate>Sat, 10 Aug 2019 22:13:27 GMT</pubDate></item><item><title>cuDF With emacs-jupyter</title><link>https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orge161bcb"&gt;Beginning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org52347aa"&gt;Problems Before I Even Started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgdef19a5"&gt;the &lt;b&gt;&lt;b&gt;RAPIDS&lt;/b&gt;&lt;/b&gt; instruction for starting the docker container is out of date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orge44fb03"&gt;The emacs-snapshot isn't compatible with emacs-jupyter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org8f87df5"&gt;Imports&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org2122983"&gt;PyPi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org58fd124"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org47918cf"&gt;Connecting To the Docker Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org9e8478c"&gt;Create Series&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orgf5b4e01"&gt;CUDF Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org5631d81"&gt;dask CUDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#orga6fddaf"&gt;Data Frames&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org4d2a9da"&gt;From a Pandas DataFrame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org3c00685"&gt;Selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org98ba367"&gt;Applyng functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org77d80b6"&gt;String Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/#org0472943"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge161bcb" class="outline-2"&gt;
&lt;h2 id="orge161bcb"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge161bcb"&gt;
&lt;p&gt;
This is a first attempt to use &lt;a href="https://rapids.ai/"&gt;RAPIDS&lt;/a&gt; using their docker container and &lt;a href="https://github.com/dzop/emacs-jupyter#building-the-widget-support-experimental"&gt;emacs-jupyter&lt;/a&gt;. So there's multiple places where things can go wrong and I don't know why.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org52347aa" class="outline-3"&gt;
&lt;h3 id="org52347aa"&gt;Problems Before I Even Started&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org52347aa"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdef19a5" class="outline-4"&gt;
&lt;h4 id="orgdef19a5"&gt;the &lt;b&gt;&lt;b&gt;RAPIDS&lt;/b&gt;&lt;/b&gt; instruction for starting the docker container is out of date&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgdef19a5"&gt;
&lt;p&gt;
The instructions on the &lt;a href="https://rapids.ai/start.html"&gt;getting started page&lt;/a&gt; say to start the docker container using this:
&lt;/p&gt;
&lt;pre class="example"&gt;
docker run --runtime=nvidia --rm -it -p 8888:8888 -p 8787:8787 -p 8786:8786 \
    rapidsai/rapidsai:0.8-cuda10.0-runtime-ubuntu18.04-gcc7-py3.7
&lt;/pre&gt;

&lt;p&gt;
But the &lt;code&gt;--runtime=nvidia&lt;/code&gt; flag is for the now-deprecated &lt;code&gt;nvidia-docker2&lt;/code&gt; package (which isn't compatible with Ubuntu Disco Dingo anyway) and it will cause it to fail with an &lt;code&gt;unknown runtime&lt;/code&gt; error if you don't have that older package installed (which I don't). Removing the flag (and having the &lt;a href="https://github.com/NVIDIA/nvidia-docker"&gt;NVIDIA Container Toolkit&lt;/a&gt; installed) fixes the error.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge44fb03" class="outline-4"&gt;
&lt;h4 id="orge44fb03"&gt;The emacs-snapshot isn't compatible with emacs-jupyter&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orge44fb03"&gt;
&lt;p&gt;
&lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; has become such a center-piece for how I work I can't even remember how I did things before I discovered it, but now there's &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;Emacs Jupyter&lt;/a&gt; which claims to have even more features, so I thought I'd try it out, but when I tried to install it emacs would crash (during the installation). According to  &lt;a href="https://github.com/dzop/emacs-zmq/issues/14"&gt;this bug report&lt;/a&gt; the &lt;a href="https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa"&gt;emacs snapshot&lt;/a&gt; for Ubuntu is built with an out-of-date version of gcc. I don't know if that's true, but I re-built emacs with &lt;a href="https://www.emacswiki.org/emacs/EmacsSnapshotAndDebian"&gt;the instructions on the emacs wiki&lt;/a&gt; and it at least installed emacs-jupyter without crashing. Here's where I find out if it works. Of course, I now have two versions of emacs. One that gets updated automatically and one that works with emacs-jupyter. I'll have to figure out what to do about that, assuming emacs-jupyter turns out to be worth keeping.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8f87df5" class="outline-3"&gt;
&lt;h3 id="org8f87df5"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8f87df5"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2122983" class="outline-4"&gt;
&lt;h4 id="org2122983"&gt;PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2122983"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import cudf
import dask_cudf
import pandas
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org58fd124" class="outline-2"&gt;
&lt;h2 id="org58fd124"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org58fd124"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org47918cf" class="outline-3"&gt;
&lt;h3 id="org47918cf"&gt;Connecting To the Docker Container&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org47918cf"&gt;
&lt;p&gt;
According to the emacs-snapshot documentation you can connect via SSH (but the Rapids docker container doesn't have it installed by default) or you can connect to a notebook server. I originally was going to try the SSH route, since I already do that with ob-ipython, but the notebook-server might be more suited to this case. Let's see.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("test")
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
test
&lt;/pre&gt;


&lt;p&gt;
So, the notebook doesn't seem to work as-is, but the SSH connection does, which is nice, but it's not different from what ob-ipython gave me (well it kind of is in that I didn't copy the file over).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9e8478c" class="outline-3"&gt;
&lt;h3 id="org9e8478c"&gt;Create Series&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9e8478c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf5b4e01" class="outline-4"&gt;
&lt;h4 id="orgf5b4e01"&gt;CUDF Series&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf5b4e01"&gt;
&lt;p&gt;
This runs on the GPU.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = cudf.Series([1, 2, 3, None, 4])
print(s)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
0    1
1    2
2    3
3     
4    4
dtype: int64
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5631d81" class="outline-4"&gt;
&lt;h4 id="org5631d81"&gt;dask CUDF&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5631d81"&gt;
&lt;p&gt;
This also runs on the GPU, but if you have more than one GPU it will use more than one.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ds = dask_cudf.from_cudf(s, npartitions=2)
print(ds.compute())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
0    1
1    2
2    3
3     
4    4
dtype: int64
&lt;/pre&gt;


&lt;p&gt;
My machine only has one GPU, so this didn't gain anything, but I do have more than one machine with a GPU so this might help with distributed computing, if I get around to it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga6fddaf" class="outline-3"&gt;
&lt;h3 id="orga6fddaf"&gt;Data Frames&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga6fddaf"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frame = cudf.DataFrame([("a", list(range(10))),
			("b", list(range(10)))])
frame["a"] = frame.a * 5
print(frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
    a  b
0   0  0
1   5  1
2  10  2
3  15  3
4  20  4
5  25  5
6  30  6
7  35  7
8  40  8
9  45  9
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4d2a9da" class="outline-4"&gt;
&lt;h4 id="org4d2a9da"&gt;From a Pandas DataFrame&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4d2a9da"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frame = pandas.DataFrame({"a": list(range(4)), "b": list(range(4, 8))})
frame = cudf.DataFrame.from_pandas(frame)
print(frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   a  b
0  0  4
1  1  5
2  2  6
3  3  7
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3c00685" class="outline-3"&gt;
&lt;h3 id="org3c00685"&gt;Selection&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3c00685"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(frame[frame.a &amp;gt; 1])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   a  b
2  2  6
3  3  7
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org98ba367" class="outline-3"&gt;
&lt;h3 id="org98ba367"&gt;Applyng functions&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org98ba367"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frame["a"] = frame.a.applymap(lambda row: row + 5)
print(frame)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   a  b
0  5  4
1  6  5
2  7  6
3  8  7
&lt;/pre&gt;


&lt;p&gt;
This is basically the pandas.DataFrame.apply method, but they renamed it for some reason.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org77d80b6" class="outline-3"&gt;
&lt;h3 id="org77d80b6"&gt;String Methods&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org77d80b6"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;series = cudf.Series(["Alpha", "Beta", "GAMMA", "dELTA"])
print(series.str.lower())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
0    alpha
1     beta
2    gamma
3    delta
dtype: object
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0472943" class="outline-2"&gt;
&lt;h2 id="org0472943"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0472943"&gt;
&lt;p&gt;
After a certain point, this was kind of a boring exercise, mostly because &lt;code&gt;cuDF&lt;/code&gt; runs a subset of pandas but on the GPU, so if you know pandas, you know some of &lt;code&gt;cuDF&lt;/code&gt;, but just getting it working (with emacs-jupyter) was a little bit of work, so maybe it's useful to have recorded that here.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cudf</category><category>emacs-jupyter</category><category>walk-through</category><guid>https://necromuralist.github.io/posts/rapids/cudf-with-emacs-jupyter/</guid><pubDate>Sat, 10 Aug 2019 21:12:42 GMT</pubDate></item></channel></rss>