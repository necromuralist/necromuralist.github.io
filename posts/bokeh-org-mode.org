#+BEGIN_COMMENT
.. title: bokeh org-mode
.. slug: bokeh-org-mode
.. date: 2018-04-25 21:59:50 UTC-07:00
.. tags: bokeh org howto
.. category: visualization
.. link: 
.. description: An experiment in getting bokeh working with org-mode.
.. type: text
#+END_COMMENT

* Introduction

  I'm trying to re-work the work I did for the Coursera *Data Science With Python* specialization by changing the data-sets and building them as blog posts in org. Most of the time I use [[https://matplotlib.org][matplotlib]] for plotting, but since this is going to be a blog-first approach I decided to go with [[https://bokeh.pydata.org/en/latest/][bokeh]]. I had [[https://necromuralist.github.io/data_science/posts/bokeh-test/][previously written]] about how to gut *bokeh* into *Nikola* using restructured text, but as an intermediate step I want to do it in org-mode, which is what this is about. The magic mix for this seems to be:

 - [[https://getnikola.com][Nikola]] to build the HTML posts
 - [[http://orgmode.org][org-mode]], an emacs mode to format the posts
 - [[https://plugins.getnikola.com/v7/orgmode/][the orgmode-plugin]] for nikola
 - [[https://github.com/gregsexton/ob-ipython][ob-ipython]] to get [[https://jupyter.org][jupyter/ipython]] in the org-mode posts
 - [[https://bokeh.pydata.org/en/latest/docs/user_guide/quickstart.html#userguide-quickstart][bokeh]] to make the plots

I didn't figure this out myself, I got it from [[http://cherian.net/posts/bokeh-org-mode.html][this post]] on [[http://cherian.net][cherian.net]] - and yes, that post does reference my earlier post, and yes, the author appears to be a fellow Oregonian, but this isn't a case of blog-rolling - his was the first post that google returned when I enterered =org-mode bokeh= into the search bar (well, the first relevant one that [[https://duckduckgo.com][duck duck go]] gave back, if I remember correctly).

* Imports
  These are the dependencies. It's really all =bokeh=, =numpy= is just there to generate the data-values.

#+BEGIN_SRC python :session bokeh :results none
# from pypi
from bokeh.models import HoverTool
from bokeh.plotting import figure, ColumnDataSource
from bokeh.embed import autoload_static, file_html
import bokeh.resources
import numpy
#+END_SRC

I probably should save bokeh to this repository, to keep the post from breaking in the future, but I'm lazy so I'm just going to import it from a CDN.

#+BEGIN_SRC ipython :session bokeh :results none
bokeh = bokeh.resources.CDN
#+END_SRC

* The Data
  To get a simple example going I'm just going to use some random outputs generated by numpy.

#+BEGIN_SRC python :session bokeh :results none
X = numpy.arange(10)
Y = numpy.random.randint(0, 10, 10)
#+END_SRC

In order to create a data-structure that bokeh can use (similar to a [[https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html][pandas dataframe]]) you need to use a [[https://bokeh.pydata.org/en/0.10.0/docs/reference/models/sources.html][ColumnDataSource]].
#+BEGIN_SRC python :session bokeh :results none
source = ColumnDataSource(data=dict(
    x=X,
    y=Y,
    desc=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"],
))
#+END_SRC

Now, to get some tool-tips to pop up when you hover over the plot, I'll create a =HoverTool=.

#+BEGIN_SRC python :session bokeh :results none
hover = HoverTool(tooltips=[
    ('index', '$index'),
    ('(x, y)', '($x, $y)'),
    ('desc', '@desc'),
])
#+END_SRC

In case it isn't obvious, the strings on the left-hand-side are labels that will appear in the pop-ups and the strings on the right-hand-side of the tuples refer to variables in the =ColumnDataSource= that I set previously (they will be replaced with actual value in the plot). The =index= value is the index in the array where the data point sits (so for the first point it will be 0). The =(x, y)= values are the coordinate locations of your pointer when you hover over the data points, and the =desc= will be replaced by the label I set in the =ColumnDataSource= for a particular data-point.
* The Plot
Now I'll create the actual plot (=figure=).

#+BEGIN_SRC python :session bokeh :results none
fig = figure(title="Random Example", x_axis_label="x", y_axis_label="y",
             tools=[hover])
fig.line('x', 'y', source=source)
fig.circle('x', 'y', size=10, source=source)
#+END_SRC

* Saving the Files
Finally I'll save the javascript and HTML files needed and (this is the magic provided by [[https://bokeh.pydata.org/en/0.10.0/docs/reference/models/sources.html][the post I referenced]]) then output the blob needed to embed the plot into this post. Note that because of the way nikola structures things I have to create a folder named =files/posts/bokeh-org-mode= and save the files there. Then in the output that's embedded in the source for this post I need to get rid of the folder path and just use the javascript file name.

First I'll create a variable to hold the path to the folder to save the files in. All files for nikola posts go into sub-folders of =files/posts/= and since the source file for this post is called =bokeh-org-mode.org=, the files to include in it go into the folder =files/posts/bokeh-org-mode= (=files/posts/= plus the slug for the post).

#+BEGIN_SRC python :session bokeh :results none
FOLDER_PATH = "../files/posts/bokeh-org-mode/"
#+END_SRC
** The Javascript
Now, I'll create the javascript source for the plot.

#+BEGIN_SRC python :session bokeh :results none
javascript, source = autoload_static(fig, bokeh, FOLDER_PATH + "test.js")

with open(path, "w") as writer:
    writer.write(javascript)
#+END_SRC

The =javascript= variable holds the actual javascript source code (which then gets saved) while the =source= variable holds the string with the HTML to embed the javascript into this post (which I show at the end of this post).

** Embedding the Plot
Finally, we need to print out the string that is stored in the =source= variable which then tells org-mode to embed the files into this post.

#+BEGIN_SRC python :session bokeh :results output raw :exports both
print('''#+BEGIN_EXPORT html
{}
#+END_EXPORT'''.format(source))
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT html

<script
    src="test.js"
    id="92464b9d-bad4-4212-b079-cec6605e3cde"
    data-bokeh-model-id="2cde034d-b5f6-4907-9a46-1c1c760c6823"
    data-bokeh-doc-id="65f673a7-446f-4cb0-82f7-b56f9f8ae354"
></script>
#+END_EXPORT

And there you have it. I don't have a lot to say about it, other than that if you hover over the data with your cursor and then look up above at the =ColumnDataSource= above, you'll see that the variables match the inputs

* Update the HTML blob

This print statement in the previous block outputs something that looks like this:

#+BEGIN_SRC html
<script
    src="../files/posts/bokeh-org-mode/test.js"
    id="92464b9d-bad4-4212-b079-cec6605e3cde"
    data-bokeh-model-id="2cde034d-b5f6-4907-9a46-1c1c760c6823"
    data-bokeh-doc-id="65f673a7-446f-4cb0-82f7-b56f9f8ae354"
></script>
#+END_SRC

But the =src= path is relative to the folder named =posts= where the source file for this post sits . When =nikola= converts the post to HTML it looks in the  =files/posts/bokeh-org-mode/= floder for the =test.html= file, so we don't want to put the full path to the javascript file in the HTML blob, just the file name without the folder path, so I edited the output to make it look something like this.

#+BEGIN_EXAMPLE
<script
    src="test.js"
    id="92464b9d-bad4-4212-b079-cec6605e3cde"
    data-bokeh-model-id="2cde034d-b5f6-4907-9a46-1c1c760c6823"
    data-bokeh-doc-id="65f673a7-446f-4cb0-82f7-b56f9f8ae354"
></script>
#+END_EXAMPLE

I'm saying 'something like this' instead of 'this' because everytime I re-run the code the UUID values change.
