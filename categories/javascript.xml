<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about javascript)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 04 May 2023 00:33:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Javascript in Org-Babel</title><link>https://necromuralist.github.io/posts/javascript-in-org-babel/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org7851296"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org7999f34"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#orged828c1"&gt;Prerequites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#orgb4ecbc2"&gt;init.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org89bfaf6"&gt;Try It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/javascript-in-org-babel/#org813a088"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7851296" class="outline-2"&gt;
&lt;h2 id="org7851296"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7851296"&gt;
&lt;p&gt;
This is a test of running javascript in org-babel blocks. For some reason I couldn't find any documentation about setting it up so this is also a place for me to collect what to do.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I actually did use &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.html"&gt;this org-babel page&lt;/a&gt; for some of it, but it wasn't enough for me to really figure out what was going on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7999f34" class="outline-2"&gt;
&lt;h2 id="org7999f34"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7999f34"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orged828c1" class="outline-3"&gt;
&lt;h3 id="orged828c1"&gt;Prerequites&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orged828c1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4c46b08" class="outline-4"&gt;
&lt;h4 id="org4c46b08"&gt;Node&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4c46b08"&gt;
&lt;p&gt;
Since javascript is an interpreted language you need an interpreter to run code blocks. Org-babel assumes you're using &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt; so you need to install it and make sure it's on the &lt;code&gt;PATH&lt;/code&gt;. They do support debian-based systems (including Ubuntu, which I use) but they don't use the traditional PPA system. Instead they have different installs for the different versions - but they do have a Long-Term Support (LTS) version which I'm hoping updates so that's what I installed.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
As of this writing it install version 12.19.0, versus the Ubuntu 20.04 version of 10.19.0.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb4ecbc2" class="outline-3"&gt;
&lt;h3 id="orgb4ecbc2"&gt;init.el&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb4ecbc2"&gt;
&lt;p&gt;
Besides installing node you have to make sure that you add &lt;code&gt;js&lt;/code&gt; to your org-babel set up.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
If you already have other languages added this just goes in the same block.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org89bfaf6" class="outline-3"&gt;
&lt;h3 id="org89bfaf6"&gt;Try It&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org89bfaf6"&gt;
&lt;p&gt;
Now that it's set up you can execute javascript in org-babel code blocks, designating them as &lt;code&gt;js&lt;/code&gt; blocks (e.g. &lt;code&gt;#+begin_src js :results output :exports both&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Here's a simple output block.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
test
&lt;/pre&gt;


Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;pre class="example"&gt;
apple
applebanana
&lt;/pre&gt;


&lt;p&gt;
One thing to note is that this doesn't seem create sessions that persist across blocks. Even though I defined &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in the previous block, this next block raises an error because it doesn't think I've defined &lt;code&gt;y&lt;/code&gt;.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
If you try and put a session argument in the org-babel header you'll get a message saying "Session evaluation with node.js not supported". According to the &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.org.html"&gt;org-babel-js documentation&lt;/a&gt; you can put in special headers to run the code in an alternate REPL, but I tried it and the output ends up in a separate buffer rather than showing up in the org-document, which seems to kind of lessen the usefulness of it. Also the js-comint version dumps extra text into the REPL as well.
&lt;/p&gt;
&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org813a088" class="outline-2"&gt;
&lt;h2 id="org813a088"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org813a088"&gt;
&lt;p&gt;
Okay, so this was a very basic hello world for javascript in emacs. The lack of sessions is kind of disappointing, but I don't know how useful this is going to be, anyway, since javascript is so tied to the browser, but there it is.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>javascript</category><category>org-mode</category><guid>https://necromuralist.github.io/posts/javascript-in-org-babel/</guid><pubDate>Sat, 17 Oct 2020 03:48:55 GMT</pubDate></item><item><title>A Random Walk(er)</title><link>https://necromuralist.github.io/posts/a-random-walker/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#orge0cf169"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#org60255d4"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#orgaad4c71"&gt;A Div to Locate the Sketch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#orgb642ac1"&gt;The Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/a-random-walker/#org119e1eb"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge0cf169" class="outline-2"&gt;
&lt;h2 id="orge0cf169"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge0cf169"&gt;
&lt;p&gt;
This is another post to see if I understand how to get &lt;a href="https://p5js.org/"&gt;p5.js&lt;/a&gt; working in nikola. It's been a while since I tried and I just want to see if I remember how. This uses the random walk example from Daniel Schiffman's book &lt;i&gt;the Nature of Code&lt;/i&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org60255d4" class="outline-2"&gt;
&lt;h2 id="org60255d4"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org60255d4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaad4c71" class="outline-3"&gt;
&lt;h3 id="orgaad4c71"&gt;A Div to Locate the Sketch&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaad4c71"&gt;
&lt;p&gt;
The id of this div is set in the &lt;code&gt;p5.js&lt;/code&gt; &lt;code&gt;setup&lt;/code&gt; function as the parent of the sketch.
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;script language="javascript" type="text/javascript" src="https://necromuralist.github.io/posts/a-random-walker/walker.js"&gt;&lt;/script&gt;
&lt;div id="random-walk-container"&gt;
&lt;/div&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb642ac1" class="outline-3"&gt;
&lt;h3 id="orgb642ac1"&gt;The Javascript&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb642ac1"&gt;
Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org119e1eb" class="outline-2"&gt;
&lt;h2 id="org119e1eb"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org119e1eb"&gt;
&lt;p&gt;
As always, this was way harder than it should have been.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>javascript</category><category>p5.js</category><category>processing</category><guid>https://necromuralist.github.io/posts/a-random-walker/</guid><pubDate>Sun, 21 Jul 2019 19:29:09 GMT</pubDate></item><item><title>Headless Firefox with Karma</title><link>https://necromuralist.github.io/posts/headless-firefox-with-karma/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org087b16e" class="outline-2"&gt;
&lt;h2 id="org087b16e"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org087b16e"&gt;
&lt;p&gt;
I recently started revisiting some &lt;a href="https://vuejs.org/"&gt;vue.js&lt;/a&gt; code that I was working on at work and when I ran the unit-tests all of them failed with pretty much the same error.
&lt;/p&gt;

&lt;pre class="example" id="orgf270a12"&gt;
actual.should.equal is not a function. (In 'actual.should.equal(expected)', 'actual.should.equal' is an instance of ProxyObject)
&lt;/pre&gt;

&lt;p&gt;
I'm using the &lt;a href="http://www.chaijs.com/guide/styles/#should"&gt;chai BDD 'should'&lt;/a&gt; style of testing, so this &lt;i&gt;should&lt;/i&gt; have worked (because it was working before). To debug it I ran it with FireFox and when I did, all the tests mysteriously started working. It turns out I was using &lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;, which &lt;a href="https://github.com/ariya/phantomjs/issues/15344"&gt;has been abandoned&lt;/a&gt;, and somewhere along the line something in chai stopped working with it, so I decided to set up Firefox headless as my browser instead. This is how I did it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org19a9bed" class="outline-2"&gt;
&lt;h2 id="org19a9bed"&gt;Set Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org19a9bed"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgae3e44d" class="outline-3"&gt;
&lt;h3 id="orgae3e44d"&gt;Install the plugin&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgae3e44d"&gt;
&lt;p&gt;
I already had this installed for debugging, but I'll mention it anyway, for completeness.
&lt;/p&gt;

&lt;pre class="example" id="org3785afd"&gt;
npm install karma-firefox-launcher --save-dev
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcbfa827" class="outline-3"&gt;
&lt;h3 id="orgcbfa827"&gt;Set it up in Karma&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcbfa827"&gt;
&lt;p&gt;
I'm running the tests using &lt;a href="https://karma-runner.github.io/2.0/index.html"&gt;karma&lt;/a&gt; and I had hoped that I would just have to change the name of the browser in the configuration, but it turns out to need a little setup in the &lt;code&gt;karma.conf.js&lt;/code&gt; file. First get rid of the &lt;code&gt;PhantomJS&lt;/code&gt; reference. Delete this:
&lt;/p&gt;

Traceback (most recent call last):
  File "/home/hades/.local/bin/pygmentize", line 5, in &lt;module&gt;
    from pygments.cmdline import main
ModuleNotFoundError: No module named 'pygments'

&lt;p&gt;
and replace it with this.
&lt;/p&gt;

&lt;pre class="example" id="org18f2c4d"&gt;
browsers: ['FirefoxHeadless'],
&lt;/pre&gt;

&lt;p&gt;
The &lt;code&gt;FirefoxHeadless&lt;/code&gt; browser isn't actually defined, so you have to add it (I put it right after the &lt;code&gt;browsers&lt;/code&gt; declaration).
&lt;/p&gt;

&lt;pre class="example" id="org2cb8e95"&gt;
customLaunchers: {
      'FirefoxHeadless': {
        base: 'Firefox',
        flags: [
          '-headless',
        ],
      }
    },
&lt;/pre&gt;

&lt;p&gt;
This tells karma to run &lt;code&gt;firefox&lt;/code&gt; and pass in the &lt;code&gt;-headless&lt;/code&gt; flag, as shown in the Mozilla documentation about &lt;a href="https://developer.mozilla.org/en-US/Firefox/Headless_mode#Using_headless_mode"&gt;firefox's headless mode&lt;/a&gt;. I found out how to do it from &lt;a href="https://stackoverflow.com/questions/46779498/running-karma-tests-in-headless-firefox-browser-not-working-on-jenkins"&gt;a question on Stack Overflow&lt;/a&gt;.
&lt;/p&gt;
&lt;/module&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge2860c3" class="outline-2"&gt;
&lt;h2 id="orge2860c3"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge2860c3"&gt;
&lt;p&gt;
&lt;code&gt;PhantomJS&lt;/code&gt; breaks the Chai's BDD style of testing, but since both Firefox and &lt;a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md"&gt;Chrome&lt;/a&gt; have headless modes, using them instead makes it work without actually needing to have the GUI launch.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>javascript</category><category>karma</category><category>testing</category><guid>https://necromuralist.github.io/posts/headless-firefox-with-karma/</guid><pubDate>Thu, 21 Jun 2018 20:23:31 GMT</pubDate></item></channel></rss>