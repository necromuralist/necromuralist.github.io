<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about networking)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/networking.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 18 May 2023 07:55:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Systemd To Enable Wake-On-Lan</title><link>https://necromuralist.github.io/posts/using-systemd-to-enable-wake-on-lan/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/using-systemd-to-enable-wake-on-lan/#org304d3b7"&gt;What is this about?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/using-systemd-to-enable-wake-on-lan/#org12ad9aa"&gt;So, how do you do it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/using-systemd-to-enable-wake-on-lan/#org7007309"&gt;So, That Fixed It?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/using-systemd-to-enable-wake-on-lan/#orga24893c"&gt;Where did you find out about this?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org304d3b7" class="outline-2"&gt;
&lt;h2 id="org304d3b7"&gt;What is this about?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org304d3b7"&gt;
&lt;p&gt;
I made a previous post (&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/"&gt;Enabling Wake-On-LAN (In Ubuntu 20.10)&lt;/a&gt;) about enabling Wake-On-LAN on my server, but it didn't seem to work after a re-boot. I looked in the logs using &lt;a href="https://www.commandlinux.com/man-page/man1/journalctl.1.html"&gt;journalctl&lt;/a&gt; and noticed that the &lt;code&gt;wol.service&lt;/code&gt; that I set up didn't get enabled after the re-boot. I thought about it and I remembered that when I was working with bluetooth and set up a service for it I had to make it wait for the bluetooth service to start first or it wouldn't work and realized that there was nothing in the &lt;code&gt;wol.service&lt;/code&gt; file to tell it to wait so I went poking around and found what I hope to be a fix.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org12ad9aa" class="outline-2"&gt;
&lt;h2 id="org12ad9aa"&gt;So, how do you do it?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org12ad9aa"&gt;
&lt;p&gt;
We need to update the &lt;code&gt;/etc/systemd/system/wol.service&lt;/code&gt; that I created in that earlier post. Previously it looked like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]
Description=Enable Wake On Lan

[Service]
Type=oneshot
ExecStart = /sbin/ethtool --change enp4s0 wol g

[Install]
WantedBy=basic.target
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We need to update the &lt;code&gt;[Unit]&lt;/code&gt; section by adding
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Requires=network.target
After=network.target
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To let systemd know that we don't want this to run until after the network service has run. I also changed the &lt;code&gt;WantedBy&lt;/code&gt;  to &lt;code&gt;multi-user.target&lt;/code&gt;. So the updated file looks like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]
Description=Enable Wake On Lan
Requires=network.target
After=network.target

[Service]
Type=oneshot
ExecStart = /sbin/ethtool --change enp4s0 wol g

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now reload the daemon and re-enable it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl daemon-reload
sudo systemctl enable wol.service
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To make sure I didn't introduce any errors I ran it once.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start wol
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then I rebooted it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo reboot now
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This time in journalctl I saw this:
&lt;/p&gt;

&lt;pre class="example" id="orgcc314ca"&gt;
Dec 07 00:02:17 erebus systemd[1]: Finished Enable Wake On Lan.
Dec 07 00:02:17 erebus systemd[1]: wol.service: Succeeded.
&lt;/pre&gt;

&lt;p&gt;
And running &lt;code&gt;ethtool&lt;/code&gt; showed that it was enabled.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Wake-on: g
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7007309" class="outline-2"&gt;
&lt;h2 id="org7007309"&gt;So, That Fixed It?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7007309"&gt;
&lt;p&gt;
Well, insofar as it's working now, yes. But since I change more than one thing I don't really know exactly what did it (was it one of the three lines I changed or all of them?). Anyway, since it works I'll let it lie for now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga24893c" class="outline-2"&gt;
&lt;h2 id="orga24893c"&gt;Where did you find out about this?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga24893c"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The Arch wiki has a page on &lt;a href="https://wiki.archlinux.org/index.php/Wake-on-LAN"&gt;Wake-On-LAN&lt;/a&gt; that tells you many different ways to set it up – I copied the systemd file almost exactly. It has quite a bit of useful information (too much maybe), but not all the commands will work out of the box on Ubuntu (because it's Arch).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>how-to</category><category>networking</category><category>systemd</category><category>ubuntu</category><guid>https://necromuralist.github.io/posts/using-systemd-to-enable-wake-on-lan/</guid><pubDate>Sun, 06 Dec 2020 23:10:53 GMT</pubDate></item><item><title>Enabling Wake-On-LAN (In Ubuntu 20.10)</title><link>https://necromuralist.github.io/posts/enabling-wake-on-lan/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#orgb28baab"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#org3f97e62"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#orgb71156c"&gt;Ethtool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#orgde30793"&gt;Checking the Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#org4b8f72b"&gt;Turn It On Temporarily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#org6dd4117"&gt;Test It Out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#orgeef5e14"&gt;Take Two&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#org3eb0d4c"&gt;Making It Permanent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/enabling-wake-on-lan/#org68624ac"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; The systemd configuration here isn't quite right, but since this post is kind of long and convoluted I made a standalone update about the systemd configuration file in &lt;a href="https://necromuralist.github.io/posts/using-systemd-to-enable-wake-on-lan/"&gt;this post&lt;/a&gt;.
&lt;/p&gt;

&lt;div id="outline-container-orgb28baab" class="outline-2"&gt;
&lt;h2 id="orgb28baab"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb28baab"&gt;
&lt;p&gt;
These are my notes on getting &lt;a href="https://en.wikipedia.org/wiki/Wake-on-LAN"&gt;Wake-On-LAN&lt;/a&gt; working in Ubuntu 20.10. I have a server that I use to run most of the computation on when I use emacs/jupyter but I have it in a corner upstairs and although it's only a little walk, I find that the fact that I have to stop what I'm doing and go upstairs to push that little button on the front makes me lazy and so it ends up running more than it has to so I thought I'd enable Wake-On-LAN so I can suspend it and wake it up whenever I need to. I'm only going to use suspend (&lt;a href="https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface"&gt;APM&lt;/a&gt; S3). When I tried to use hibernate (S4) it ended up shutting down my machine (S5). Interestingly, my BIOS menu has an option to enable waking up from shutdown, but since my disk is encrypted, and I didn't set up a separate SSH server, I have to go enter the passphrase to unlock the disk before the operating system can boot up, so it kind of defeats its own purpose.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3f97e62" class="outline-2"&gt;
&lt;h2 id="org3f97e62"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3f97e62"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb71156c" class="outline-3"&gt;
&lt;h3 id="orgb71156c"&gt;Ethtool&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb71156c"&gt;
&lt;p&gt;
The command I used to set up Wake-On-LAN on the remote machine is called &lt;a href="https://en.wikipedia.org/wiki/Ethtool"&gt;ethtool&lt;/a&gt;. It's in the Ubuntu repositories but wasn't installed on my machine so I had to add it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install ethtool
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgde30793" class="outline-3"&gt;
&lt;h3 id="orgde30793"&gt;Checking the Interface&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgde30793"&gt;
&lt;p&gt;
From what I've read, not all ethernet interfaces support Wake-On-LAN (although I've never seen one that doesn't) so a quick check might be useful. First, find the name of your ethernet interface.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
My machine shows four interfaces so I'll just show the output for the interface I'm interested in rather than the whole output for the command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2: enp4s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 38:d5:47:79:ab:0b brd ff:ff:ff:ff:ff:ff
    inet 192.168.86.97/24 brd 192.168.86.255 scope global dynamic noprefixroute enp4s0
       valid_lft 84752sec preferred_lft 84752sec
    inet6 fe80::685d:374d:a577:f787/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Ethtool uses the name of the interface, in this case it's &lt;code&gt;enp4s0&lt;/code&gt;, so we'll need to note that. Additionally, the machine that I used to wake up the machine needs the MAC address (&lt;code&gt;38:d5:47:79:ab:0b&lt;/code&gt;) so it'd be useful to write that down someplace. I'm waking it up from the LAN so the IP address isn't so important, and to be able to SSH into it I need to know it anyway, so it's really those two pieces of information that I need. Now to check if it supports Wake-On-LAN.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ethtool enp4s0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Ethtool will give you some information if you don't run it as root but for Wake-On-LAN you need to run it as root. The important lines in the output is near the bottom and it looks something like this if it supports Wake-On-LAN.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Supports Wake-on: pumbg
Wake-on: d
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The man-page for &lt;code&gt;ethtool&lt;/code&gt; tell you what that cryptic &lt;code&gt;pumbg&lt;/code&gt; means - the letters are different options that this interface supports for Wake-On-LAN. In this case they are:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Option&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;p&lt;/td&gt;
&lt;td class="org-left"&gt;Wake on PHY activity&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;u&lt;/td&gt;
&lt;td class="org-left"&gt;Wake on unicast messages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;m&lt;/td&gt;
&lt;td class="org-left"&gt;Wake on multicast messages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;b&lt;/td&gt;
&lt;td class="org-left"&gt;Wake on broadcast messages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;g&lt;/td&gt;
&lt;td class="org-left"&gt;Wake on MagicPacket messages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
There's an additional option which is what the interface was set on – &lt;code&gt;d&lt;/code&gt; – as you can see in the last line of the output. This means &lt;i&gt;Disable (wake on nothing).  This option clears all previous options.&lt;/i&gt; I don't have many devices on my network, so I don't know that there's a lot of broadcasts, multicasts, etc. that would be waking it up all the time, but since one feature of Wake-On-LAN is that it only wakes the machine when it gets the "Magic Packet", only the &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; options matter. Now that I knew it was supported, it was time to try it out.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4b8f72b" class="outline-3"&gt;
&lt;h3 id="org4b8f72b"&gt;Turn It On Temporarily&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4b8f72b"&gt;
&lt;p&gt;
The &lt;code&gt;ethtool&lt;/code&gt; will turn on Wake-On-LAN, but (supposedly) everytime you reboot the machine it will reset to disabled. I haven't really tested this out, but I'll document how to make it permanent later, anyway.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ethtool --change enp4s0 wol g
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So, as you might guess, we changed the Wake-On-LAN setting to listen for MagicPacket messages. You can check using the ethtool again.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ethtool enp4s0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The &lt;code&gt;Wake-on&lt;/code&gt; line should have changed to:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Wake-on: g
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now to suspend the machine so we can test it out.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl suspend
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6dd4117" class="outline-3"&gt;
&lt;h3 id="org6dd4117"&gt;Test It Out&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6dd4117"&gt;
&lt;p&gt;
Now, on my local machine I needed to install &lt;a href="https://github.com/jpoliv/wakeonlan"&gt;wakeonlan&lt;/a&gt;. There's a surprising number of programs to send the Magic Packet, but this just happened to be the one I used.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install wakeonlan
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The default way to use &lt;code&gt;wakeonlan&lt;/code&gt; is apparently to just pass it the MAC address of the computer to wake up, and it will send the Magic Packet out as a broadcast, so that's what I did.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wakeonlan 38:d5:47:79:ab:0b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And then I pinged the machine and I waited. And I waited. And I waited… Eventually I went upstairs and saw that it was still sleeping so I pushed the power button to wake it up and went back downstairs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeef5e14" class="outline-3"&gt;
&lt;h3 id="orgeef5e14"&gt;Take Two&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgeef5e14"&gt;
&lt;p&gt;
Something wasn't right so I SSHd into the server and started up &lt;a href="https://www.tcpdump.org/"&gt;tcpdump&lt;/a&gt; to see if the packets were going through.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump -i enp4s0 '(udp and port 7) or (udp and port 9)'
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which gave me this output:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp4s0, link-type EN10MB (Ethernet), capture size 262144 bytes
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And then I sent the Magic Packet again.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wakeonlan 38:d5:47:79:ab:0b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
…And nothing happened. For some reason the packets weren't getting picked up by the machine. Luckily, &lt;code&gt;wakeonlan&lt;/code&gt; lets you pass in an IP address as an option. The man page recommends using a broadcast address, but I have the IP addresses of my machines on the LAN reserved on my router/access-point so I just passed in the full address (I did try the LAN broadcast and it worked too).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wakeonlan -i erebus 38:d5:47:79:ab:0b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I have my machine's IP address aliased in my &lt;code&gt;/etc/hosts&lt;/code&gt; file so &lt;code&gt;erebus&lt;/code&gt; is just an alias for the machine's IP address. The subnet broadcast version looked like this.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wakeonlan -i 192.168.86.255 38:d5:47:79:ab:0b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The output from &lt;code&gt;tcpdump&lt;/code&gt; for the first packet looked like this.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp4s0, link-type EN10MB (Ethernet), capture size 262144 bytes
20:47:11.689587 IP 192.168.86.141.34805 &amp;gt; erebus.discard: UDP, length 102
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So, something was different. I suspended the machine again and sent the Magic Packet and this time it worked. Go figure.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3eb0d4c" class="outline-3"&gt;
&lt;h3 id="org3eb0d4c"&gt;Making It Permanent&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3eb0d4c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org29bce0d" class="outline-4"&gt;
&lt;h4 id="org29bce0d"&gt;Set It Up&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org29bce0d"&gt;
&lt;p&gt;
The reasons that I said earlier that the Wake-On-LAN setting "supposedly" is temporary is that:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;I haven't really re-booted that machine to test it out (I have rebooted, but I haven't disable the &lt;a href="https://en.wikipedia.org/wiki/Systemd"&gt;systemd&lt;/a&gt; service that I'm documenting here).&lt;/li&gt;
&lt;li&gt;The machine that I'm typing this on had Wake-On-LAN enabled and it doesn't have a &lt;code&gt;systemd&lt;/code&gt; service enabled.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
But, really, I don't remember even enabling Wake-On-LAN on this machine so maybe it just was the default and I didn't realise it… another thing I should look into one of these days. Anyway, to make a service that always enables Wake-On-LAN the first step is to find the path to &lt;code&gt;ethertool&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which ethtool
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In my case the path was &lt;code&gt;/sbin/ethtool&lt;/code&gt;, so once you know this you can create a file at &lt;code&gt;/etc/systemd/system/wol.service&lt;/code&gt; (I think you can use another systemd sub-folder, and you can name the file anything you want, within reason, but this one seems to work well enough). In this file you put settings that look something like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]
Description=Enable Wake On Lan

[Service]
Type=oneshot
ExecStart = /sbin/ethtool --change enp4s0 wol g

[Install]
WantedBy=basic.target
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The only thing specific to my machine is &lt;code&gt;enp4s0&lt;/code&gt;, the name of the ethernet interface, although it's possible that the path to the &lt;code&gt;ethtool&lt;/code&gt; executable might be different too… but it should be the same on Ubuntu 20.10, anyway.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgac1ed49" class="outline-4"&gt;
&lt;h4 id="orgac1ed49"&gt;Enable The Service&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgac1ed49"&gt;
&lt;p&gt;
To enable it you can do this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl daemon-reload
sudo systemctl enable wol.service
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Where &lt;code&gt;wol.service&lt;/code&gt; is the name of the file you created with the settings. You can check its status if you want.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl status wol
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And that's that.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org68624ac" class="outline-2"&gt;
&lt;h2 id="org68624ac"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org68624ac"&gt;
&lt;p&gt;
So, that's how I got one machine working with Wake-On-LAN. Hopefully I won't have to look so hard the next time. Here's the pages that I stole this from.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.techrepublic.com/article/how-to-enable-wake-on-lan-in-ubuntu-server-18-04/"&gt;TechRepublic&lt;/a&gt; on using &lt;code&gt;ethtool&lt;/code&gt; and setting up a &lt;code&gt;systemd&lt;/code&gt; service for this (don't use the systemd file here, though).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/1792/how-can-i-suspend-hibernate-from-command-line"&gt;Stack Overflow&lt;/a&gt; on how to suspend and hibernate from the command-line&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/3369/what-is-the-difference-between-hibernate-and-suspend"&gt;Stack Overflow&lt;/a&gt; on what the difference is between suspend and hibernate&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/318137/wake-on-lan-not-working-on-ubuntu-16-04"&gt;Stack Overflow&lt;/a&gt; on using &lt;code&gt;tcpdump&lt;/code&gt; to look for the Magic Packets on the remote machine&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2177687/open-file-via-ssh-and-sudo-with-emacs"&gt;Stack Overflow&lt;/a&gt; on editing remote files as root with emacs (not documented here, but maybe later)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/95631/open-a-file-with-su-sudo-inside-emacs"&gt;Stack Overflow&lt;/a&gt; on editing a local file as root with emacs (not used here, but I can never remember the syntax)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>networking</category><category>ubuntu</category><guid>https://necromuralist.github.io/posts/enabling-wake-on-lan/</guid><pubDate>Sun, 29 Nov 2020 01:57:35 GMT</pubDate></item><item><title>The Linux IPv6 Router Advertisement Daemon (radvd)</title><link>https://necromuralist.github.io/posts/the-linux-ipv6-router-advertisement-daemon-radvd/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org3d81659" class="outline-2"&gt;
&lt;h2 id="org3d81659"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d81659"&gt;
&lt;p&gt;
&lt;a href="http://www.litech.org/radvd/"&gt;radvd&lt;/a&gt; (the router advertisement daemon) sends IPv6 advertisements and responds to node IPv6 requests. Here's the description from the man page.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;radvd&lt;/b&gt; is the router advertisement daemon for IPv6. It listens to router solicitations and sends router advertisements as described in "Neighbor Discovery for IP Version 6 (IPv6)" (RFC 4861). With these advertisements hosts can automatically configure their addresses and some other parameters. They also can choose a default router based on these advertisements. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf8c37a" class="outline-2"&gt;
&lt;h2 id="orgbf8c37a"&gt;Installation and Setup&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf8c37a"&gt;
&lt;p&gt;
Setting &lt;b&gt;radvd&lt;/b&gt; is suspiciously easy compared to other linux services. First you install it.
&lt;/p&gt;

&lt;pre class="example" id="org8c2e7e4"&gt;
sudo apt install radvd
&lt;/pre&gt;

&lt;p&gt;
Installing it will also start the service so we can use &lt;code&gt;systemctl&lt;/code&gt; to check how it's doing.
&lt;/p&gt;

&lt;pre class="example" id="orgbf752a3"&gt;
systemctl status radvd
&lt;/pre&gt;

&lt;pre class="example" id="orge8c350e"&gt;
systemctl status radvd
● radvd.service - LSB: Router Advertising Daemon
   Loaded: loaded (/etc/init.d/radvd; bad; vendor preset: enabled)
   Active: active (exited) since Fri 2018-07-20 12:39:19 PDT; 36s ago
     Docs: man:systemd-sysv-generator(8)

Jul 20 12:39:18 asgaard systemd[1]: Starting LSB: Router Advertising Daemon...
Jul 20 12:39:19 asgaard radvd[8532]: Starting radvd:
Jul 20 12:39:19 asgaard radvd[8532]: * /etc/radvd.conf does not exist or is empty.
Jul 20 12:39:19 asgaard radvd[8532]: * See /usr/share/doc/radvd/README.Debian
Jul 20 12:39:19 asgaard radvd[8532]: * radvd will *not* be started.
Jul 20 12:39:19 asgaard systemd[1]: Started LSB: Router Advertising Daemon.
&lt;/pre&gt;

&lt;p&gt;
You can see in the output that there's a line with &lt;code&gt;/etc/radvd.conf does not exist or is empty.&lt;/code&gt;. To fix this we're going to create the configuration file.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge78faaf" class="outline-3"&gt;
&lt;h3 id="orge78faaf"&gt;The Configuration File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge78faaf"&gt;
&lt;p&gt;
Now create a configuration file (named &lt;code&gt;radvd.conf&lt;/code&gt;). Here's an example.
&lt;/p&gt;

&lt;pre class="example" id="org6fcec61"&gt;
interface eth0
{
MinRtrAdvInterval 3;
MaxRtrAdvInterval 4;
AdvSendAdvert on;
AdvManagedFlag on;
prefix 2001:db7::/64
{ AdvValidLifetime 14300; AdvPreferredLifetime 14200; }
;
};
&lt;/pre&gt;

&lt;p&gt;
Note that the interface name depends on your system. Most linux systems don't use the &lt;code&gt;eth0&lt;/code&gt; convention anymore. On my desktop the ethernet inteface is called &lt;code&gt;enp1s0&lt;/code&gt; and on my raspberry pi it's &lt;code&gt;enxb827eb6c9129&lt;/code&gt; so make sure you check what your interface name is using &lt;code&gt;ifconfig&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Now move (or copy) the config file into &lt;code&gt;/etc/&lt;/code&gt;
&lt;/p&gt;

&lt;pre class="example" id="org1e331bf"&gt;
sudo mv radvd.conf /etc/
&lt;/pre&gt;

&lt;p&gt;
And then restart &lt;code&gt;radvd&lt;/code&gt; and check its state.
&lt;/p&gt;

&lt;pre class="example" id="orgb09a3c6"&gt;
sudo service radvd restart
systemctl status radvd
&lt;/pre&gt;

&lt;pre class="example" id="org68ed3e8"&gt;
● radvd.service - LSB: Router Advertising Daemon
   Loaded: loaded (/etc/init.d/radvd; bad; vendor preset: enabled)
   Active: active (exited) since Fri 2018-07-20 12:41:36 PDT; 2s ago
     Docs: man:systemd-sysv-generator(8)
  Process: 10008 ExecStop=/etc/init.d/radvd stop (code=exited, status=0/SUCCESS)
  Process: 10017 ExecStart=/etc/init.d/radvd start (code=exited, status=0/SUCCESS)

Jul 20 12:41:36 asgaard systemd[1]: Starting LSB: Router Advertising Daemon...
Jul 20 12:41:36 asgaard radvd[10017]: Starting radvd:
Jul 20 12:41:36 asgaard radvd[10017]: * IPv6 forwarding seems to be disabled.
Jul 20 12:41:36 asgaard radvd[10017]: * See /usr/share/doc/radvd/README.Debian
Jul 20 12:41:36 asgaard radvd[10017]: * radvd will *not* be started.
Jul 20 12:41:36 asgaard systemd[1]: Started LSB: Router Advertising Daemon.
&lt;/pre&gt;

&lt;p&gt;
So the warning about the configuration file went away, now we have to fix the &lt;code&gt;IPv6 forwarding seems to be disabled.&lt;/code&gt; error.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d0b7ab" class="outline-3"&gt;
&lt;h3 id="org7d0b7ab"&gt;Enable IPv6 Forwarding&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7d0b7ab"&gt;
&lt;p&gt;
For now you can enable it at the command line.
&lt;/p&gt;

&lt;pre class="example" id="orga2137fb"&gt;
sudo sysctl -w net.ipv6.conf.all.forwarding=1
&lt;/pre&gt;

&lt;p&gt;
And restart and check &lt;code&gt;radvd&lt;/code&gt; again.
&lt;/p&gt;

&lt;pre class="example" id="org6b3b083"&gt;
sudo service radvd restart
systemctl status radvd
&lt;/pre&gt;

&lt;pre class="example" id="org80e22b4"&gt;
● radvd.service - LSB: Router Advertising Daemon
   Loaded: loaded (/etc/init.d/radvd; bad; vendor preset: enabled)
   Active: active (running) since Fri 2018-07-20 12:45:02 PDT; 20s ago
     Docs: man:systemd-sysv-generator(8)
  Process: 12255 ExecStop=/etc/init.d/radvd stop (code=exited, status=0/SUCCESS)
  Process: 12264 ExecStart=/etc/init.d/radvd start (code=exited, status=0/SUCCESS)
   CGroup: /system.slice/radvd.service
           ├─12275 /usr/sbin/radvd -u radvd -p /var/run/radvd/radvd.pid
           └─12276 /usr/sbin/radvd -u radvd -p /var/run/radvd/radvd.pid

Jul 20 12:45:01 asgaard systemd[1]: Starting LSB: Router Advertising Daemon...
Jul 20 12:45:02 asgaard radvd[12274]: version 2.11 started
Jul 20 12:45:02 asgaard radvd[12264]: Starting radvd: radvd.
Jul 20 12:45:02 asgaard systemd[1]: Started LSB: Router Advertising Daemon.
&lt;/pre&gt;

&lt;p&gt;
So it looks like our daemon is working. If you restart the server, though, the IPv6 port forwarding won't be enabled so open up &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; and un-comment out the following line.
&lt;/p&gt;

&lt;pre class="example" id="org8ce04b3"&gt;
net.ipv6.conf.all.forwarding=1
&lt;/pre&gt;

&lt;p&gt;
Now the next time you power on the computer it should be enabled.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd398d4a" class="outline-2"&gt;
&lt;h2 id="orgd398d4a"&gt;Checking&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd398d4a"&gt;
&lt;p&gt;
To check if it's working you can put another device on the LAN and check &lt;code&gt;ifconfig&lt;/code&gt;. In our &lt;code&gt;radvd.conf&lt;/code&gt; file we defined the prefix for the address:
&lt;/p&gt;

&lt;pre class="example" id="org7c2ded9"&gt;
prefix 2001:db7::/64
&lt;/pre&gt;

&lt;p&gt;
So in the &lt;code&gt;ifconfig&lt;/code&gt; output  we should see an entry for an IPv6 address that starts with &lt;code&gt;2001:db7::&lt;/code&gt;. In fact I ended up with two.
&lt;/p&gt;

&lt;pre class="example" id="org97f151f"&gt;
inet6 2001:db7::b8b4:6adf:6267:5571  prefixlen 64  scopeid 0x0&amp;lt;global&amp;gt;
inet6 2001:db7::a80c:1a05:eaac:c1e8  prefixlen 64  scopeid 0x0&amp;lt;global&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc8950f7" class="outline-2"&gt;
&lt;h2 id="orgc8950f7"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc8950f7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/learn/intro-to-linux/2017/12/ipv6-auto-configuration-linux"&gt;IPv6 auto-configuration&lt;/a&gt; - how to setup &lt;b&gt;radvd&lt;/b&gt; (from linux.com)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>how-to</category><category>networking</category><guid>https://necromuralist.github.io/posts/the-linux-ipv6-router-advertisement-daemon-radvd/</guid><pubDate>Fri, 20 Jul 2018 18:12:11 GMT</pubDate></item><item><title>Networking Tools</title><link>https://necromuralist.github.io/posts/networking-tools/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org0f3e9b4" class="outline-2"&gt;
&lt;h2 id="org0f3e9b4"&gt;Packet Capturing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0f3e9b4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgabc1134" class="outline-3"&gt;
&lt;h3 id="orgabc1134"&gt;&lt;a href="http://staff.washington.edu/corey/gulp/"&gt;Gulp&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgabc1134"&gt;
&lt;p&gt;
Gulp purports to be better at capturing packets than tcpdump (although they can work together).
&lt;/p&gt;

&lt;p&gt;
There is more than one version out there:
&lt;/p&gt;

&lt;p&gt;
-&lt;a href="//github.com/gsson/gulp"&gt; This one&lt;/a&gt; says it applied a patch to it five years ago. 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/aokunev/gulp-v01"&gt;This one&lt;/a&gt; says it is the original but hasn't been updated in six years.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.crox.net/archives/72-gulp-tcpdump-alternative-for-lossless-capture-on-Linux.html"&gt;This blog post&lt;/a&gt; has updated versions of it including one in 2017 that says it has a major bug fix (but I don't know if it's a gulp bug or not)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1450c5f" class="outline-3"&gt;
&lt;h3 id="org1450c5f"&gt;&lt;a href="https://www.tcpdump.org"&gt;tcpdump&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1450c5f"&gt;
&lt;p&gt;
More easily obtainable and better documentation available (although still not enough).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4d33ec2" class="outline-3"&gt;
&lt;h3 id="org4d33ec2"&gt;&lt;a href="http://ssldump.sourceforge.net"&gt;ssldump&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4d33ec2"&gt;
&lt;p&gt;
Captures packets and decodes SSL/TLS packets.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org11278fe" class="outline-2"&gt;
&lt;h2 id="org11278fe"&gt;Packet Examining&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org11278fe"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6333493" class="outline-3"&gt;
&lt;h3 id="org6333493"&gt;&lt;a href="https://github.com/mschiffm/cppip"&gt;Compressed PCAP Packet Indexing Prograpm (cppip)&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6333493"&gt;
&lt;p&gt;
This adds indexing to &lt;a href="http://www.htslib.org/doc/bgzip.html"&gt;bgzip&lt;/a&gt; compressed LibPCAP files which then lets you extract them while the original files are still compressed.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad0b1d3" class="outline-3"&gt;
&lt;h3 id="orgad0b1d3"&gt;&lt;a href="https://linux.die.net/man/8/tcpslice"&gt;tcpslice&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgad0b1d3"&gt;
&lt;p&gt;
This lets you extract part of or combine files created by tcpdump when using file rotation.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfcb45e0" class="outline-3"&gt;
&lt;h3 id="orgfcb45e0"&gt;&lt;a href="https://github.com/jpr5/ngrep"&gt;ngrep&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfcb45e0"&gt;
&lt;p&gt;
Describes itself as like GNU grep but for packets.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeb2d3e4" class="outline-3"&gt;
&lt;h3 id="orgeb2d3e4"&gt;&lt;a href="https://github.com/signed0/pylibpcap"&gt;pylibpcap&lt;/a&gt;, &lt;a href="https://github.com/pynetwork/pypcap"&gt;pypcap&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgeb2d3e4"&gt;
&lt;p&gt;
Python code to work with libpcap.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc22e13c" class="outline-3"&gt;
&lt;h3 id="orgc22e13c"&gt;WireShark&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc22e13c"&gt;
&lt;p&gt;
These are installed when you install wireshark.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgece8660" class="outline-4"&gt;
&lt;h4 id="orgece8660"&gt;&lt;a href="https://www.wireshark.org/docs/man-pages/tshark.html"&gt;tshark&lt;/a&gt;/&lt;a href="https://www.wireshark.org"&gt;wireshark&lt;/a&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgece8660"&gt;
&lt;p&gt;
Packet capturing and examining (better documented than most of the other programs)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeb0dd67" class="outline-4"&gt;
&lt;h4 id="orgeb0dd67"&gt;&lt;a href="https://www.wireshark.org/docs/man-pages/reordercap.html"&gt;reordercap&lt;/a&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgeb0dd67"&gt;
&lt;p&gt;
Reorders the packets by timestamp.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org90ab669" class="outline-4"&gt;
&lt;h4 id="org90ab669"&gt;&lt;a href="https://www.wireshark.org/docs/man-pages/capinfos.html"&gt;capinfos&lt;/a&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org90ab669"&gt;
&lt;p&gt;
This prints summary information about packe files (works with gzipped files).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org45b27a4" class="outline-4"&gt;
&lt;h4 id="org45b27a4"&gt;&lt;a href="https://www.wireshark.org/docs/man-pages/mergecap.html"&gt;mergecap&lt;/a&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org45b27a4"&gt;
&lt;p&gt;
Merges multiple packet files together. Mergecap will try to keep timestamps in order when merging, but it assumes each individual file to merge is already in order.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org58218a7" class="outline-2"&gt;
&lt;h2 id="org58218a7"&gt;Packet Flows&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org58218a7"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4d1314a" class="outline-3"&gt;
&lt;h3 id="org4d1314a"&gt;&lt;a href="http://tcpick.sourceforge.net"&gt;tcpick&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4d1314a"&gt;
&lt;p&gt;
Track, reassemble, reorder TCP streams.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc664979" class="outline-3"&gt;
&lt;h3 id="orgc664979"&gt;&lt;a href="http://www.tcptrace.org"&gt;tcptrace&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc664979"&gt;
&lt;p&gt;
Gives connection information taken from a capture file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org40365cc" class="outline-3"&gt;
&lt;h3 id="org40365cc"&gt;&lt;a href="https://github.com/simsong/tcpflow"&gt;tcpflow&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org40365cc"&gt;
&lt;p&gt;
Separates out TCP flows into separate files.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7ab4a58" class="outline-2"&gt;
&lt;h2 id="org7ab4a58"&gt;Capture Summarizing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7ab4a58"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1013a31" class="outline-3"&gt;
&lt;h3 id="org1013a31"&gt;&lt;a href="https://www.wireshark.org/docs/man-pages/capinfos.html"&gt;capinfos&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-org201eadd" class="outline-3"&gt;
&lt;h3 id="org201eadd"&gt;&lt;a href="https://github.com/kohler/ipsumdump"&gt;ipsumdump&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org201eadd"&gt;
&lt;p&gt;
Summarizes packet information in ASCII format
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3c48021" class="outline-3"&gt;
&lt;h3 id="org3c48021"&gt;&lt;a href="http://www.draconyx.net/articles/tcpdstat-fixing-a-compilation-bug-and-using-statistics.html"&gt;tcpdstat&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3c48021"&gt;
&lt;p&gt;
Gives summary statistics for a pcap file
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge1ba7ca" class="outline-2"&gt;
&lt;h2 id="orge1ba7ca"&gt;Network Monitoring&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge1ba7ca"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org026687f" class="outline-3"&gt;
&lt;h3 id="org026687f"&gt;&lt;a href="https://www.ntop.org"&gt;ntop&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org026687f"&gt;
&lt;p&gt;
Like top but for the network.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3a74ecc" class="outline-3"&gt;
&lt;h3 id="org3a74ecc"&gt;&lt;a href="http://man7.org/linux/man-pages/man8/ss.8.html"&gt;ss (socket statistics)&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3a74ecc"&gt;
&lt;p&gt;
Part of &lt;a href="https://en.wikipedia.org/wiki/Iproute2"&gt;iproute2&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5deac35" class="outline-2"&gt;
&lt;h2 id="org5deac35"&gt;Miscellaneous&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5deac35"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbd2af02" class="outline-3"&gt;
&lt;h3 id="orgbd2af02"&gt;&lt;a href="http://tcpreplay.appneta.com/"&gt;tcpreplay&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbd2af02"&gt;
&lt;p&gt;
A suite of programs to edit and replay pcap files.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5314d25" class="outline-3"&gt;
&lt;h3 id="org5314d25"&gt;&lt;a href="https://en.wikipedia.org/wiki/Netcat"&gt;netcat&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5314d25"&gt;
&lt;p&gt;
Read from and write to TCP/UDP network connections.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org04a7e33" class="outline-3"&gt;
&lt;h3 id="org04a7e33"&gt;&lt;a href="https://linux.die.net/man/1/socat"&gt;socat&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org04a7e33"&gt;
&lt;p&gt;
Route data between byte streams.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>networking</category><category>tools</category><category>wireless</category><guid>https://necromuralist.github.io/posts/networking-tools/</guid><pubDate>Tue, 22 May 2018 20:57:42 GMT</pubDate></item><item><title>TCP Dump Notes</title><link>https://necromuralist.github.io/posts/tcp-dump-notes/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
These are notes I made while surfing the web looking into &lt;a href="http://www.tcpdump.org/"&gt;TCP Dump&lt;/a&gt;. You will most likely need to use &lt;code&gt;sudo&lt;/code&gt; to run most of the commands, but I'm leaving it off to make it shorter.
&lt;/p&gt;

&lt;div id="outline-container-org76fc9a7" class="outline-2"&gt;
&lt;h2 id="org76fc9a7"&gt;About TCP Dump&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org76fc9a7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It has more filtering capabilities and can filter while capturing packets, but it doesn't have the analytical tools that something like wireshark has&lt;sup&gt;&lt;a id="fnr.1" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.1" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org89a0056" class="outline-2"&gt;
&lt;h2 id="org89a0056"&gt;Some Examples&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org89a0056"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6f6a1e3" class="outline-3"&gt;
&lt;h3 id="org6f6a1e3"&gt;Listing interfaces&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6f6a1e3"&gt;
&lt;p&gt;
You can ask &lt;code&gt;tcpdump&lt;/code&gt; which interfaces it is able to listen to&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="org81b9f86"&gt;
tcpdump -D
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgce9c37e" class="outline-3"&gt;
&lt;h3 id="orgce9c37e"&gt;Capture packets on an interface&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgce9c37e"&gt;
&lt;p&gt;
To capture packets on an interface you pass its name to the &lt;code&gt;-i&lt;/code&gt; flag&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; (here the interface I'll use is &lt;code&gt;eno1&lt;/code&gt;).
&lt;/p&gt;

&lt;pre class="example" id="org3cfa155"&gt;
tcpdump -i eno1
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5361b51" class="outline-4"&gt;
&lt;h4 id="org5361b51"&gt;Save the packet capture to a file&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5361b51"&gt;
&lt;p&gt;
The default behavior is for &lt;code&gt;tcpdump&lt;/code&gt; to send the output to standard output, to have it save the packets to a files use the &lt;code&gt;-w&lt;/code&gt; flag&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; (you can call it anything, I'll call it &lt;code&gt;dump.pcap&lt;/code&gt;).
&lt;/p&gt;

&lt;pre class="example" id="org6e1b0ad"&gt;
tcpdump -i eno1 -w dump.pcap
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7866a15" class="outline-4"&gt;
&lt;h4 id="org7866a15"&gt;Increase the verbosity of the capture&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7866a15"&gt;
&lt;p&gt;
To increase the amount if information that's captured, pass multiple &lt;code&gt;v&lt;/code&gt; arguments&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; (in this case I'll use &lt;code&gt;-vvv&lt;/code&gt;).
&lt;/p&gt;

&lt;pre class="example" id="orgc5a7f11"&gt;
tcpdump -i eno1 -vvv -w dump.pcap
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0670a2e" class="outline-3"&gt;
&lt;h3 id="org0670a2e"&gt;Filtering&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0670a2e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf4046de" class="outline-4"&gt;
&lt;h4 id="orgf4046de"&gt;By IP address&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf4046de"&gt;
&lt;p&gt;
You can get all the packets being sent or received by a host using the &lt;code&gt;host&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.3" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orgc6f1590"&gt;
tcpdump host 192.168.1.12
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9ca19e7" class="outline-4"&gt;
&lt;h4 id="org9ca19e7"&gt;By Sender IP Address&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9ca19e7"&gt;
&lt;p&gt;
You can filter out all the packets except those that are being sent by a host using the &lt;code&gt;src host&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orga784865"&gt;
tcpdump -i eno1 src host 192.168.1.12
&lt;/pre&gt;

&lt;p&gt;
You can leave off the &lt;code&gt;host&lt;/code&gt; argument and just use &lt;code&gt;src&lt;/code&gt;&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3d4e693" class="outline-4"&gt;
&lt;h4 id="org3d4e693"&gt;By Target IP Address&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3d4e693"&gt;
&lt;p&gt;
To filter out all the packets except those that are going to a specific target use the &lt;code&gt;dst host&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orge66ff9e"&gt;
tcpdump -i eno1 dst host 192.168.1.1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4230fa0" class="outline-4"&gt;
&lt;h4 id="org4230fa0"&gt;Sender and Target IP Addresses&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4230fa0"&gt;
&lt;p&gt;
You can combine parameters using the logical operators &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt;&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="org76679e2"&gt;
tcpdump 'src 192.168.1.1 and dst 192.168.1.12'
&lt;/pre&gt;

&lt;p&gt;
The single quotes are optional and are just used to group the arguments together.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbfbee41" class="outline-4"&gt;
&lt;h4 id="orgbfbee41"&gt;By Subnet&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbfbee41"&gt;
&lt;p&gt;
You can grab all the packets on a network or subnet using the &lt;code&gt;net&lt;/code&gt; argument and &lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation"&gt;CIDR&lt;/a&gt; notation&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;. This example grabs all the packets on the &lt;code&gt;192.168.1.*&lt;/code&gt; subnet.
&lt;/p&gt;

&lt;pre class="example" id="org5acb9e4"&gt;
tcpdump net 192.168.1.0/24
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgafc30c4" class="outline-4"&gt;
&lt;h4 id="orgafc30c4"&gt;By port and/or protocol&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgafc30c4"&gt;
&lt;p&gt;
If you want to only catch activity on a certain &lt;a href="https://en.wikipedia.org/wiki/Port_(computer_networking)"&gt;port&lt;/a&gt; and by a certain protocol then you use the &lt;code&gt;port&lt;/code&gt; argument and the name of the protocol (e.g. &lt;code&gt;udp&lt;/code&gt;)&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;. This would catch all the &lt;code&gt;tcp&lt;/code&gt; traffic over SSH.
&lt;/p&gt;
&lt;pre class="example" id="orgf7967e9"&gt;
tcpdump tcp port 22
&lt;/pre&gt;

&lt;p&gt;
You can use &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;udp&lt;/code&gt;, or &lt;code&gt;icmp&lt;/code&gt; for the protocols and add multiple ports using a comma&lt;sup&gt;&lt;a id="fnr.4" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.4" role="doc-backlink"&gt;4&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orgf97e75f"&gt;
tcpdump tcp port 22,80
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad86226" class="outline-4"&gt;
&lt;h4 id="orgad86226"&gt;Turn off hostname and port translation&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgad86226"&gt;
&lt;p&gt;
The default behavior for &lt;code&gt;tcpdump&lt;/code&gt; is to translate the hostnames and ports to something human-readable if possible. To turn this off you pass in the &lt;code&gt;-n&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;. Since this stops having to look things up it will reduce the amount of overhead needed by &lt;code&gt;tcpdump&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example" id="org86d466f"&gt;
tcpdump -n -i eno1 port 22
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9feac4d" class="outline-2"&gt;
&lt;h2 id="org9feac4d"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9feac4d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;(Wireshark Revealed&lt;sup&gt;&lt;a id="fnr.5" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt;) &lt;a href="http://www.tcpdump.org/"&gt;The tcpdump website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Wireshark Revealed&lt;sup&gt;&lt;a id="fnr.5.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt;) &lt;a href="http://danielmiessler.com/study/tcpdump/"&gt;A friendly tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Wireshark Revealed&lt;sup&gt;&lt;a id="fnr.5.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt;) &lt;a href="http://www.tcpdump.org/tcpdump_man.html"&gt;The official man page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org01e9100" class="outline-2"&gt;
&lt;h2 id="org01e9100"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org01e9100"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.1" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Diogenes, Y. &amp;amp; Ozkaya, E. (2018). Cybersecurity, Attack and Defense Strategies : infrastructure security with Red Team and Blue Team tactics. Birmingham, UK: Packt Publishing.]
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Johansen, G. (2017). Digital forensics and incident response : an intelligent way to respond to attacks. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Beltrame, J. (2017). Penetration testing bootcamp : quickly get up and running with pentesting techniques. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.4" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.4" role="doc-backlink"&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
McPhee. &amp;amp; Beltrame, J. (2016). Penetration testing with Raspberry Pi : learn the art of building a low-cost, portable hacking arsenal using Raspberry Pi 3 and Kali Linux 2. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.5" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Baxter, J., Orzach, Y. &amp;amp; Mishra, C. (2017). Wireshark revealed : essential skills for IT professionals : get up and running with Wireshark to analyze your network effectively. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>networking</category><category>notes</category><guid>https://necromuralist.github.io/posts/tcp-dump-notes/</guid><pubDate>Wed, 09 May 2018 21:54:56 GMT</pubDate></item><item><title>Tuning a TCP Connection</title><link>https://necromuralist.github.io/posts/201209tuning-tcp-connection/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#org14ae9e2"&gt;TCP Background&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#orga3da918"&gt;The TCP Congestion Window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#org42e16a7"&gt;Optimal Buffer Size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#org375df43"&gt;Changing the Buffer Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#org84ab590"&gt;Picking a Buffer Size&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#orga27efa6"&gt;The Maximum Throughput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#orgb32cc6b"&gt;Bandwidth Delay Product&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#orgefbe758"&gt;Iperf Tuning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#org4fee682"&gt;Iperf Warnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#orgbbf4746"&gt;Parallel Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/201209tuning-tcp-connection/#org07b282d"&gt;Maximum Transmission Unit (MTU)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I wrote this a long time ago so I don't remember the source or really the intent. I think it was about trying to maximize the throughput when running iperf over TCP.
&lt;/p&gt;

&lt;div id="outline-container-org14ae9e2" class="outline-2"&gt;
&lt;h2 id="org14ae9e2"&gt;TCP Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org14ae9e2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga3da918" class="outline-3"&gt;
&lt;h3 id="orga3da918"&gt;The TCP Congestion Window&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga3da918"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Larger window implies higher throughput&lt;/li&gt;
&lt;li&gt;The max allowed is based on the buffer space the kernel allocates for
each socket&lt;/li&gt;
&lt;li&gt;Each socket has a default buffer size&lt;/li&gt;
&lt;li&gt;Sender and receiver can both adjust the size&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org42e16a7" class="outline-3"&gt;
&lt;h3 id="org42e16a7"&gt;Optimal Buffer Size&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org42e16a7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Too small - Sender will be throttled
&lt;ul class="org-ul"&gt;
&lt;li&gt;More likely if the Sender is faster than the receiver&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Too big - Receiver might be overloaded and packets will be dropped
&lt;ul class="org-ul"&gt;
&lt;li&gt;If the receiver has lots of memory, less likely to happen&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org375df43" class="outline-2"&gt;
&lt;h2 id="org375df43"&gt;Changing the Buffer Size&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org375df43"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;TCP chooses the smaller of both sides of the transaction.&lt;/li&gt;
&lt;li&gt;Set the receiver high and let the sender negotiate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org84ab590" class="outline-2"&gt;
&lt;h2 id="org84ab590"&gt;Picking a Buffer Size&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org84ab590"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga27efa6" class="outline-3"&gt;
&lt;h3 id="orga27efa6"&gt;The Maximum Throughput&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga27efa6"&gt;
&lt;p&gt;
If the network isn't congested the throughput is characterized by TCP buffer size and network latency.
&lt;/p&gt;

\begin{equation*} max \; throughput \gets \frac{buffer \; size}{latency}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb32cc6b" class="outline-3"&gt;
&lt;h3 id="orgb32cc6b"&gt;Bandwidth Delay Product&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb32cc6b"&gt;
&lt;p&gt;
This is a rule of thumb to calculate the optimal buffer size.
&lt;/p&gt;

\begin{equation*} bdp \gets bottleneck \; bandwidth \times round \; trip
\; time \end{equation*}

&lt;ul class="org-ul"&gt;
&lt;li&gt;Get the &lt;b&gt;rtt&lt;/b&gt; from &lt;b&gt;ping&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;Get &lt;b&gt;bottleneck bandwidth&lt;/b&gt; from the theoretical maximum rate of the slowest link.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgefbe758" class="outline-2"&gt;
&lt;h2 id="orgefbe758"&gt;Iperf Tuning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgefbe758"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4fee682" class="outline-3"&gt;
&lt;h3 id="org4fee682"&gt;Iperf Warnings&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4fee682"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Iperf can set the buffer size up to a point – but the OS sets the
upper limit on window sizes.&lt;/li&gt;
&lt;li&gt;If the request is too high, iperf will use the maximum allowed and gives a warning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbbf4746" class="outline-3"&gt;
&lt;h3 id="orgbbf4746"&gt;Parallel Streams&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgbbf4746"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Iperf lets you run multiple parallel sessions using the -P flag.&lt;/li&gt;

&lt;li&gt;If the aggregate (SUM) is greater than a single stream, this is an indication that something is wrong – most likely one of:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The TCP window is too small&lt;/li&gt;
&lt;li&gt;The OS implementation has bugs&lt;/li&gt;
&lt;li&gt;The network has problems&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org07b282d" class="outline-3"&gt;
&lt;h3 id="org07b282d"&gt;Maximum Transmission Unit (MTU)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org07b282d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the most effective way to set it is if both hosts support Path MTU Discovery and set it themselves.&lt;/li&gt;
&lt;li&gt;iperf's -m flag displays what mss is being used&lt;/li&gt;
&lt;li&gt;&lt;b&gt;mss&lt;/b&gt;: &lt;i&gt;Maximum Segment Size&lt;/i&gt; – the maximum TCP segment size&lt;/li&gt;
&lt;/ul&gt;

\begin{equation*} mss \gets MTU - protocol \; headers \end{equation*}

&lt;ul class="org-ul"&gt;
&lt;li&gt;Using -m is mainly to watch for the warning that the node lacks path mtu discovery&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>networking</category><category>optimization</category><guid>https://necromuralist.github.io/posts/201209tuning-tcp-connection/</guid><pubDate>Mon, 10 Sep 2012 06:51:00 GMT</pubDate></item></channel></rss>