#+BEGIN_COMMENT
.. title: Pruning Large Files From Git with BFG
.. slug: pruning-large-files-from-git-with-bfg
.. date: 2017-03-08 12:57:59 UTC-08:00
.. tags: git howto
.. category: HowTo
.. link: 
.. description: How to prune large files with BFG
.. type: text
#+END_COMMENT

These are my notes on removing large files from a git repository with the [[https://rtyley.github.io/bfg-repo-cleaner/][BFG Repo-Cleaner]]. 

* Background
  I accidentally committed an 89 MB file to git and pushed it upstream to github. This is within the limits, but when I looked in the file it was filled with the same error message over and over again, so it wasn't useful. I'm just committing small log-files so none of my files should be that large anyway, so I decided to clean anything over 50 MB from the repository using /BFG/. The instructions on the home page mostly work, but didn't exactly work so I'm making some notes here for the next time.
* The Process

  Assuming you've downloaded the BFG jar file, this is what you need to do.

  #+BEGIN_SRC sh
  git clone --mirror <remote git address>
  #+END_SRC

  The =--mirror= flag creates a bare repository so it will look a little odd (the top level has the contents of what are normally in the =.git= folder). When I first tried this I thought I could clone my local copy but when I ran BFG on the clone it said that it couldn't find any large files. As noted in [[https://github.com/rtyley/bfg-repo-cleaner/issues/65][this bug-report]] the large files would be in the packfile if you clone it from a remote repository, but not necessarily in the local repository, so I had to clone it from github.

  Next run the BFG.

  #+BEGIN_SRC sh
  java -jar BFG-1.12.15.jar --strip-blobs-bigger-than 50M <path to cloned mirror>
  #+END_SRC

  Now you have to change into the cloned repository and execute some commands to update it.

  #+BEGIN_SRC sh
  git reflog expire --expire-now --all
  git gc --prune=now --aggressive
  #+END_SRC

  Now push it back to github.

  #+BEGIN_SRC sh
  git push
  #+END_SRC

  At this point the original local copy of the repository will still have the large file(s) in the history so if you just do a git pull it will think you are ahead of the remote, so you have to remove your original local repository and re-clone the remote.

  #+BEGIN_SRC sh
  rm -r <original local repository>
  git clone <remote repository>
  #+END_SRC

  One thing that tripped me up a little was that I had removed the /master/ branch but the /BFG/ re-added it, so it originally looked like I had lost some changes. Once I changed back into my working branch everything was as I had expected.
