<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about jupyter)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/jupyter.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Sat, 12 Feb 2022 23:16:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Jupyter-Emacs Sessions with org-mode</title><link>https://necromuralist.github.io/posts/jupyter-emacs-sessions/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org9925b6d"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org9c59238"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org49642aa"&gt;Starting the Jupyter Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org57b7234"&gt;Start a Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org6f2eec2"&gt;Setting the Session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/jupyter-emacs-sessions/#org3042f6b"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9925b6d" class="outline-2"&gt;
&lt;h2 id="org9925b6d"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9925b6d"&gt;
&lt;p&gt;
These are my notes on using &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; using a remote session. It works with a local session as well, but I'll just relate the steps as if you're running the jupyter session on a remote machine.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9c59238" class="outline-2"&gt;
&lt;h2 id="org9c59238"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9c59238"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org49642aa" class="outline-3"&gt;
&lt;h3 id="org49642aa"&gt;Starting the Jupyter Server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org49642aa"&gt;
&lt;p&gt;
The first thing to do is start the jupyter session on the remote machine. Since I'm doing this with &lt;b&gt;nikola&lt;/b&gt; I should note that you want to start the session in the same location as the file you're editing in emacs, because all your file references will be based on that directory (so if you, for instance, create an image and want to place it in the &lt;code&gt;files&lt;/code&gt; folder, you will need to note where that stands relative to the file you are editing and where you start the jupyter kernel).
&lt;/p&gt;

&lt;p&gt;
In my case I'm editing a file in &lt;code&gt;~/projects/In-Too-Deep/posts/fastai/&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/projects/In-Too-Deep/posts/fastai/
jupyter kernel
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will start the kernel and show you the file that you need to copy to your local machine (where you are running emacs). Here's an example output of that command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(In-Too-Deep) hades@erebus ~/p/I/p/fastai (fastai-restart| Dirty:4)&amp;gt; jupyter kernel
[KernelApp] Starting kernel 'python3'
[KernelApp] Connection file: /home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json
[KernelApp] To connect a client: --existing kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The important thing to note is the line with &lt;code&gt;Connection file&lt;/code&gt; (&lt;code&gt;[KernelApp] Connection file: /home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json&lt;/code&gt;). You will need to copy that file to the machine that you are running emacs on. Where do you put it? Check your jupyter location on your local machine (where you're running emacs, not where you're running jupyter).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --runtime-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Change into whatever directory is output by that command and then copy the json file from the machine with the running jupyter kernel onto your local machine.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/.local/share/jupyter/runtime
scp Hades:/home/hades/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org57b7234" class="outline-3"&gt;
&lt;h3 id="org57b7234"&gt;Start a Console&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org57b7234"&gt;
&lt;p&gt;
Now that you've copied over the information for the jupyter session you can start a console for it. I'll assume you're still in the directory with the json file in it, so I won't pass in the full path.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --console kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232.json --ssh Hades
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note the second argument where I passed in the SSH alias for my remote machine. If you don't have an alias set up then replace it with something that looks like &lt;code&gt;&amp;lt;username&amp;gt;@&amp;lt;IP Address&amp;gt;&lt;/code&gt; (this assumes, of course, that the machine with the jupyter session running on it also has an SSH server running). This command sets up our session to forward our jupyter commands to the remote machine. When you execute this command it should tell you that you can connect to the kernel using a slightly modified JSON file name:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ZMQTerminalIPythonApp] Forwarding connections to 127.0.0.1 via Hades
[ZMQTerminalIPythonApp] To connect another client via this tunnel, use:
[ZMQTerminalIPythonApp] --existing kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that &lt;code&gt;--existing&lt;/code&gt; argument for the next session (it should be the same as the original json file but with &lt;code&gt;-ssh&lt;/code&gt; added to the end of the name).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6f2eec2" class="outline-3"&gt;
&lt;h3 id="org6f2eec2"&gt;Setting the Session&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6f2eec2"&gt;
&lt;p&gt;
Since this is org-mode-based the first thing you should do is connect your emacs buffer to the console. Add this to the top of your buffer (the file where you intend to run python).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+PROPERTY: header-args :session /home/athena/.local/share/jupyter/runtime/kernel-ae33a6cd-f607-450e-a03b-01abe2a3b232-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you have this in your file when you open it you don't need to do anything special, but otherwise C-c C-c on it to load the session. What this does is allow subsequent python org-mode blocks to use the remote jupyter session when you execute them, without needing to specify a session.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3042f6b" class="outline-2"&gt;
&lt;h2 id="org3042f6b"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3042f6b"&gt;
&lt;p&gt;
At this point you can run org-mode code blocs that are set up to use &lt;code&gt;emacs-jupyter&lt;/code&gt; and they will redirect to the remote jupyter session. That is a whole other adventure so I'll leave it for another time (or to someone else).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>python</category><guid>https://necromuralist.github.io/posts/jupyter-emacs-sessions/</guid><pubDate>Sat, 09 May 2020 22:36:05 GMT</pubDate></item><item><title>Remote jupyter Sessions With ob-ipython</title><link>https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org188ac7a"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#org35b38a1"&gt;The Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#orgfa9dabd"&gt;Setting up the Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#orge1921f5"&gt;A Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/#orgc1c1f34"&gt;One More Thing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org188ac7a" class="outline-2"&gt;
&lt;h2 id="org188ac7a"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org188ac7a"&gt;
&lt;p&gt;
These are my notes about trying to use a remote jupyter session in org-mode (with ob-ipython). My main source was &lt;a href="https://vxlabs.com/2017/11/30/run-code-on-remote-ipython-kernels-with-emacs-and-orgmode/"&gt;this blog post&lt;/a&gt; from vxlabs, and also the &lt;a href="https://github.com/ipython/ipython/wiki/Cookbook:-Connecting-to-a-remote-kernel-via-ssh"&gt;ipython&lt;/a&gt; instructions for setting up a remote-session. I also referred to the &lt;a href="https://github.com/gregsexton/ob-ipython#working-with-a-remote-session"&gt;ob-ipython notes&lt;/a&gt; on setting up a remote session, although I didn't really understand everything it said until after I had done it once.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org35b38a1" class="outline-2"&gt;
&lt;h2 id="org35b38a1"&gt;The Layout&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org35b38a1"&gt;
&lt;p&gt;
Both this post and the jupyter server are running on my desktop (Hades) while I'm editing them in emacs on my laptop.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfa9dabd" class="outline-2"&gt;
&lt;h2 id="orgfa9dabd"&gt;Setting up the Session&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfa9dabd"&gt;
&lt;p&gt;
The steps are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Find out where the JSON file you will need is going to be put on the server&lt;/li&gt;
&lt;li&gt;Start the server&lt;/li&gt;
&lt;li&gt;Copy the json file that was created to your client&lt;/li&gt;
&lt;li&gt;Start an ipython session to connect to the remote session&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7011bf4" class="outline-3"&gt;
&lt;h3 id="org7011bf4"&gt;Find Out Where the JSON File Will Be&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7011bf4"&gt;
&lt;p&gt;
While ssh'd into the server (and with the appropriate virtual environment running if you need it), enter the command to show the folder where the JSON file will be.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --runtime-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In my case this is what came out.
&lt;/p&gt;

&lt;pre class="example"&gt;
/run/user/1000/jupyter
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd38a1a1" class="outline-3"&gt;
&lt;h3 id="orgd38a1a1"&gt;Start the Server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd38a1a1"&gt;
&lt;p&gt;
Change into the directory where you want the jupyter server to run and start the ipython kernel.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython kernel
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is what came out for me.
&lt;/p&gt;

&lt;pre class="example"&gt;
NOTE: When using the `ipython kernel` entry point, Ctrl-C will not work.

To exit, you will have to explicitly quit this process, by either sending
"quit" from a client, or using Ctrl-\ in UNIX-like environments.

To read more about this, see https://github.com/ipython/ipython/issues/2049


To connect another client to this kernel, use:
    --existing kernel-10181.json

&lt;/pre&gt;
&lt;p&gt;
That last line refers to the JSON file that we're going to need on the client side (&lt;code&gt;kernel-10181.json&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfaecdae" class="outline-3"&gt;
&lt;h3 id="orgfaecdae"&gt;Copy the File From the Server To the Client&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfaecdae"&gt;
&lt;p&gt;
Go back to your client (my laptop in this case) and check where your jupyter installation is.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter --runtime-dir
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
/run/user/1000/jupyter
&lt;/pre&gt;

&lt;p&gt;
Both my laptop and desktop had the same location, so it's probably the default. Now change into that directory on the client and copy the file from the server.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /run/user/1000/jupyter
scp Hades:/run/user/1000/jupyter/kernel-10181.json .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org283dd0c" class="outline-3"&gt;
&lt;h3 id="org283dd0c"&gt;Start the Client&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org283dd0c"&gt;
&lt;p&gt;
You can run this next command anywhere on the client where you can run jupyter.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter console --existing kernel-10181.json --ssh Hades
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Where &lt;code&gt;kernel-10181.json&lt;/code&gt; is the files copied from the server and &lt;code&gt;Hades&lt;/code&gt; is the ssh alias for my server (so it would be &lt;code&gt;hades@erebus&lt;/code&gt; without the alias).
&lt;/p&gt;

&lt;p&gt;
When you run this command it will open up an ipython prompt that will be connected to the server. This turns out to be more useful than I thought it would be because the prompt that ob-ipython normally opens seems to be broken when I'm connected to the remote client. Maybe there's something else to configure. Anyway, whatever you add to your emacs ob-ipython namespace will be accessible to you in the ipython prompt so you can fiddle with things live in there.
&lt;/p&gt;

&lt;p&gt;
Once you open this it will add another file (&lt;code&gt;kernel-10181-ssh.json&lt;/code&gt; in this case) that you can use to connect if you want to open up more than ipython prompt for some reason:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter console --existing kernel-10181-ssh.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You don't pass in the &lt;code&gt;--ssh&lt;/code&gt; flag this time. Note that you're still sharing the same jupyter session so all the variables and stuff will show up in the second console as well.
&lt;/p&gt;

&lt;p&gt;
But, more importantly, this second json file is how we can connect while in emacs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org71b0610" class="outline-3"&gt;
&lt;h3 id="org71b0610"&gt;Use The Session&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org71b0610"&gt;
&lt;p&gt;
To make use of the session you need to pass in the name of the ssh kernel file as the name of the ipython session.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session kernel-10181-ssh.json :results none

#+END_SRC
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Anything you do in a block with that session ID will send the commands to the remote server to be interpreted.
&lt;/p&gt;

&lt;p&gt;
To clarify:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;kernel-10181.json&lt;/code&gt; is the file you copy over from the server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kernel-10181-ssh.json&lt;/code&gt; is created on your client and is what you use in the org-babel header&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge1921f5" class="outline-2"&gt;
&lt;h2 id="orge1921f5"&gt;A Plot&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge1921f5"&gt;
&lt;p&gt;
I'm going to use this example from the &lt;a href="https://seaborn.pydata.org/examples/structured_heatmap.html"&gt;seaborn gallery&lt;/a&gt; to test out the setup. It might not be obvious from the post itself but the web-server for this post is also on my remote machine so I can tell if it worked by checking the page in a browser (because if it was using an ipython session on my laptop the page wouldn't get the image).
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgaf4ff6a" class="outline-3"&gt;
&lt;h3 id="orgaf4ff6a"&gt;Imports From PyPi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaf4ff6a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import pandas
import seaborn
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1ba528d" class="outline-3"&gt;
&lt;h3 id="org1ba528d"&gt;Plotting Setup&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1ba528d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%matplotlib inline
seaborn.set(style="whitegrid",
	    rc={"axes.grid": False,
		"font.family": ["sans-serif"],
		"font.sans-serif": ["Latin Modern Sans", "Lato"],
		"figure.figsize": (13, 13)},
	    font_scale=1)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Load the brain networks example dataset
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = seaborn.load_dataset("brain_networks", header=[0, 1, 2], index_col=0)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Select a subset of the networks.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;used_networks = [1, 5, 6, 7, 8, 12, 13, 17]
used_columns = (data.columns.get_level_values("network")
		.astype(int)
		.isin(used_networks))
data = data.loc[:, used_columns]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Create a categorical palette to identify the networks.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network_palette = seaborn.husl_palette(8, s=.45)
# I have no idea what the network_lut is.
network_lut = dict(zip(map(str, used_networks), network_palette))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Convert the palette to vectors that will be drawn on the side of the matrix.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;networks = data.columns.get_level_values("network")
network_colors = pandas.Series(networks, index=data.columns).map(network_lut)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Plot.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cluster = seaborn.clustermap(data.corr(), center=0, cmap="vlag",
			     row_colors=network_colors,
			     col_colors=network_colors,
			     linewidths=.75)
title = cluster.fig.suptitle("Brain Networks")
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/cluster_map.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Besides the ipython shell not working in emacs I also couldn't get it to render images directly in emacs, but they did render on the remote side so I could see the plot in my web-browser.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc1c1f34" class="outline-2"&gt;
&lt;h2 id="orgc1c1f34"&gt;One More Thing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc1c1f34"&gt;
&lt;p&gt;
I stumbled over this a couple of times so I thought I should mention that the virtualenv you activate in emacs has to be on your client (the laptop in my case), so to make it easier you should set it before opening the remote document via tramp. If you try to activate the virtualenv while in tramp it will attempt to use the remote machine's (server's) virtualenv. You can see that it's the case in the mini-buffer, but I think being prompted like that made me pick the wrong side. Use the virtualenv on the machine you're working on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>org-mode</category><category>programming</category><category>python</category><guid>https://necromuralist.github.io/posts/remote-jupyter-sessions-with-ob-ipython/</guid><pubDate>Fri, 23 Nov 2018 20:24:49 GMT</pubDate></item><item><title>Org To Jupyter Notebook</title><link>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
I've grown to really like &lt;a href="http://orgmode.org"&gt;org-mode&lt;/a&gt;, particularly with &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt;, but there are times when a real Jupyter notebook is better - if you want to render it on github or use the &lt;code&gt;%matplotlib notebook&lt;/code&gt; feature, for instance. I found a blog post the &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;Kitchin Research Group site&lt;/a&gt; announcing the creation of an exporter and this is some documentation about how to set it up.
&lt;/p&gt;

&lt;div id="outline-container-orgf3cbdff" class="outline-2"&gt;
&lt;h2 id="orgf3cbdff"&gt;Download&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf3cbdff"&gt;
&lt;p&gt;
When I originally set this up it was only available from a link on the blog-post, but it has since been added to a much larger github repository called &lt;a href="https://github.com/jkitchin/scimax"&gt;scimax&lt;/a&gt;. I'm assuming this is where the latest version will be kept. Unfortunately there's no license so I don't think you can fork the repository, even more importantly, I can't get it to work, so skip it for now and grab the old one.
&lt;/p&gt;

&lt;pre class="example"&gt;
cd ~/.emacs.d
mkdir lisp
wget http://kitchingroup.cheme.cmu.edu/media/ox-ipynb.el
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d250ca" class="outline-2"&gt;
&lt;h2 id="org2d250ca"&gt;Install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2d250ca"&gt;
&lt;p&gt;
Make sure that the lisp folder is in the emacs path by putting this line in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'load-path&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/lisp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Also make sure that it's loaded by putting this in &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ox-ipynb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb418548" class="outline-2"&gt;
&lt;h2 id="orgb418548"&gt;Use&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb418548"&gt;
&lt;p&gt;
In your org-mode file use the &lt;code&gt;export-ipython&lt;/code&gt; function to export it to an &lt;code&gt;ipynb&lt;/code&gt; file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;export-ipynb-buffer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that this will only work if you have &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; installed and at least one ipython code block in the org-file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+BEGIN_SRC ipython :session
print("a")
#+END_SRC
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>jupyter</category><category>orgmode</category><guid>https://necromuralist.github.io/posts/org-to-jupyter-notebook/</guid><pubDate>Fri, 14 Apr 2017 03:00:28 GMT</pubDate></item><item><title>Building a Jupyter Docker Container</title><link>https://necromuralist.github.io/posts/building-a-jupyter-docker-container/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;This is how I built a docker container to run a jupyter server. The reason why I did it was that I wanted to isolate any non-python dependencies I needed to install, but so far I haven't done any, so this could actually be done more easily using &lt;cite&gt;virtualenv&lt;/cite&gt;, but this is a starting point.&lt;/p&gt;
&lt;section id="the-dockerfile"&gt;
&lt;h2&gt;The Dockerfile&lt;/h2&gt;
&lt;p&gt;This is the configuration for building the docker image.&lt;/p&gt;
&lt;pre class="code dockerfile"&gt;&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-1" name="rest_code_5e28943144bd4ef99482041774124cf3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;ubuntu:latest&lt;/span&gt;
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-2" name="rest_code_5e28943144bd4ef99482041774124cf3-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /code&lt;/span&gt;
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-3" name="rest_code_5e28943144bd4ef99482041774124cf3-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -y upgrade
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-4" name="rest_code_5e28943144bd4ef99482041774124cf3-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install -y build-essential python-dev
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-5" name="rest_code_5e28943144bd4ef99482041774124cf3-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install -y python python-distribute python-pip
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-6" name="rest_code_5e28943144bd4ef99482041774124cf3-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; pip install pip --upgrade
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-7" name="rest_code_5e28943144bd4ef99482041774124cf3-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;ADD&lt;/span&gt; requirements.txt /code
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-8" name="rest_code_5e28943144bd4ef99482041774124cf3-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-9" name="rest_code_5e28943144bd4ef99482041774124cf3-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir /notebooks
&lt;a id="rest_code_5e28943144bd4ef99482041774124cf3-10" name="rest_code_5e28943144bd4ef99482041774124cf3-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;CMD&lt;/span&gt; jupyter notebook --no-browser --ip &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 --port &lt;span class="m"&gt;8888&lt;/span&gt; /notebooks
&lt;/pre&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;FROM&lt;/code&gt; line shows that I'm building my container using an ubuntu image (the latest image). The &lt;code class="docutils literal"&gt;WORKDIR&lt;/code&gt; sets the current working directory so commands that are run will look there for files. The next set of &lt;code class="docutils literal"&gt;RUN&lt;/code&gt; lines just say to update &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/code&gt; and install some basic python packages. The &lt;code class="docutils literal"&gt;ADD&lt;/code&gt; line takes the &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; file in the directory where I'm going to run this and put it in &lt;code class="docutils literal"&gt;/CODE&lt;/code&gt; which I pointed to with the &lt;code class="docutils literal"&gt;WORKDIR&lt;/code&gt; line. The next &lt;code class="docutils literal"&gt;RUN&lt;/code&gt; commands install my python dependencies and make a folder called &lt;code class="docutils literal"&gt;/notebooks&lt;/code&gt; to put the jupyter notebooks in. The last line (&lt;code class="docutils literal"&gt;CMD&lt;/code&gt;) is what will be executed when the container is run.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="building-the-image"&gt;
&lt;h2&gt;Building the Image&lt;/h2&gt;
&lt;p&gt;If the docker-file is stored in a file named &lt;code class="docutils literal"&gt;jupyter.dockerfile&lt;/code&gt; next to the &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; file, both of which are in the directory where I run the build command. To build it (and name the image &lt;code class="docutils literal"&gt;jupyter&lt;/code&gt;) I'd run the command:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_18403c28ad0044b2a4ba94ee72b4d805-1" name="rest_code_18403c28ad0044b2a4ba94ee72b4d805-1"&gt;&lt;/a&gt;docker -f jupyter.dockerfile -t jupyter:latest .
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="running-the-server"&gt;
&lt;h2&gt;Running the Server&lt;/h2&gt;
&lt;p&gt;To run the server in the same directory where the notebooks should be stored and using the default port of 8888:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_0545ae430a2d4e34935e5a6823e1785a-1" name="rest_code_0545ae430a2d4e34935e5a6823e1785a-1"&gt;&lt;/a&gt;docker --name jupyter -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;:/notebooks -d jupyter
&lt;/pre&gt;&lt;p&gt;Now the server should be reachable at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8888&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;</description><category>docker</category><category>how-to</category><category>jupyter</category><guid>https://necromuralist.github.io/posts/building-a-jupyter-docker-container/</guid><pubDate>Mon, 20 Jun 2016 03:48:21 GMT</pubDate></item></channel></rss>