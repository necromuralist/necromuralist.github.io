<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Cloistered Monkey (Posts about Networking)</title><link>https://necromuralist.github.io/</link><description></description><atom:link href="https://necromuralist.github.io/categories/cat_networking.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 18 May 2023 07:55:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The Linux IPv6 Router Advertisement Daemon (radvd)</title><link>https://necromuralist.github.io/posts/the-linux-ipv6-router-advertisement-daemon-radvd/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org3d81659" class="outline-2"&gt;
&lt;h2 id="org3d81659"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d81659"&gt;
&lt;p&gt;
&lt;a href="http://www.litech.org/radvd/"&gt;radvd&lt;/a&gt; (the router advertisement daemon) sends IPv6 advertisements and responds to node IPv6 requests. Here's the description from the man page.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;radvd&lt;/b&gt; is the router advertisement daemon for IPv6. It listens to router solicitations and sends router advertisements as described in "Neighbor Discovery for IP Version 6 (IPv6)" (RFC 4861). With these advertisements hosts can automatically configure their addresses and some other parameters. They also can choose a default router based on these advertisements. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf8c37a" class="outline-2"&gt;
&lt;h2 id="orgbf8c37a"&gt;Installation and Setup&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbf8c37a"&gt;
&lt;p&gt;
Setting &lt;b&gt;radvd&lt;/b&gt; is suspiciously easy compared to other linux services. First you install it.
&lt;/p&gt;

&lt;pre class="example" id="org8c2e7e4"&gt;
sudo apt install radvd
&lt;/pre&gt;

&lt;p&gt;
Installing it will also start the service so we can use &lt;code&gt;systemctl&lt;/code&gt; to check how it's doing.
&lt;/p&gt;

&lt;pre class="example" id="orgbf752a3"&gt;
systemctl status radvd
&lt;/pre&gt;

&lt;pre class="example" id="orge8c350e"&gt;
systemctl status radvd
● radvd.service - LSB: Router Advertising Daemon
   Loaded: loaded (/etc/init.d/radvd; bad; vendor preset: enabled)
   Active: active (exited) since Fri 2018-07-20 12:39:19 PDT; 36s ago
     Docs: man:systemd-sysv-generator(8)

Jul 20 12:39:18 asgaard systemd[1]: Starting LSB: Router Advertising Daemon...
Jul 20 12:39:19 asgaard radvd[8532]: Starting radvd:
Jul 20 12:39:19 asgaard radvd[8532]: * /etc/radvd.conf does not exist or is empty.
Jul 20 12:39:19 asgaard radvd[8532]: * See /usr/share/doc/radvd/README.Debian
Jul 20 12:39:19 asgaard radvd[8532]: * radvd will *not* be started.
Jul 20 12:39:19 asgaard systemd[1]: Started LSB: Router Advertising Daemon.
&lt;/pre&gt;

&lt;p&gt;
You can see in the output that there's a line with &lt;code&gt;/etc/radvd.conf does not exist or is empty.&lt;/code&gt;. To fix this we're going to create the configuration file.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge78faaf" class="outline-3"&gt;
&lt;h3 id="orge78faaf"&gt;The Configuration File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge78faaf"&gt;
&lt;p&gt;
Now create a configuration file (named &lt;code&gt;radvd.conf&lt;/code&gt;). Here's an example.
&lt;/p&gt;

&lt;pre class="example" id="org6fcec61"&gt;
interface eth0
{
MinRtrAdvInterval 3;
MaxRtrAdvInterval 4;
AdvSendAdvert on;
AdvManagedFlag on;
prefix 2001:db7::/64
{ AdvValidLifetime 14300; AdvPreferredLifetime 14200; }
;
};
&lt;/pre&gt;

&lt;p&gt;
Note that the interface name depends on your system. Most linux systems don't use the &lt;code&gt;eth0&lt;/code&gt; convention anymore. On my desktop the ethernet inteface is called &lt;code&gt;enp1s0&lt;/code&gt; and on my raspberry pi it's &lt;code&gt;enxb827eb6c9129&lt;/code&gt; so make sure you check what your interface name is using &lt;code&gt;ifconfig&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Now move (or copy) the config file into &lt;code&gt;/etc/&lt;/code&gt;
&lt;/p&gt;

&lt;pre class="example" id="org1e331bf"&gt;
sudo mv radvd.conf /etc/
&lt;/pre&gt;

&lt;p&gt;
And then restart &lt;code&gt;radvd&lt;/code&gt; and check its state.
&lt;/p&gt;

&lt;pre class="example" id="orgb09a3c6"&gt;
sudo service radvd restart
systemctl status radvd
&lt;/pre&gt;

&lt;pre class="example" id="org68ed3e8"&gt;
● radvd.service - LSB: Router Advertising Daemon
   Loaded: loaded (/etc/init.d/radvd; bad; vendor preset: enabled)
   Active: active (exited) since Fri 2018-07-20 12:41:36 PDT; 2s ago
     Docs: man:systemd-sysv-generator(8)
  Process: 10008 ExecStop=/etc/init.d/radvd stop (code=exited, status=0/SUCCESS)
  Process: 10017 ExecStart=/etc/init.d/radvd start (code=exited, status=0/SUCCESS)

Jul 20 12:41:36 asgaard systemd[1]: Starting LSB: Router Advertising Daemon...
Jul 20 12:41:36 asgaard radvd[10017]: Starting radvd:
Jul 20 12:41:36 asgaard radvd[10017]: * IPv6 forwarding seems to be disabled.
Jul 20 12:41:36 asgaard radvd[10017]: * See /usr/share/doc/radvd/README.Debian
Jul 20 12:41:36 asgaard radvd[10017]: * radvd will *not* be started.
Jul 20 12:41:36 asgaard systemd[1]: Started LSB: Router Advertising Daemon.
&lt;/pre&gt;

&lt;p&gt;
So the warning about the configuration file went away, now we have to fix the &lt;code&gt;IPv6 forwarding seems to be disabled.&lt;/code&gt; error.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d0b7ab" class="outline-3"&gt;
&lt;h3 id="org7d0b7ab"&gt;Enable IPv6 Forwarding&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7d0b7ab"&gt;
&lt;p&gt;
For now you can enable it at the command line.
&lt;/p&gt;

&lt;pre class="example" id="orga2137fb"&gt;
sudo sysctl -w net.ipv6.conf.all.forwarding=1
&lt;/pre&gt;

&lt;p&gt;
And restart and check &lt;code&gt;radvd&lt;/code&gt; again.
&lt;/p&gt;

&lt;pre class="example" id="org6b3b083"&gt;
sudo service radvd restart
systemctl status radvd
&lt;/pre&gt;

&lt;pre class="example" id="org80e22b4"&gt;
● radvd.service - LSB: Router Advertising Daemon
   Loaded: loaded (/etc/init.d/radvd; bad; vendor preset: enabled)
   Active: active (running) since Fri 2018-07-20 12:45:02 PDT; 20s ago
     Docs: man:systemd-sysv-generator(8)
  Process: 12255 ExecStop=/etc/init.d/radvd stop (code=exited, status=0/SUCCESS)
  Process: 12264 ExecStart=/etc/init.d/radvd start (code=exited, status=0/SUCCESS)
   CGroup: /system.slice/radvd.service
           ├─12275 /usr/sbin/radvd -u radvd -p /var/run/radvd/radvd.pid
           └─12276 /usr/sbin/radvd -u radvd -p /var/run/radvd/radvd.pid

Jul 20 12:45:01 asgaard systemd[1]: Starting LSB: Router Advertising Daemon...
Jul 20 12:45:02 asgaard radvd[12274]: version 2.11 started
Jul 20 12:45:02 asgaard radvd[12264]: Starting radvd: radvd.
Jul 20 12:45:02 asgaard systemd[1]: Started LSB: Router Advertising Daemon.
&lt;/pre&gt;

&lt;p&gt;
So it looks like our daemon is working. If you restart the server, though, the IPv6 port forwarding won't be enabled so open up &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; and un-comment out the following line.
&lt;/p&gt;

&lt;pre class="example" id="org8ce04b3"&gt;
net.ipv6.conf.all.forwarding=1
&lt;/pre&gt;

&lt;p&gt;
Now the next time you power on the computer it should be enabled.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd398d4a" class="outline-2"&gt;
&lt;h2 id="orgd398d4a"&gt;Checking&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd398d4a"&gt;
&lt;p&gt;
To check if it's working you can put another device on the LAN and check &lt;code&gt;ifconfig&lt;/code&gt;. In our &lt;code&gt;radvd.conf&lt;/code&gt; file we defined the prefix for the address:
&lt;/p&gt;

&lt;pre class="example" id="org7c2ded9"&gt;
prefix 2001:db7::/64
&lt;/pre&gt;

&lt;p&gt;
So in the &lt;code&gt;ifconfig&lt;/code&gt; output  we should see an entry for an IPv6 address that starts with &lt;code&gt;2001:db7::&lt;/code&gt;. In fact I ended up with two.
&lt;/p&gt;

&lt;pre class="example" id="org97f151f"&gt;
inet6 2001:db7::b8b4:6adf:6267:5571  prefixlen 64  scopeid 0x0&amp;lt;global&amp;gt;
inet6 2001:db7::a80c:1a05:eaac:c1e8  prefixlen 64  scopeid 0x0&amp;lt;global&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc8950f7" class="outline-2"&gt;
&lt;h2 id="orgc8950f7"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc8950f7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/learn/intro-to-linux/2017/12/ipv6-auto-configuration-linux"&gt;IPv6 auto-configuration&lt;/a&gt; - how to setup &lt;b&gt;radvd&lt;/b&gt; (from linux.com)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>how-to</category><category>networking</category><guid>https://necromuralist.github.io/posts/the-linux-ipv6-router-advertisement-daemon-radvd/</guid><pubDate>Fri, 20 Jul 2018 18:12:11 GMT</pubDate></item><item><title>OpenVPN on Ubuntu 18.04</title><link>https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org251b621" class="outline-2"&gt;
&lt;h2 id="org251b621"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org251b621"&gt;
&lt;p&gt;
I'm connecting to a remote network using &lt;a href="https://openvpn.net/"&gt;OpenVPN&lt;/a&gt; served by an ASUS access point. I originally did it at the command line.
&lt;/p&gt;

&lt;pre class="example" id="orgfda0256"&gt;
sudo openvpn --config client.ovpn
&lt;/pre&gt;

&lt;p&gt;
It turns out that this doesn't allow me to access anything outside of the network that I was connecting to. From what I can tell it's a DNS problem, but nothing I found about fixing DNS problems with OpenVPN from the command line worked. Luckily the Network Settings GUI works, but even then, it didn't work out of the box.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org31a7686" class="outline-2"&gt;
&lt;h2 id="org31a7686"&gt;Initial Configuration&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org31a7686"&gt;
&lt;p&gt;
First, not everything you need is installed. Besides the openvpn client itself (which I had installed before trying to run it at the command line) you need some things for the network settings as well.
&lt;/p&gt;

&lt;pre class="example" id="org08d5219"&gt;
apt install openvpn network-manager-openvpn network-manager-openvpn-gnome
&lt;/pre&gt;

&lt;p&gt;
Now open the network settings.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/network_settings_menu.png" alt="nil"&gt;
&lt;/p&gt;


&lt;p&gt;
In the window that pops up click on the + sign to add a connection.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/network_settings.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
In the window that then pops up click on &lt;code&gt;Import from file...&lt;/code&gt; (I'm assuming you are using a config file).
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/import_from_file.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Navigate to the config file, and double-click on it. In the dialog that pops up enter whatever extra information you need. In my case it was the username and password.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/vpn_dialog.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Click on the green 'Add' button and you should now have an entry for your VPN connection in the network settings. Click on the on switch (initially labeled 'Off') and if you're lucky it will connect.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/start_vpn.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
After you click on the switch it will look like this, but read on just in case it didn't.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/opened_vpn.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org794511a" class="outline-2"&gt;
&lt;h2 id="org794511a"&gt;Fixing the Password Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org794511a"&gt;
&lt;p&gt;
Unfortunately for me it didn't connect. In &lt;code&gt;/var/log/syslog&lt;/code&gt; I could see entries like this:
&lt;/p&gt;

&lt;pre class="example" id="orged7dfe9"&gt;
gnome-shell[2805]: Invalid VPN service type (cannot find authentication binary)
&lt;/pre&gt;

&lt;p&gt;
I don't know if the message is directly telling you this (it doesn't seem to), but it turns out that for some reason the Network Settings doesn't save your password. Look in &lt;code&gt;/etc/NetworkManager/system-connections/&lt;/code&gt; for a file that matches the name you gave your vpn in the settings. In my case it was just called 'client'. Open it as root in an editor.
&lt;/p&gt;

&lt;pre class="example" id="org9724458"&gt;
sudo emacs /etc/NetworkManager/system-connections/client
&lt;/pre&gt;

&lt;p&gt;
Then change this line in the &lt;code&gt;[vpn]&lt;/code&gt; section:
&lt;/p&gt;

&lt;pre class="example" id="orgf90bfc9"&gt;
password-flags=1
&lt;/pre&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;pre class="example" id="orgc3cf862"&gt;
password-flags=0
&lt;/pre&gt;

&lt;p&gt;
Then add this section.
&lt;/p&gt;

&lt;pre class="example" id="org3ab873f"&gt;
[vpn-secrets]
password="your-password"
&lt;/pre&gt;

&lt;p&gt;
Where &lt;code&gt;"your-password"&lt;/code&gt; is your vpn password. &lt;i&gt;The quotation marks around your password are required.&lt;/i&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org78dfeca" class="outline-2"&gt;
&lt;h2 id="org78dfeca"&gt;Now Really Connect&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org78dfeca"&gt;
&lt;p&gt;
First restart the network manager.
&lt;/p&gt;

&lt;pre class="example" id="orgcbdc09a"&gt;
sudo service network-manager restart
&lt;/pre&gt;

&lt;p&gt;
Now re-open the network settings and click on the switch again. With any luck this time it will stay on and you can check by going to one of the devices on your VPN network.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/switch_on.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d223dc" class="outline-2"&gt;
&lt;h2 id="org7d223dc"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7d223dc"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Network Manager Dependencies: &lt;a href="https://askubuntu.com/questions/579159/unable-to-load-vpn-connection-editor-in-ubuntu-14-04-lts"&gt;https://askubuntu.com/questions/579159/unable-to-load-vpn-connection-editor-in-ubuntu-14-04-lts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add VPN Password: &lt;a href="https://askubuntu.com/questions/976719/unable-to-connect-point-to-point-tunneling-protocol-pptp-vpn-in-ubuntu-17-10"&gt;https://askubuntu.com/questions/976719/unable-to-connect-point-to-point-tunneling-protocol-pptp-vpn-in-ubuntu-17-10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>how-to</category><category>ubuntu</category><guid>https://necromuralist.github.io/posts/openvpn-on-ubuntu-1804/</guid><pubDate>Wed, 11 Jul 2018 01:11:39 GMT</pubDate></item><item><title>TCP Dump Notes</title><link>https://necromuralist.github.io/posts/tcp-dump-notes/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
These are notes I made while surfing the web looking into &lt;a href="http://www.tcpdump.org/"&gt;TCP Dump&lt;/a&gt;. You will most likely need to use &lt;code&gt;sudo&lt;/code&gt; to run most of the commands, but I'm leaving it off to make it shorter.
&lt;/p&gt;

&lt;div id="outline-container-org76fc9a7" class="outline-2"&gt;
&lt;h2 id="org76fc9a7"&gt;About TCP Dump&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org76fc9a7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It has more filtering capabilities and can filter while capturing packets, but it doesn't have the analytical tools that something like wireshark has&lt;sup&gt;&lt;a id="fnr.1" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.1" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org89a0056" class="outline-2"&gt;
&lt;h2 id="org89a0056"&gt;Some Examples&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org89a0056"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6f6a1e3" class="outline-3"&gt;
&lt;h3 id="org6f6a1e3"&gt;Listing interfaces&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6f6a1e3"&gt;
&lt;p&gt;
You can ask &lt;code&gt;tcpdump&lt;/code&gt; which interfaces it is able to listen to&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="org81b9f86"&gt;
tcpdump -D
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgce9c37e" class="outline-3"&gt;
&lt;h3 id="orgce9c37e"&gt;Capture packets on an interface&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgce9c37e"&gt;
&lt;p&gt;
To capture packets on an interface you pass its name to the &lt;code&gt;-i&lt;/code&gt; flag&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; (here the interface I'll use is &lt;code&gt;eno1&lt;/code&gt;).
&lt;/p&gt;

&lt;pre class="example" id="org3cfa155"&gt;
tcpdump -i eno1
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5361b51" class="outline-4"&gt;
&lt;h4 id="org5361b51"&gt;Save the packet capture to a file&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5361b51"&gt;
&lt;p&gt;
The default behavior is for &lt;code&gt;tcpdump&lt;/code&gt; to send the output to standard output, to have it save the packets to a files use the &lt;code&gt;-w&lt;/code&gt; flag&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; (you can call it anything, I'll call it &lt;code&gt;dump.pcap&lt;/code&gt;).
&lt;/p&gt;

&lt;pre class="example" id="org6e1b0ad"&gt;
tcpdump -i eno1 -w dump.pcap
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7866a15" class="outline-4"&gt;
&lt;h4 id="org7866a15"&gt;Increase the verbosity of the capture&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7866a15"&gt;
&lt;p&gt;
To increase the amount if information that's captured, pass multiple &lt;code&gt;v&lt;/code&gt; arguments&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; (in this case I'll use &lt;code&gt;-vvv&lt;/code&gt;).
&lt;/p&gt;

&lt;pre class="example" id="orgc5a7f11"&gt;
tcpdump -i eno1 -vvv -w dump.pcap
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0670a2e" class="outline-3"&gt;
&lt;h3 id="org0670a2e"&gt;Filtering&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0670a2e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf4046de" class="outline-4"&gt;
&lt;h4 id="orgf4046de"&gt;By IP address&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf4046de"&gt;
&lt;p&gt;
You can get all the packets being sent or received by a host using the &lt;code&gt;host&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.3" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orgc6f1590"&gt;
tcpdump host 192.168.1.12
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9ca19e7" class="outline-4"&gt;
&lt;h4 id="org9ca19e7"&gt;By Sender IP Address&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9ca19e7"&gt;
&lt;p&gt;
You can filter out all the packets except those that are being sent by a host using the &lt;code&gt;src host&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orga784865"&gt;
tcpdump -i eno1 src host 192.168.1.12
&lt;/pre&gt;

&lt;p&gt;
You can leave off the &lt;code&gt;host&lt;/code&gt; argument and just use &lt;code&gt;src&lt;/code&gt;&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3d4e693" class="outline-4"&gt;
&lt;h4 id="org3d4e693"&gt;By Target IP Address&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3d4e693"&gt;
&lt;p&gt;
To filter out all the packets except those that are going to a specific target use the &lt;code&gt;dst host&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.2.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orge66ff9e"&gt;
tcpdump -i eno1 dst host 192.168.1.1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4230fa0" class="outline-4"&gt;
&lt;h4 id="org4230fa0"&gt;Sender and Target IP Addresses&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4230fa0"&gt;
&lt;p&gt;
You can combine parameters using the logical operators &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt;&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="org76679e2"&gt;
tcpdump 'src 192.168.1.1 and dst 192.168.1.12'
&lt;/pre&gt;

&lt;p&gt;
The single quotes are optional and are just used to group the arguments together.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbfbee41" class="outline-4"&gt;
&lt;h4 id="orgbfbee41"&gt;By Subnet&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbfbee41"&gt;
&lt;p&gt;
You can grab all the packets on a network or subnet using the &lt;code&gt;net&lt;/code&gt; argument and &lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation"&gt;CIDR&lt;/a&gt; notation&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;. This example grabs all the packets on the &lt;code&gt;192.168.1.*&lt;/code&gt; subnet.
&lt;/p&gt;

&lt;pre class="example" id="org5acb9e4"&gt;
tcpdump net 192.168.1.0/24
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgafc30c4" class="outline-4"&gt;
&lt;h4 id="orgafc30c4"&gt;By port and/or protocol&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgafc30c4"&gt;
&lt;p&gt;
If you want to only catch activity on a certain &lt;a href="https://en.wikipedia.org/wiki/Port_(computer_networking)"&gt;port&lt;/a&gt; and by a certain protocol then you use the &lt;code&gt;port&lt;/code&gt; argument and the name of the protocol (e.g. &lt;code&gt;udp&lt;/code&gt;)&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;. This would catch all the &lt;code&gt;tcp&lt;/code&gt; traffic over SSH.
&lt;/p&gt;
&lt;pre class="example" id="orgf7967e9"&gt;
tcpdump tcp port 22
&lt;/pre&gt;

&lt;p&gt;
You can use &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;udp&lt;/code&gt;, or &lt;code&gt;icmp&lt;/code&gt; for the protocols and add multiple ports using a comma&lt;sup&gt;&lt;a id="fnr.4" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.4" role="doc-backlink"&gt;4&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;pre class="example" id="orgf97e75f"&gt;
tcpdump tcp port 22,80
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad86226" class="outline-4"&gt;
&lt;h4 id="orgad86226"&gt;Turn off hostname and port translation&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgad86226"&gt;
&lt;p&gt;
The default behavior for &lt;code&gt;tcpdump&lt;/code&gt; is to translate the hostnames and ports to something human-readable if possible. To turn this off you pass in the &lt;code&gt;-n&lt;/code&gt; argument&lt;sup&gt;&lt;a id="fnr.3.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt;. Since this stops having to look things up it will reduce the amount of overhead needed by &lt;code&gt;tcpdump&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example" id="org86d466f"&gt;
tcpdump -n -i eno1 port 22
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9feac4d" class="outline-2"&gt;
&lt;h2 id="org9feac4d"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9feac4d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;(Wireshark Revealed&lt;sup&gt;&lt;a id="fnr.5" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt;) &lt;a href="http://www.tcpdump.org/"&gt;The tcpdump website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Wireshark Revealed&lt;sup&gt;&lt;a id="fnr.5.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt;) &lt;a href="http://danielmiessler.com/study/tcpdump/"&gt;A friendly tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Wireshark Revealed&lt;sup&gt;&lt;a id="fnr.5.100" class="footref" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fn.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt;) &lt;a href="http://www.tcpdump.org/tcpdump_man.html"&gt;The official man page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org01e9100" class="outline-2"&gt;
&lt;h2 id="org01e9100"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org01e9100"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.1" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Diogenes, Y. &amp;amp; Ozkaya, E. (2018). Cybersecurity, Attack and Defense Strategies : infrastructure security with Red Team and Blue Team tactics. Birmingham, UK: Packt Publishing.]
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Johansen, G. (2017). Digital forensics and incident response : an intelligent way to respond to attacks. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.3" role="doc-backlink"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Beltrame, J. (2017). Penetration testing bootcamp : quickly get up and running with pentesting techniques. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.4" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.4" role="doc-backlink"&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
McPhee. &amp;amp; Beltrame, J. (2016). Penetration testing with Raspberry Pi : learn the art of building a low-cost, portable hacking arsenal using Raspberry Pi 3 and Kali Linux 2. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.5" class="footnum" href="https://necromuralist.github.io/posts/tcp-dump-notes/#fnr.5" role="doc-backlink"&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Baxter, J., Orzach, Y. &amp;amp; Mishra, C. (2017). Wireshark revealed : essential skills for IT professionals : get up and running with Wireshark to analyze your network effectively. Birmingham, UK: Packt Publishing.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>networking</category><category>notes</category><guid>https://necromuralist.github.io/posts/tcp-dump-notes/</guid><pubDate>Wed, 09 May 2018 21:54:56 GMT</pubDate></item></channel></rss>